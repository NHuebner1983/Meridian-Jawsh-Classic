// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
SurvivalRoomMaintenance is UtilityFunctions

constants:

   include blakston.khd

resources:

   include survivalmaint.lkod

   public_survival_started = \
      "%s has started a public co-op survival arena. It will begin in "
      "15 seconds."
   public_ended = \
      "The public co-op survival arena has ended at level %i."

properties:

   plSurvivalRooms = $

   // Are Survival Arenas active?
   piPublicSurvivalEnabled = TRUE
   piSoloSurvivalEnabled = TRUE
   piGuildSurvivalEnabled = TRUE

   // At what level multiple do these increase?
   piSurvivalTPIncreaseLevel = 8
   piSurvivalLootIncreaseLevel = 4

   // How much extra XP per level?
   piSurvivalXPPerLevel = 2

   // How much extra cash on each monster kill per level?
   piSurvivalCashPerLevel = 20

   // Don't use these rooms (list of RIDs)
   plExcludedRoomsList = $

   // Default time between rounds
   piRegroupTime = 15000

   // Default time between wall blitzes (mobs walk through walls)
   piWallBlitzTime = 300000

   // Default last join level
   piLastJoinLevel = 50

   // Do we restore resources on level completion?
   pbRestoreResources = TRUE

messages:

   Constructor()
   {
      Send(self,@Recreate);
      
      plExcludedRoomsList = [RID_MAR_SMITHY,
                             RID_MAR_ELDER_HUT,
                             RID_SEWER_KING,
                             RID_TEMPLE_RIIJA,
                             RID_MAR_CRYPT3A,
                             RID_FOREST4,
                             RID_MAR_CRYPT2,
                             RID_MAR_CRYPT1,
                             RID_FOREST4,
                             RID_FOREST5,
                             RID_KOCATAN,
                             RID_KOC_INN,
                             RID_FOREST1,
                             RID_FOREST2,
                             RID_FOREST3,
                             RID_ORC_PIT_B,
                             RID_ORC_PIT_A,
                             RID_ORC_CAVE5,
                             RID_G8,
                             RID_KOC_SEWER2,
                             RID_KOC_SEWER1,
                             RID_JASSEW1,
                             RID_JASSEW2,
                             RID_JASSEW3,
                             RID_BAR_SEWER2,
                             RID_BAR_SEWER3,
                             RID_BAR_SEWER,
                             RID_KC5,
                             RID_KA3,
                             RID_H9,
                             RID_VICTORIA,
                             RID_CASTLE1,
                             RID_CASTLE1B,
                             RID_BRAX_CASTLE2,
                             RID_MARSMITH,
                             RID_MARELDER,
                             RID_SEWKING,
                             RID_TEMPLE_RIIJA];

      return;
   }

   Recreate()
   {
      piLastJoinLevel = 50;

      return;
   }

   CreateRoom(who=$,guild_survival=FALSE,iPublic=FALSE,sString=$,
              lSurvivalOptions=$,oForceBaseRoom=$)
   {
      local oRoom, oBaseRoom, lAllRooms, iRID, i, lPlayersLoggedOn, z,
            lExcludedRoomsObjs, iNatural, iPvP, o;

      if guild_survival = TRUE
         AND NOT piGuildSurvivalEnabled
      {
         return $;
      }

      if iPublic = TRUE
         AND NOT piPublicSurvivalEnabled
      {
         return $;
      }

      if iPublic = FALSE
         AND guild_survival = FALSE
         AND NOT piSoloSurvivalEnabled
      {
         return $;
      }

      iNatural = TRUE;
      iPvP = FALSE;
      foreach o in lSurvivalOptions
      {
         if o = OPT_NATURAL
         {
            iNatural = FALSE;
         }
         
         if o = OPT_PVP_ON
         {
            iPvP = TRUE;
         }
      }

      lAllRooms = ListCopy(Send(SYS,@GetRooms));

      // If we sent the string used to activate the arena (only for public)
      // check it for a room name to use. If we sent a room name, use that
      // for the survival room.
      if sString <> $
      {
         foreach i in lAllRooms
         {
            if StringContain(sString,Send(i,@GetName))
            {
               oForceBaseRoom = i;

               break;
            }
         }
      }

      lExcludedRoomsObjs = $;
      foreach z in plExcludedRoomsList
      {
         lExcludedRoomsObjs = Cons(Send(SYS,@FindRoomByNum,#num=z),
                                    lExcludedRoomsObjs);
      }

      // DMs can choose any room, but users can only pick from the allowed
      // rooms.  Set oBaseRoom to the chosen room so it can be checked
      // in the following code.
      if NOT IsClass(who,&DM)
         AND oForceBaseRoom <> $
      {
         oBaseRoom = oForceBaseRoom;
         oForceBaseRoom = $;
      }
      else
      {
         oBaseRoom = Nth(lAllRooms,Random(1,Length(lAllRooms)));
      }

      // Ensure it's a monster room, and shrink the list on every failure.
      if (NOT IsClass(oBaseRoom,&MonsterRoom))
         OR IsClass(oBaseRoom,&SurvivalRoom)
         OR (lExcludedRoomsObjs <> $
            AND FindListElem(lExcludedRoomsObjs,oBaseRoom))
         OR (iNatural AND Send(oBaseRoom,@GetGenerators) = $)
      {
         while (NOT IsClass(oBaseRoom,&MonsterRoom))
            OR IsClass(oBaseRoom,&SurvivalRoom)
            OR (lExcludedRoomsObjs <> $
               AND FindListElem(lExcludedRoomsObjs,oBaseRoom))
            OR (iNatural AND Send(oBaseRoom,@GetGenerators) = $)
         {
            lAllRooms = DelListElem(lAllRooms,oBaseRoom);
            oBaseRoom = Nth(lAllRooms,Random(1,Length(lAllRooms)));
         }
      }

      if NOT IsClass(oBaseRoom,&MonsterRoom)
      {
         return $;
      }

      // If we still have a forced base room, it was given by a DM.
      // Set the base room to the forced one.
      if oForceBaseRoom <> $
      {
         oBaseRoom = oForceBaseRoom;
      }

      iRID = Send(self,@GetNextAvailableRID);
      
      if iRID = 0
      {
         return $;
      }

      if guild_survival
      {
         Send(SYS,@CreateOneRoomIfNew,#num=iRID,#class=&SurvivalRoom,
               #poGuild=Send(who,@GetGuild),#base_room=oBaseRoom,#iPvP=iPvP);
      }
      else
      {
         Send(SYS,@CreateOneRoomIfNew,#num=iRID,#class=&SurvivalRoom,
               #iPublic=iPublic,#base_room=oBaseRoom,#iPvP=iPvP);
      }

      oRoom = Send(SYS,@FindRoomByNum,#num=iRID);

      if oRoom <> $
      {
         plSurvivalRooms = Cons(oRoom,plSurvivalRooms);
         Send(Send(SYS,@GetStatistics),@AddToRoomCount,#iNum=iRID);
         Send(oRoom,@Teleport,#what=who);

         if iPublic
         {
            lPlayersLoggedOn = Send(SYS,@GetUsersLoggedOn);
         
            foreach i in lPlayersLoggedOn
            {
               Send(i,@MsgSendUser,#message_rsc=public_survival_started,
                                   #parm1=Send(who,@GetTrueName));
            }
         }
      }

      return oRoom;
   }

   GetNextAvailableRID()
   {
      local iRID, i, bExists;

      iRID = RID_SURVIVAL_START;

      if plSurvivalRooms = $
      {
         return iRID;
      }

      while iRID <= RID_SURVIVAL_END
      {
         bExists = FALSE;
         foreach i in plSurvivalRooms
         {
            if Send(i,@GetRoomNum) = iRID
            {
               bExists = TRUE;
            }
         }

         if NOT bExists
         {
            return iRID;
         }

         iRID = iRID + 1;
      }

      return 0;
   }

   FindRoomByGuild(oGuild=$)
   {
      local i;

      foreach i in plSurvivalRooms
      {
         if Send(i,@GetGuildAssociation) = oGuild
            AND Send(i,@GetAllowJoins)
         {
            return i;
         }
      }

      return $;
   }

   FindPublicRoom()
   {
      local i;

      foreach i in plSurvivalRooms
      {
         if Send(i,@GetPublicStatus) = TRUE
            AND Send(i,@GetAllowJoins)
         {
            return i;
         }
      }

      return $;
   }

   RoomDeleted(what = $)
   {
      local plUsers, i;

      if plSurvivalRooms <> $
         AND FindListElem(plSurvivalRooms,what) <> 0
      {
         if Send(what,@GetPublicStatus)
         {
            plUsers = Send(SYS,@GetUsersLoggedOn);
            foreach i in plUsers
            {
               Send(i,@MsgSendUser,#message_rsc=public_ended,
                                   #parm1=Send(what,@GetLevel));
               // Keep track of highest level.
               Send(Send(SYS,@GetStatistics),@RecordPublicSurvivalLevel,
                     #iLevel=Send(what,@GetLevel));
            }
         }
         else if Send(what,@GetGuildAssociation) <> $
         {
            Send(Send(SYS,@GetStatistics),@RecordGuildSurvivalLevel,
                  #iLevel=Send(what,@GetLevel));
         }
         else
         {
            Send(Send(SYS,@GetStatistics),@RecordSoloSurvivalLevel,
                  #iLevel=Send(what,@GetLevel));
         }

         plSurvivalRooms = DelListElem(plSurvivalRooms,what);
      }

      return;
   }

   GetRegroupTime()
   {
      return piRegroupTime;
   }

   GetPublicSurvivalEnabled()
   {
      return piPublicSurvivalEnabled;
   }

   GetGuildSurvivalEnabled()
   {
      return piGuildSurvivalEnabled;
   }

   GetSoloSurvivalEnabled()
   {
      return piSoloSurvivalEnabled;
   }

   GetSurvivalXP()
   {
      return piSurvivalXPPerLevel;
   }

   GetSurvivalCash()
   {
      return piSurvivalCashPerLevel;
   }

   GetSurvivalTP()
   {
      return piSurvivalTPIncreaseLevel;
   }

   GetSurvivalLoot()
   {
      return piSurvivalLootIncreaseLevel;
   }

   GetWallBlitzTime()
   {
      return piWallBlitzTime;
   }

   GetLastJoinLevel()
   {
      return piLastJoinLevel;
   }

   GetRestoreResources()
   {
      return pbRestoreResources;
   }

   ExcludeRID(iRID=RID_MAR_SMITHY)
   {
      if plExcludedRoomsList = $
         OR FindListElem(plExcludedRoomsList,iRID) = 0
      {
         plExcludedRoomsList = Cons(iRID,plExcludedRoomsList);

         return TRUE;
      }

      return FALSE;
   }

   AllowRID(iRID=0)
   {
      if plExcludedRoomsList <> $
         AND FindListElem(plExcludedRoomsList,iRID) <> 0
      {
         plExcludedRoomsList = DelListElem(plExcludedRoomsList,iRID);

         return TRUE;
      }

      return FALSE;
   }

   SurvivalStatusReport()
   {
      local i;

      // Report highest levels reached.
      Debug("Highest Public Survival level reached is ",
                  Send(Send(SYS,@GetStatistics),@RecordPublicSurvivalLevel));
      Debug("Highest Guild Survival level reached is ",
                  Send(Send(SYS,@GetStatistics),@RecordGuildSurvivalLevel));
      Debug("Highest Solo Survival level reached is ",
                  Send(Send(SYS,@GetStatistics),@RecordSoloSurvivalLevel));

      if plSurvivalRooms = $
      {
         Debug("No survival arenas active.");

         return;
      }

      foreach i in plSurvivalRooms
      {
         if Send(i,@GetPublicStatus)
         {
            Debug("Public arena is active, object is ",i," and base room is ",
                  Send(Send(i,@GetBaseRoom),@GetName));
            Debug("Public arena is on level ",Send(i,@GetLevel)," and has ",
                  Length(Send(i,@GetParticipants))," participants remaining.");
         }
         else if Send(i,@GetGuildAssociation)
         {
            Debug("Guild arena is active, object is ",i," and base room is ",
                  Send(Send(i,@GetBaseRoom),@GetName));
            Debug("Guild arena is on level ",Send(i,@GetLevel)," and has ",
                  Length(Send(i,@GetParticipants))," participants remaining.");
         }
         else
         {
            // Must be solo.
            Debug("Solo arena is active, object is ",i," and base room is ",
                  Send(Send(i,@GetBaseRoom),@GetName));
            Debug("Solo arena is on level ",Send(i,@GetLevel)," and was started by ",
                  Send(First(Send(i,@GetParticipants)),@GetTrueName));
         }
      }

      return plSurvivalRooms;
   }

end
////////////////////////////////////////////////////////////////////////////////
