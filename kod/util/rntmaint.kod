// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
RentableRoomMaintenance is UtilityFunctions

constants:

   include blakston.khd

   // This is the max number of days that a player can rent a room at a time.
   // Equal to about 20 offline days.
   DAYS_MAX = 1440

resources:

   include rntmaint.lkod

   RoomMaintenance_room_already = "You already have a room here."
   RoomMaintenance_no_rental_fee = "You have no money to rent a room."

   RoomMaintenance_key_copied = "Here is a copy of your room key."
   RoomMaintenance_no_key = "Where is the key from this inn to copy?"
   RoomMaintenance_no_copy_copy = "You may not copy a copy of a room key."
   RoomMaintenance_copy_no_money = "You cannot afford a copy of your room key."

properties:

   plHoldingDuringRecreate = $

   plRoomsRented = $

messages:

   Constructor()
   {
      Send(self,@Recreate);

      return;
   }

   Recreate()
   {
      return;
   }

   HoldRoomsDuringRecreate()
   {
      local i, oRoom;

      plHoldingDuringRecreate = $;

      foreach i in plRoomsRented
      {
         oRoom = Send(SYS,@FindRoomByNum,#num=i);
         plHoldingDuringRecreate = cons(oRoom,plHoldingDuringRecreate);
         Send(SYS,@DeleteRoom,#what=oRoom);
      }

      return;
   }

   ReattachRentableRooms()
   {
      local i;

      foreach i in plHoldingDuringRecreate
      {
         Send(SYS,@ReattachRoom,#oRoom=i);
      }

      plHoldingDuringRecreate = $;

      return;
   }

   RentRoom(who=$,iLocation=$,iCost=5000)
   {
      local iRID, oRoom;

      // Check if the player already has a room.  If so, complain and bail.
      oRoom = Send(self,@FindRoomByPlayer,#who=who,#iLocation=iLocation);
      if oRoom <> $
      {
         return RoomMaintenance_room_already;
      }

      if NOT Send(who,@CanAfford,#cost_shillings=iCost)
      {
         return RoomMaintenance_no_rental_fee;
      }

      // Deduct the fee
      Send(who,@Pay,#amount_shillings=iCost);

      // Set up the room
      iRID = Send(self,@GetNextAvailableRID,#iLocation=iLocation);
      Send(SYS,@CreateOneRoomIfNew,#num=iRID,
            #class=Send(self,@GetRoomClassByLocation,#iLocation=iLocation));
      Send(Send(SYS,@FindRoomByNum,#num=iRID),@SetRenter,#who=who);
      plRoomsRented = Cons(iRID,plRoomsRented);

      // Add it to the room enter count statistics.
      Send(Send(SYS,@GetStatistics),@AddToRoomCount,#iNum=iRID);

      // Create the key and give it to the player
      Send(who,@NewHold,#what=Create(&RoomKey,#iRID=iRID));

      // Return $ so that the innkeeper gives a friendly
      // message in the local flavor.
      return $;
   }

   CopyKey(who=$,iLocation=$,iCost=500)
   {
      local lPassive, oObject, oKey, bHasRoomKey, bFound;

      // Check if the player has a gold key.
      bHasRoomKey = FALSE;
      bFound = FALSE;
      lPassive = Send(who,@GetHolderPassive);

      foreach oObject in lPassive
      {
         oKey = Send(who,@HolderExtractObject,#data=oObject);

         // Is it from the proper inn?
         if IsClass(oKey,&RoomKey)
         {
            bHasRoomKey = TRUE;

            if IsClass(Send(SYS,@FindRoomByNum,#num=Send(oKey,@GetRID)),
                        Send(self,@GetRoomClassByLocation,#iLocation=iLocation))
            {
               bFound = TRUE;

               break;
            }
         }
      }

      if NOT bFound
      {
         // If not found, check if player has silver key.
         oKey = Send(who,@FindHolding,#class=&RoomKeyCopy);
         if oKey <> $ AND NOT bHasRoomKey
         {
            // If so, complain and bail.
            return RoomMaintenance_no_copy_copy;
         }
         else
         {
            // If not, complain and bail.
            return RoomMaintenance_no_key;
         }
      }

      if NOT Send(who,@CanAfford,#cost_shillings=iCost)
      {
         return RoomMaintenance_copy_no_money;
      }

      // Deduct the fee.
      Send(who,@Pay,#amount_shillings=iCost);

      // Copy the key and give it to the player.
      Send(who,@NewHold,#what=Send(oKey,@Copy));

      return RoomMaintenance_key_copied;
   }

   GotRent(who=$,iAmount=0,iCost=150,iLocation=$)
   {
      local iDays, oRoom, iDaysLeft;

      oRoom = Send(self,@FindRoomByPlayer,#who=who,#iLocation=iLocation);

      // No room?  Return out and do nothing.
      if oRoom = $
      {
         return $;
      }

      iDays = iAmount / iCost;

      // Make sure we don't go over max.
      if Send(oRoom,@GetDaysLeft) + iDays > DAYS_MAX
      {
         iDays = DAYS_MAX - Send(oRoom,@GetDaysLeft);
         // Returning 0 gives up the special error message.
         if iDays <= 0
         {
            return 0;
         }
      }

      // Did they even pay us enough for 1 additional day?  Cheap bastards!
      if iDays <= 0
      {
         return $;
      }

      // Set the amount to the even cost.
      iAmount = iDays * iCost;

      if NOT Send(who,@CanAfford,#cost_shillings=iAmount)
      {
         // Something weird went on here.  Don't give a message, just bail.
         return $;
      }

      Send(who,@Pay,#amount_shillings=iAmount);

      // RenewRental returns the new days left.
      return Send(oRoom,@RenewRental,#iTimeAdded=iDays);
   }

   FindRoomByPlayer(who=$,iLocation=$)
   {
      local iRID, oRoom, bRented, cRoomClass;

      cRoomClass = Send(self,@GetRoomClassByLocation,#iLocation=iLocation);
      oRoom = $;
      bRented = FALSE;

      foreach iRID in plRoomsRented
      {
         oRoom = Send(SYS,@FindRoomByNum,#num=iRID);
         if Send(oRoom,@GetRenter) = who
            AND IsClass(oRoom,cRoomClass)
         {
            return oRoom;
         }
      }

      return $;
   }

   GetNextAvailableRID(iLocation=$)
   {
      local iRID;

      iRID = RID_RENTABLE_START;

      if plRoomsRented = $
      {
         return iRID;
      }

      while TRUE  // Keep going until we find something!
      {
         if NOT FindListElem(plRoomsRented,iRID)
         {
            return iRID;
         }
         
         iRID = iRID + 1;
      }

      return 0;
   }

   RoomDeleted(what=$)
   {
      local lRoomsRented, iRID;

      iRID = Send(what,@GetRoomNum);

      if FindListElem(plRoomsRented,iRID)
      {
         plRoomsRented = DelListElem(plRoomsRented,iRID);
      }
      else
      {
         Debug("RoomDeleted:: Tried to remove an unlisted room.");
      }

      return;
   }

   NewGameDay()
   {
      local i;

      foreach i in plRoomsRented
      {
         Send(Send(SYS,@FindRoomByNum,#num=i),@DecrementDaysLeft);
      }

      return;
   }

   GetRoomClassByLocation(iLocation=$)
   {
      if iLocation = RID_BAR_INN
      {
         return &BarloqueRentableRoom;
      }

      if iLocation = RID_MAR_INN
      {
         return &MarionRentableRoom;
      }

      if iLocation = RID_KOC_INN
      {
         return &KocatanRentableRoom;
      }

      return &Room;
   }

end
////////////////////////////////////////////////////////////////////////////////
