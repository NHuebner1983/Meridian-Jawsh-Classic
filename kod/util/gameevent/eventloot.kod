// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


///////////////////////////////////////////////////////////////////////////
EventLoot is GameEvent

constants:

   include blakston.khd

resources:

	EventLoot_stolen = "~B~k[Event]~n ~B~v A %s has been stolen by a %s near %s."

classvars:

properties:

    poLastMonsterChosen = $

messages:

   Constructor()
   {
      propagate;
   }

   GetRandomMonster(who = $)
   {
		local i, iLoopProtect, oRoom, iRoom, sRoomName, lMonsters, iMonsterCount, oMonster, oMonsterChosen, aMobAttributes;
		
		oRoom = Send(who, @GetOwner);
		iRoom = Send(oRoom,@GetRoomNum);
		sRoomName = Send(oRoom, @GetName);
		lMonsters = Send(oRoom, @GetHolderActive);
		
		Debug("Room is", Send(oRoom, @GetName));
		Debug("Room has", Length(lMonsters),"active");
		
		iMonsterCount = 1;
		iLoopProtect = 0;
		oMonsterChosen = $;
		
		Debug("Choosing a monster");
		
		while oMonsterChosen = $
		{
			iLoopProtect = iLoopProtect + 1;

			if iLoopProtect > 100
			{
				Debug("Event Loot Loop Protection exceeded, did not pick a monster for the next loot.");
				break;
			}

			foreach i in lMonsters
			{
				oMonster = First(i);
				
				if oMonster <> $ AND IsClass(oMonster, &Monster) 
				   AND NOT IsClass(oMonster, &Servant)
				   AND NOT IsClass(oMonster, &Reflection)
				   AND NOT IsClass(oMonster, &EvilTwin)
				   AND Send(oMonster, @GetMaster) = $
				   AND (poLastMonsterChosen = $ OR poLastMonsterChosen <> oMonster)
				{
					if IsClass(oMonster, &Monster)
					{
						aMobAttributes = Send(oMonster,@GetAttributes);

						if (aMobAttributes & MOB_RECEIVE)
							OR (aMobAttributes & MOB_SELLER)
							OR (aMobAttributes & MOB_NOFIGHT)
						{
							// We only count real monsters.
							continue;
						}
					}

					iMonsterCount++;
					
					if Random(0, Length(lMonsters)) = 1
					{
						oMonsterChosen = oMonster;
					}
				}
			}
			
			if oMonsterChosen = $ AND iMonsterCount = 1
			{
				Debug("Not enough monsters to start the event");
				break;
			}
		}

		if oMonsterChosen <> $
		{
			poLastMonsterChosen = oMonsterChosen;
		}

		return oMonsterChosen;
   }

   SetLoot(who = $, count = 3)
   {
		local i, c, x, oGodRoom, iChestCount, lChestItems, oBox, iGivenOut, oMonster;
		
		iChestCount = 0;
		iGivenOut = 0;
		
		oGodRoom = Send(SYS,@FindRoomByNum,#num=RID_GODROOM);
		
		foreach i in Send(oGodRoom,@GetHolderActive)
		{
			 oBox = First(i);
			 
			 if oBox <> $ AND IsClass(oBox,&StorageBox)
			 {
				iChestCount++;

				lChestItems = Send(oBox,@GetHolderPassive);
				
				if lChestItems <> $
				{
					foreach c in lChestItems
					{
						if IsClass(c, &Item)
						{
							iGivenOut++;

							oMonster = Send(self, @GetRandomMonster, #who=who);
							
							if oMonster <> $
							{
								// The item will be wrapped in a gift box
								Send(c, @MakeWrappedAndAutoLooted);
								
								Send(oMonster, @NewHold, #what=c);
								//Debug("Gave", Send(c, @GetName),"to",Send(oMonster, @GetName));
								Send(SYS,@SystemBroadcast,#type=SAY_MESSAGE,
               						#string=EventLoot_stolen,#parm1=Send(c, @GetName),#parm2=Send(oMonster,@GetName),#parm3=Send(Send(oMonster,@GetOwner),@GetName));
							}
							
							if iGivenOut >= count 
							{
								return;
							}
						}
					}
				}
			 }
		}
			  
	   return;
   }

end
///////////////////////////////////////////////////////////////////////////
