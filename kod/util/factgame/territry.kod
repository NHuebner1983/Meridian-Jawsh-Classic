// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
TerritoryGame is FactionGame

constants:
   
   include blakston.khd
   include protocol.khd

   GAME_OFF = 0
   GAME_PART = 1
   GAME_FULL = 2

resources:

   include territry.lkod

   TerritoryGame_duke = "Duke Akardius"
   TerritoryGame_princess = "Princess Kateriina"
   TerritoryGame_rebel = "the rebel Jonas"
   TerritoryGame_holy = "the Holy Army of Shal'ille"
   TerritoryGame_unholy = "the Necromancers"
   TerritoryGame_koc = "the Warriors of Ko'catan"
   TerritoryGame_unfactioned = "the unfactioned"

   territorygame_comma = ", "
   territorygame_and = "and "
   TerritoryGame_bonus_territory = \
      "~IHaving claimed %s%s%s%s%s%s%s%s%s%s, %s now also %s the city of %s!"
   TerritoryGame_control = "control"
   TerritoryGame_controls = "controls"
   TerritoryGame_Tos = "Tos"
   TerritoryGame_Barloque = "Barloque"
   TerritoryGame_Jasper = "Jasper"
   TerritoryGame_Marion = "Marion"
   TerritoryGame_CorNoth = "Cor Noth"
   TerritoryGame_Raza = "Raza"

   TerritoryGame_lost_hometown = \
      "~IHaving lost %s home city, %s relinquishes all claimed territories."
   TerritoryGame_her = "her"
   TerritoryGame_his = "his"
   TerritoryGame_their = "their"

properties:

   piTotalPoints = 1000    // Number of points the game contributes toward total

   plTosRIDs = $              // first of these is the main city.  Rest are key capture points.
   plMarionRIDs = $
   plJasperRIDs = $
   plCorNothRIDs = $
   plBarloqueRIDs = $
   plRazaRIDs = $
   plHolyRIDs = $
   plUnholyRIDs = $
   plKocRIDs = $
   plFlagRIDs = $
   plFlagCounts = $
      
   piGameMode = GAME_FULL
   ptGenerateFlagItems = $
   piDukeFlagItemCount = 0
   piPrincessFlagItemCount = 0
   piRebelFlagItemCount = 0

   piHolyFlagItemCount = 0
   piUnholyFlagItemCount = 0
   piKocFlagItemCount = 0

   // Time in minutes.
   piFlagItemGenTime = 60

   piClaimTroopGenTime = 8000
   piClaimTroopCap = 15
   piNonclaimTroopGenTime = 30000
   piNonclaimTroopCap = 4

   // Number of minutes to wait before a flag claim is done.
   piClaimWait = 8

   // Number of minutes to wait before you can claim a flag again.
   piClaimRetry = 30

   // Minimum number of users needed online before you can take a flag
   piMinUsers = 1

   // Minimum number of allies you must have in the same room to make a claim
   piMinAllies = 0

   plFlagStates = $

messages: 

   Constructor()
   {
      local i;

      plFlagStates = $;
      //Send(self,@Recreate);

      return;
   }

   SwitchGameMode(mode=GAME_FULL)
   {
      if piGameMode = mode
      {
         return;
      }

      if mode = GAME_FULL
      {
         piTotalPoints = 1000;
      }
      else
      {
         piTotalPoints = 0;
      }

      Send(Send(SYS,@GetParliament),@RedoTotalPower);

      piGameMode = mode;
      Send(self,@ClearAllFlags);
      Send(self,@Recreate);

      return;
   }

   GetGameMode()
   {
      return piGameMode;
   }

   Recreate()
   {
      local i;

      plFlagCounts = [0,0,0,0,0,0,0];

      plTosRIDs = [ RID_TOS, RID_H6, RID_I6, RID_H5 ];
      plMarionRIDs = [ RID_MARION, RID_C5 ];
      plJasperRIDs = [ RID_JASWEST, RID_F8, RID_E7, RID_D7 ];
      plCorNothRIDs =  [ RID_CORNOTH, RID_G4, RID_G5 ];
      plBarloqueRIDs =  [ RID_BAR_NORTH, RID_I3, RID_H3, RID_J3 ];
      plRazaRIDs = [ RID_RAZA, RID_RAZA_FOREST, RID_FAROL_WEST ];
      plHolyRIDs = [ RID_C4 ];
      plUnholyRIDs = [ RID_I8 ];
      plKocRIDs = [ RID_KA5 ];
      plFlagRIDs = [ RID_C4, RID_I8, RID_KA5, RID_E2, RID_F2, RID_F3, RID_H3, RID_I3, RID_J3,
                     RID_D4, RID_E4, RID_F4, RID_G4, RID_H4, RID_C5, RID_D5,
                     RID_G5, RID_H5, RID_B6, RID_C6, RID_D6E6, RID_F6,
                     RID_G6, RID_H6, RID_I6, RID_C7, RID_D7, RID_E7, RID_F7,
                     RID_H7, RID_I7, RID_F8, RID_RAZA_FOREST, RID_FAROL_WEST
                   ];

      foreach i in [ RID_RAZA, RID_TOS, RID_MARION, RID_JASWEST,
                     RID_CORNOTH, RID_BAR_NORTH ]
      {
         plFlagRIDs = Cons(i,plFlagRIDs);
      }

      if ptGenerateFlagItems <> $
      {
         DeleteTimer(ptGenerateFlagItems);
         ptGenerateFlagItems = $;
      }

      Send(self,@ClearAllFlags);

      if piGameMode = GAME_FULL
      {
         Send(self,@PlaceFlagsFullGame);
      }
      else if piGameMode = GAME_PART
      {
         Send(self,@PlaceFlagsPartialGame);
      }

      if piGameMode = GAME_FULL
      {
         if plFlagStates <> $
         {
            // do this before, so that flag counts are accurate
            Send(self,@ReloadSavedFlagStates);
            Send(self,@CountFlags);
         }
         else
         {
            Send(self,@CountFlags);
            // do this after, so that bonus town recalcs saved
            Send(self,@SaveFlagStates);
         }

         Send(self,@RecountFlagItems);
         Send(self,@GenerateFlagItems);
      }

      if piGameMode = GAME_PART
      {
         Send(self,@UpdateFlagsPartialGame);
      }

      return;
   }

   CreateOneFlagpole(room_id = $)
   "Create one flagpole in the right spot in the given room ID, if one doesn't "
   "exist in the room already."
   {
      local oFlagRoom, iFlagRow, iFlagCol, oFlag;
      oFlagRoom = Send(SYS,@FindRoomByNum,#num=room_id);
      if Send(oFlagRoom,@FindHoldingActive,#Class=&Flagpole) <> $
      {
         return;
      }

      iFlagRow = Send(oFlagRoom,@GetFlagRow);
      if iFlagRow = $
      {
         iFlagRow = Send(oFlagRoom,@GetTeleportRow);
      }

      iFlagCol = Send(oFlagRoom,@GetFlagCol);
      if iFlagCol = $
      {
         iFlagCol = Send(oFlagRoom,@GetTeleportCol);
      }

      oFlag = Create(&Flagpole);

      Send(oFlagRoom,@NewHold,#what=oFlag,#new_row=iFlagRow,#new_col=iFlagCol);

      return;
   }

   PlaceFlagsPartialGame()
   {
      local lRIDs, iRID, oFlagRoom, oFlag;

      if piGameMode <> GAME_PART
      {
         return;
      }

      // Setting the faction on a flagpole causes a callback to us to
      // count all of the flags' factions.  But we might not be done
      // placing the other flags yet.  So we do this in two passes:
      // 1) Create and place all flags
      // 2) Set flags' factions
      foreach lRIDs in [plTosRIDs, plMarionRIDs, plJasperRIDs, plCorNothRIDs, plBarloqueRIDs, plRazaRIDs, plHolyRIDs, plUnholyRIDs, plKocRIDs]
      {
         foreach iRID in lRIDs
         {
            Send(self,@CreateOneFlagpole,#room_id=iRID);
         }
      }

      foreach lRIDs in [plTosRIDs, plMarionRIDs, plJasperRIDs, plCorNothRIDs, plBarloqueRIDs, plRazaRIDs, plHolyRIDs, plUnholyRIDs, plKocRIDs]
      {
         foreach iRID in lRIDs
         {
            oFlagRoom = Send(SYS,@FindRoomByNum,#num=iRID);
            oFlag = Send(oFlagRoom,@FindHoldingActive,#Class=&Flagpole);
            if oFlag = $
            {
               Debug("Couldn't find flagpole in room ", iRID);

               continue;
            }

            if (lRIDs = plTosRIDs) OR (lRIDs = plMarionRIDs)
            {
               Send(oFlag,@SetFaction,#faction=FACTION_DUKE);
            }

            if (lRIDs = plCorNothRIDs) OR (lRIDs = plBarloqueRIDs)
            {
               Send(oFlag,@SetFaction,#faction=FACTION_PRINCESS);
            }

            if (lRIDs = plHolyRIDs)
            {
               Send(oFlag,@SetFaction,#faction=FACTION_HOLY);
            }

            if (lRIDs = plUnholyRIDs)
            {
               Send(oFlag,@SetFaction,#faction=FACTION_NECROMANCER);
            }

            if (lRIDs = plKocRIDs)
            {
               Send(oFlag,@SetFaction,#faction=FACTION_KOC);
            }

            if (lRIDs = plJasperRIDs) OR (lRIDs = plRazaRIDs)
            {
               if (Random(0,1) = 0)
               {
                  Send(oFlag,@SetFaction,#faction=FACTION_PRINCESS);
               }
               else
               {
                  Send(oFlag,@SetFaction,#faction=FACTION_DUKE);
               }
            }

            Send(oFlag,@SetClaimable,#claimable=FALSE);
         }
      }

      return;
   }

   PlaceFlagsFullGame()
   {
      local iRID, oFlagRoom, oFlag, iLocation;

      if piGameMode <> GAME_FULL
      {
         return;
      }

      // Setting the faction on a flagpole causes a callback to us to
      // count all of the flags' factions.  But we might not be done
      // placing the other flags yet.  So we do this in two passes:
      // 1) Create and place all flags
      // 2) Set flags' factions
      foreach iRID in plFlagRIDs
      {
         Send(self, @CreateOneFlagpole, #room_id = iRID);
      }

      foreach iRID in plFlagRIDs
      {
         oFlagRoom = Send(SYS,@FindRoomByNum,#num=iRID);
         oFlag = Send(oFlagRoom,@FindHoldingActive,#Class=&Flagpole);
         if oFlag = $
         {
            Debug("Couldn't find flagpole in room ", iRID);

            continue;
         }

         iLocation = FindListElem(plTosRIDs,iRID);
         if iLocation
         {
            Send(oFlag,@SetFaction,#faction=FACTION_DUKE);
            if iLocation = 1
            {
               // town flag
               Send(oFlag,@SetClaimable,#claimable=FALSE);
            }
         }

         iLocation = FindListElem(plHolyRIDs,iRID);
         if iLocation
         {
            Send(oFlag,@SetFaction,#faction=FACTION_HOLY);
            if iLocation = 1
            {
               // town flag
               Send(oFlag,@SetClaimable,#claimable=FALSE);
            }
         }

         iLocation = FindListElem(plUnholyRIDs,iRID);
         if iLocation
         {
            Send(oFlag,@SetFaction,#faction=FACTION_NECROMANCER);
            if iLocation = 1
            {
               // town flag
               Send(oFlag,@SetClaimable,#claimable=FALSE);
            }
         }

         iLocation = FindListElem(plKocRIDs,iRID);
         if iLocation
         {
            Send(oFlag,@SetFaction,#faction=FACTION_KOC);
            if iLocation = 1
            {
               // town flag
               Send(oFlag,@SetClaimable,#claimable=FALSE);
            }
         }

         iLocation = FindListElem(plBarloqueRIDs,iRID);
         if iLocation
         {
            Send(oFlag,@SetFaction,#faction=FACTION_PRINCESS);
            if iLocation = 1
            {
               // town flag
               Send(oFlag,@SetClaimable,#claimable=FALSE);
            }
         }

         iLocation = FindListElem(plJasperRIDs,iRID);
         if iLocation
         {
            Send(oFlag,@SetFaction,#faction=FACTION_REBEL);
            if iLocation = 1
            {
               // town flag
               Send(oFlag,@SetClaimable,#claimable=FALSE);
            }
         }

         iLocation = FindListElem(plMarionRIDs,iRID);
         if iLocation
         {
            Send(oFlag,@SetFaction,#faction=FACTION_NEUTRAL);
            if iLocation = 1
            {
               // town flag
               Send(oFlag,@SetClaimable,#claimable=FALSE);
            }
         }

         iLocation = FindListElem(plCorNothRIDs,iRID);
         if iLocation
         {
            Send(oFlag,@SetFaction,#faction=FACTION_NEUTRAL);
            if iLocation = 1
            {
               // town flag
               Send(oFlag,@SetClaimable,#claimable=FALSE);
            }
         }

         iLocation = FindListElem(plRazaRIDs,iRID);
         if iLocation
         {
            Send(oFlag,@SetFaction,#faction=FACTION_NEUTRAL);
            if iLocation = 1
            {
               // town flag
               Send(oFlag,@SetClaimable,#claimable=FALSE);
            }
         }
      }

      return;
   }

   ClearAllFlags()
   {
      local iRID, oFlagRoom, iCapout;

      foreach iRID in plFlagRIDs
      {
         oFlagRoom = Send(SYS,@FindRoomByNum,#num=iRID);
         iCapout = 0;
         while Send(oFlagRoom,@FindHoldingActive,#Class=&Flagpole) <> $
         {
            if ++iCapout > 20
            {
               Debug("Possible loopout in ClearAllFlags, room:",
                     Send(oFlagRoom,@GetName));

               break;
            }

            Send(Send(oFlagRoom,@FindHoldingActive,#Class=&Flagpole),@Delete);
         }
      }

      return;
   }

   ReloadSavedFlagStates()
   {
      local i, oRoom, oFlag;

      if plFlagStates = $
      {
         Debug("ReloadSavedFlagStates has no saved flag states!");
      }

      foreach i in plFlagStates
      {
         oRoom = Send(SYS,@FindRoomByNum,#num=First(i));
         if (oRoom = $)
         {
            Debug("ReloadSavedFlagStates got nil room for RID ",First(i));

            continue;
         }

         oFlag = Send(oRoom,@FindHoldingActive,#class=&Flagpole);
         if (oFlag = $)
         {
            Debug("ReloadSavedFlagStates got nil flag in ",Send(oRoom,@GetName));

            continue;
         }
         Send(oFlag,@SetFaction,#faction=Nth(i,2));
      }

      return;
   }

   SaveFlagStates()
   {
      local i, oRoom, oFlag;

      plFlagStates = $;

      foreach i in plFlagRIDs
      {
         oRoom = Send(SYS,@FindRoomByNum,#num=i);
         if (oRoom = $)
         {
            Debug("SaveFlagStates got nil room for RID ",i);

            continue;
         }

         oFlag = Send(oRoom,@FindHoldingActive,#class=&Flagpole);
         if oFlag = $
         {
            Debug("SaveFlagStates got nil flag in ",Send(oRoom,@GetName));

            continue;
         }

         plFlagStates = Cons([i, Send(oFlag,@GetFaction)],plFlagStates);
      }

      return plFlagStates;
   }

   SetFlagStates(lFlagStates = $)
   "Used during recreates to save flag states."
   {
      local i, oRoom, oFlag;

      if lFlagStates = $
         OR NOT IsList(lFlagStates)
      {
         Debug("SetFlagStates sent invalid flags list - flags not reloaded.");
      }

      foreach i in lFlagStates
      {
         oRoom = Send(SYS,@FindRoomByNum,#num=First(i));
         if (oRoom = $)
         {
            Debug("SetFlagStates got nil room for RID ",First(i));

            continue;
         }

         oFlag = Send(oRoom,@FindHoldingActive,#class=&Flagpole);
         if (oFlag = $)
         {
            Debug("SetFlagStates got nil flag in ",Send(oRoom,@GetName));

            continue;
         }
         Send(oFlag,@SystemSetFaction,#faction=Nth(i,2));
      }

      Send(self,@SaveFlagStates);
      Send(self,@CountFlags);

      return;
   }

   FlagClaimed(flag=$)
   {
      Send(self,@CountFlags);

      // do this after, so that bonus town recalcs saved
      Send(self,@SaveFlagStates);

      return;
   }

   CountFlags()
   {
      local iRID, oRoom, oFlagpole, lFlagCounts, iFaction;

      // first, recalc the state of town flags.
      Send(self,@RecalcTownFlags);

      // next, count all flags and update counters.
      lFlagCounts = [0,0,0,0,0,0,0];

      foreach iRID in plFlagRIDs
      {
         oRoom = Send(SYS,@FindRoomByNum,#num=iRID);
         oFlagpole = Send(oRoom,@FindHoldingActive,#class=&FlagPole);
         if oFlagpole <> $
         {
            iFaction = Send(oFlagpole,@GetFaction) + 1;

            if iFaction > Length(lFlagCounts)
            {
               continue;
            }

            SetNth(lFlagCounts, iFaction, (Nth(lFlagCounts, iFaction)+1));
         }
      }

      // last, tell the faction scenario if necessary.
      iFaction = 0;
      while iFaction <= FACTION_NORMAL_MAX
      {
         iFaction = iFaction + 1;
         if iFaction <= Length(lFlagCounts) AND Nth(lFlagCounts, iFaction) <> Nth(plFlagCounts, iFaction)
         {
            iFaction = 7;
            if (Send(SYS,@GetParliament) <> $)
            {
               Send(Send(SYS,@GetParliament),@RedoPower);
            }
         }
      }

      plFlagCounts = lFlagCounts;

      return;
   }

   GetFlagCounts()
   {
      if plFlagCounts = $
      {
         return [0,0,0,0,0,0,0];
      }

      return plFlagCounts;
   }

   RecalcTownFlags(report=TRUE)
   {
      local lRIDs, iRID, oRoom, oFlagpole, lFlagCounts, iFaction;

      foreach lRIDs in [plTosRIDs, plMarionRIDs, plJasperRIDs, plCorNothRIDs, plBarloqueRIDs, plRazaRIDs] // , plHolyRIDs, plUnholyRIDs, plKocRIDs
      {
         lFlagCounts = [0,0,0,0,0,0,0];
         foreach iRID in lRIDs
         {
            oRoom = Send(SYS,@FindRoomByNum,#num=iRID);
            oFlagpole = Send(oRoom,@FindHoldingActive,#class=&FlagPole);
            if oFlagpole = $
            {
               Debug("RecalcTownFlags: missing flag, aborting. Room = ",
                     Send(oRoom, @GetName));

               return;
            }
            iFaction = Send(oFlagpole,@GetFaction) + 1;

            if iFaction > Length(lFlagCounts)
            {
               continue;
            }

            SetNth(lFlagCounts, iFaction, (Nth(lFlagCounts, iFaction)+1));
         }

         iFaction = 0;
         while iFaction <= FACTION_NORMAL_MAX
         {
            ++iFaction;
            if Length(lRIDs) > 0 AND iFaction <= Length(lFlagCounts) AND Nth(lFlagCounts,iFaction) > (Length(lRIDs) - 2)
            {
               oRoom = Send(SYS,@FindRoomByNum,#num=First(lRIDs));
               oFlagpole = Send(oRoom,@FindHoldingActive,#class=&FlagPole);
               if Send(oFlagPole,@GetFaction) <> (iFaction-1)
               {
                  Send(oFlagPole,@SetFaction,#faction=(iFaction-1));
                  if report
                  {
                     Send(self,@SendBonusTownMessage,#faction=(iFaction-1),#town=lRIDs);
                  }
               }
            }
         }
      }

      return;
   }

   SendBonusTownMessage(faction=$,town=$)
   {
      local i, iNumRsc, oSession;

      if town = $ OR Length(town) <= 0
      {
         return;
      }

      AddPacket(1,BP_MESSAGE, 4,TerritoryGame_bonus_territory);

      i = 1;
      iNumRsc = 0;
      while i++ < (Length(town) - 1)
      {
         iNumRsc = iNumRsc + 2;
         AddPacket(4,Send(Send(SYS,@FindRoomByNum,#num=Nth(town,i)),@GetName),
                   4,territorygame_comma);
      }

      if Length(town) > 1
      {
         ++iNumRsc;
         AddPacket(4,territorygame_and);
      }

      ++iNumRsc;
      AddPacket(4,Send(Send(SYS,@FindRoomByNum,#num=Last(town)),@GetName));

      while iNumRsc++ < 10
      {
         AddPacket(4,system_blank_resource);
      }

      if faction <> FACTION_NEUTRAL
      {
        AddPacket(4,Send(Send(SYS,@GetParliament),@GetFactionLiegeName,
                        #faction=faction), 4,TerritoryGame_controls);
      }
      else
      {
         AddPacket(4,TerritoryGame_unfactioned, 4,TerritoryGame_control);
      }

      if town = plBarloqueRIDs
      {
         AddPacket(4,TerritoryGame_Barloque);
      }
      else if town = plCorNothRIDs
      {
         AddPacket(4,TerritoryGame_CorNoth);
      }
      else if town = plJasperRIDs
      {
         AddPacket(4,TerritoryGame_Jasper);
      }
      else if town = plMarionRIDs
      {
         AddPacket(4,TerritoryGame_Marion);
      }
      else if town = plRazaRIDs
      {
         AddPacket(4,TerritoryGame_Raza);
      }
      else
      {
         AddPacket(4,TerritoryGame_Tos);
      }

      foreach i in Send(SYS,@GetUsersLoggedOn)
      {
         if Send(i,@PlayerIsIntriguing)
         {
            oSession = Send(i,@GetSession);
            if oSession <> $
            {
               SendCopyPacket(oSession);
            }
         }
      }

      ClearPacket();

      return;
   }

   GenerateFlagItems()
   {
      local iMaxFlagItems;

      ptGenerateFlagItems = $;
      ptGenerateFlagItems = CreateTimer(self,@GenerateFlagItems,piFlagItemGenTime * 1000 * 60);
      iMaxFlagItems = Length(plFlagRIDs)*2/3;

      if (Nth(plFlagCounts, (FACTION_DUKE+1)) + piDukeFlagItemCount) < iMaxFlagItems
      {
         Send(Create(&DukeFlag),@TeleportHome);
      }

      if (Nth(plFlagCounts, (FACTION_PRINCESS+1)) + piPrincessFlagItemCount) < iMaxFlagItems
      {
         Send(Create(&PrincessFlag),@TeleportHome);
      }

      if (Nth(plFlagCounts, (FACTION_REBEL+1)) + piRebelFlagItemCount) < iMaxFlagItems
      {
         Send(Create(&RebelFlag),@TeleportHome);
      }

      // if (Nth(plFlagCounts, (FACTION_HOLY+1)) + piHolyFlagItemCount) < iMaxFlagItems
      // {
      //    Send(Create(&HolyFlag),@TeleportHome);
      // }

      // if (Nth(plFlagCounts, (FACTION_NECROMANCER+1)) + piUnholyFlagItemCount) < iMaxFlagItems
      // {
      //    Send(Create(&UnholyFlag),@TeleportHome);
      // }

      // if (FACTION_NORMAL_MAX > FACTION_NECROMANCER) and
      //       ((Nth(plFlagCounts, (FACTION_KOC+1)) + piKocFlagItemCount) < iMaxFlagItems)
      // {
      //    Send(Create(&KocFlag),@TeleportHome);
      // }

      return;
   }

   IncrementFlagItemCount(flag=$)
   {
      if IsClass(flag,&DukeFlag)
      {
         ++piDukeFlagItemCount;
      }

      if IsClass(flag,&PrincessFlag)
      {
         ++piPrincessFlagItemCount;
      }

      if IsClass(flag,&RebelFlag)
      {
         ++piRebelFlagItemCount;
      }

      if IsClass(flag,&HolyFlag)
      {
         ++piHolyFlagItemCount;
      }

      if IsClass(flag,&UnholyFlag)
      {
         ++piUnholyFlagItemCount;
      }

      if IsClass(flag,&KocFlag)
      {
         ++piKocFlagItemCount;
      }

      return;
   }

   DecrementFlagItemCount(flag=$)
   {
      if IsClass(flag,&DukeFlag)
      {
         --piDukeFlagItemCount;
      }
      else if IsClass(flag,&PrincessFlag)
      {
         --piPrincessFlagItemCount;
      }
      else if IsClass(flag,&RebelFlag)
      {
         --piRebelFlagItemCount;
      }
      else if IsClass(flag,&HolyFlag)
      {
         --piHolyFlagItemCount;
      }
      else if IsClass(flag,&UnholyFlag)
      {
         --piUnholyFlagItemCount;
      }
      else if IsClass(flag,&KocFlag)
      {
         --piKocFlagItemCount;
      }

      return;
   }

   RecountFlagItems()
   {
      piDukeFlagItemCount = 0;
      piPrincessFlagItemCount = 0;
      piRebelFlagItemCount = 0;
      piHolyFlagItemCount = 0;
      piUnholyFlagItemCount = 0;
      piKocFlagItemCount = 0;
      Send(&FactionFlag,@RecountFlagItemsReply);

      return;
   }

   IsHometownFlag(RID=$, faction=FACTION_NEUTRAL)
   {
      if faction = FACTION_NEUTRAL
      {
         return FALSE;
      }

      if (faction = FACTION_DUKE) AND (FindListElem(plTosRIDs,RID) <> 0)
      {
         return TRUE;
      }

      if (faction = FACTION_PRINCESS) AND (FindListElem(plBarloqueRIDs,RID) <> 0)
      {
         return TRUE;
      }

      if (faction = FACTION_REBEL) AND (FindListElem(plJasperRIDs,RID) <> 0)
      {
         return TRUE;
      }

      if (faction = FACTION_HOLY) AND (FindListElem(plHolyRIDs,RID) <> 0)
      {
         return TRUE;
      }

      if (faction = FACTION_NECROMANCER) AND (FindListElem(plUnholyRIDs,RID) <> 0)
      {
         return TRUE;
      }

      if (faction = FACTION_KOC) AND (FindListElem(plKocRIDs,RID) <> 0)
      {
         return TRUE;
      }

      return FALSE;
   }

   GetClaimTroopGenTime()
   {
      return piClaimTroopGenTime;
   }

   GetClaimTroopCap()
   {
      return piClaimTroopCap;
   }

   GetNonclaimTroopGenTime()
   {
      return piNonclaimTroopGenTime;
   }

   GetNonclaimTroopCap()
   {
      return piNonclaimTroopCap;
   }

   UpdateFlagsPartialGame()
   {
      local iPrincesspower, iDukePower, iHolyPower, iUnholyPower, iKocPower, iNeutralPower, iTotalPower,
            iPrincessFlags, iDukeFlags, iHolyFlags, iUnholyFlags, iKocFlags, iNeutralFlags, iTotalFlags,
            lRIDs, iRID, oRoom, oFlag;

      if piGameMode <> GAME_PART
      {
         return;
      }

      // first, figure out how many flags each gets
      iPrincesspower = Send(Send(SYS,@GetParliament),@GetPower,#faction=FACTION_PRINCESS);
      iDukePower = Send(Send(SYS,@GetParliament),@GetPower,#faction=FACTION_DUKE);
      iHolyPower = Send(Send(SYS,@GetParliament),@GetPower,#faction=FACTION_HOLY);
      iUnholyPower = Send(Send(SYS,@GetParliament),@GetPower,#faction=FACTION_NECROMANCER);
      iKocPower = Send(Send(SYS,@GetParliament),@GetPower,#faction=FACTION_KOC);
      iNeutralPower = Send(Send(SYS,@GetParliament),@GetPower,#faction=FACTION_NEUTRAL);
      iTotalPower = iPrincesspower + iDukePower + iNeutralPower;
      iTotalFlags = Length(plTosRIDs) + Length(plMarionRIDs) + Length(plJasperRIDs)
                    + Length(plCorNothRIDs) + Length(plBarloqueRIDs)
                    + Length(plRazaRIDs) - 6;
      iPrincessFlags = ((iPrincesspower * iTotalFlags) / iTotalPower);
      iDukeFlags = ((iDukePower * iTotalFlags) / iTotalPower);
      iHolyFlags = ((iHolyPower * iTotalFlags) / iTotalPower);
      iUnholyFlags = ((iUnholyPower * iTotalFlags) / iTotalPower);
      iKocFlags = ((iKocPower * iTotalFlags) / iTotalPower);
      iNeutralFlags = (iTotalFlags - iPrincessFlags - iDukeFlags);

      // Next, distribute the flags accordingly

      //  First, clear all to neutral
      foreach lRIDs in [plTosRIDs, plMarionRIDs, plJasperRIDs, plCorNothRIDs, plBarloqueRIDs, plRazaRIDs] // , plHolyRIDs, plUnholyRIDs, plKocRIDs
      {
         foreach iRID in lRIDs
         {
            if iRID = First(lRIDs) { continue; }
            oRoom = Send(SYS,@FindRoomByNum,#num=iRID);
            oFlag = Send(oRoom,@FindHoldingActive,#class=&Flagpole);
            Send(oFlag,@SetFaction,#faction=FACTION_NEUTRAL);
         }
      }

      //  Then place duke flags
      foreach lRIDs in [plTosRIDs, plMarionRIDs, plJasperRIDs, plCorNothRIDs, plBarloqueRIDs, plRazaRIDs] // , plHolyRIDs, plUnholyRIDs, plKocRIDs
      {
         foreach iRID in lRIDs
         {
            if iDukeFlags > 0
            {
               if iRID = First(lRIDs) { continue; }
               oRoom = Send(SYS,@FindRoomByNum,#num=iRID);
               oFlag = Send(oRoom,@FindHoldingActive,#class=&Flagpole);
               Send(oFlag,@SetFaction,#faction=FACTION_DUKE);
               iDukeFlags = iDukeFlags - 1;
            }
         }
      }

      //  And finally princess flags
      foreach lRIDs in [plBarloqueRIDs, plCorNothRIDs, plJasperRIDs, plMarionRIDs, plTosRIDs, plRazaRIDs] // , plHolyRIDs, plUnholyRIDs, plKocRIDs
      {
         foreach iRID in lRIDs
         {
            if iPrincessFlags > 0
            {
               if iRID = First(lRIDs) { continue; }
               oRoom = Send(SYS,@FindRoomByNum,#num=iRID);
               oFlag = Send(oRoom,@FindHoldingActive,#class=&Flagpole);
               Send(oFlag,@SetFaction,#faction=FACTION_PRINCESS);
               iPrincessFlags = iPrincessFlags - 1;
            }
         }
      }

      // Now count flags and update bonus towns
      Send(self,@RecalcTownFlags,#report=FALSE);

      return;
   }

   GetPoints(faction=$)
   "Returns the number of points due to the faction."
   {
      local iCount,iFlagTotal,iFactionTotal;

      iFlagTotal = 0;
      iFactionTotal = 0;

      foreach iCount in plFlagCounts
      {
         iFlagTotal = iFlagTotal + iCount;
      }

      iCount = faction + 1;
	  
	  if iCount <= Length(plFlagCounts)
	  {
         iFactionTotal = Nth(plFlagCounts,iCount);
	  }
	  
      if iFlagTotal = 0
      {
         return 0;
      }

      return ((iFactionTotal * piTotalPoints) / iFlagTotal);
   }

   //// Functions for the customizable parameters.

   GetClaimWait()
   {
      return piClaimWait;
   }

   GetClaimRetry()
   {
      return piClaimRetry;
   }

   GetMinUsers()
   {
      return piMinUsers;
   }

   GetMinAllies()
   {
      return piMinAllies;
   }

   Delete()
   {
      if ptGenerateFlagItems <> $
      {
         DeleteTimer(ptGenerateFlagItems);
         ptGenerateFlagItems = $;
      }

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
