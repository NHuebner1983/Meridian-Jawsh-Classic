// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


///////////////////////////////////////////////////////////////////////////
Statistics is UtilityFunctions

// This class keeps statistics about the game.

constants:

   include blakston.khd

resources:

classvars:

properties:

   piPlayer_deaths = 0
   piPlayer_kills = 0

   // List of [spell id, successful casts, failed casts] elements, one for each spell
   plSpell_cast_counts = $

   // List of [room id, times entered by player] elements, one for each room
   plRoom_entered_counts = $

   // List of [class item, times dropped] elements, one for each non-stackable item
   plSingle_item_drop_counts = $

   // List of [class item, number dropped] elements, one for each stackable item
   plStack_item_drop_count = $

   // A current sum of all money in all player bank accounts and held on player characters.
   piPlayerMoneyTotal = $

   // Money Created this save period
   piMoneyCreated = 0
   piPlatinumCreated = 0

   // Highest level in a Survival Arenas
   piPublicSurvivalLevel = 0
   piGuildSurvivalLevel = 0
   piSoloSurvivalLevel = 0

   // How many ancient trinkets (stat reset tokens) have been found?
   piFoundTrinkets = 0

messages:

   RecordPublicSurvivalLevel(iLevel=$)
   {
      if iLevel <> $
         AND iLevel > piPublicSurvivalLevel
      {
         piPublicSurvivalLevel = iLevel;
      }

      return piPublicSurvivalLevel;
   }

   RecordGuildSurvivalLevel(iLevel=$)
   {
      if iLevel <> $
         AND iLevel > piGuildSurvivalLevel
      {
         piGuildSurvivalLevel = iLevel;
      }

      return piGuildSurvivalLevel;
   }

   RecordSoloSurvivalLevel(iLevel=$)
   {
      if iLevel <> $
         AND iLevel > piSoloSurvivalLevel
      {
         piSoloSurvivalLevel = iLevel;
      }

      return piSoloSurvivalLevel;
   }

   MoneyCreated(what=$, amount = 0)
   {
      local iPlatinum, iShilling;

      iShilling = amount;
      iPlatinum = 0;

      if what = $
      {
         // We need to know what kind of money was created...
         Debug("MoneyCreated but no what provided");
         return FALSE;
      }

      if IsClass(what, &Shilling)
      {
         if iShilling >= SHILLINGS_PER_PLATINUM
         {
            iPlatinum = Send(SYS, @ShillingsToPlatinum, #number=iShilling);
            iShilling = (iPlatinum * SHILLINGS_PER_PLATINUM) - iShilling;

            if iShilling < 0
            {
               // Not sure how this could be negative, it should always be zero or positive.
               iShilling = 0;
               Debug("MoneyCreated got negative shilling conversion", amount, iPlatinum, iShilling);
            }
         }
      } else if IsClass(what, &Platinum) {
         iPlatinum = amount;
      }

      piMoneyCreated += iShilling;
      piPlatinumCreated += iPlatinum;

      return;
   }

   GarbageCollecting()
   {
      Send(self,@CalculateTotalMoney);
      RecordStat(STAT_TOTALMONEY,piPlayerMoneyTotal);
      RecordStat(STAT_MONEYCREATED,piMoneyCreated);
      piMoneyCreated = 0;

      return;
   }

   CalculateMoneyOverflow()
   "Calculates total money in a way that handles integer overflow at 134 mil "
   "due to kod data types. Reports the total amount to debug log."
   {
      local i, j, iMoney, iOverFlow, oPlayerMoney, sMoney;

      iMoney = 0;

      // Increment this each time we hit 1 mil.
      iOverFlow = 0;

      foreach i in Send(SYS,@GetBanks)
      {
         foreach j in Send(i,@GetBankAccounts)
         {
            // Banks calculate in Platinum now
            iMoney += Nth(j,2);
            if (iMoney >= 1000000)
            {
               iOverFlow += iMoney / 1000000;
               iMoney %= 1000000;
            }
         }
      }

      foreach i in Send(SYS,@GetUsers)
      {
         // Stats operate in platinum now
         oPlayerMoney = Send(i,@GetPlatinumObject);

         if oPlayerMoney <> $
         {
            iMoney += Send(oPlayerMoney,@GetNumber);
         }
         if (iMoney >= 1000000)
         {
            iOverFlow += iMoney / 1000000;
            iMoney %= 1000000;
         }
      }

      ClearTempString();
      AppendTempString("Total money: ");

      // Unlikely we have to handle money greater than 1*10^12.
      if (iOverFlow >= 1000)
      {
         AppendTempString(iOverFlow / 1000);
         AppendTempString(",");
         iOverFlow %= 1000;
      }

      AppendTempString(iOverFlow);
      AppendTempString(",");
      AppendTempString(iMoney / 100000);
      iMoney %= 100000;
      AppendTempString(iMoney / 10000);
      iMoney %= 10000;
      AppendTempString(iMoney / 1000);
      AppendTempString(",");
      iMoney %= 1000;
      AppendTempString(iMoney / 100);
      iMoney %= 100;
      AppendTempString(iMoney / 10);
      iMoney %= 10;
      AppendTempString(iMoney);

      sMoney = SetString($, GetTempString());

      Debug(sMoney);

      return sMoney;
   }

   CalculateTotalMoney()
   {
      local TotalMoney;

      TotalMoney = 0;
      TotalMoney += Send(self,@CalculateTotalBankMoney);
      TotalMoney += Send(self,@CalculateTotalPlayerMoney);
      piPlayerMoneyTotal = TotalMoney;

      return;
   }

   CalculateTotalBankMoney()
   {
      local TotalBankMoney, i;

      TotalBankMoney = 0;

      foreach i in Send(SYS,@GetBanks)
      {
         TotalBankMoney += Send(i,@GetPlayerMoneyTotal);
      }

      return TotalBankMoney;
   }

   CalculateTotalPlayerMoney()
   {
      local u, oPlayerMoney, TotalPlayerMoney;

      TotalPlayerMoney = 0;

      foreach u in Send(SYS,@GetUsers)
      {
         // Calculates in platinum now.
         oPlayerMoney = Send(u,@GetPlatinumObject);

         if oPlayerMoney <> $
         {
            TotalPlayerMoney += Send(oPlayerMoney,@GetNumber);
         }
      }

      return TotalPlayerMoney;
   }

   Constructor()
   {
      local oSpell, oRoom;

      // Set up spell counts
      foreach oSpell in Send(SYS,@GetSpells)
      {
         plSpell_cast_counts = Cons([Send(oSpell,@GetSpellNum), 0, 0],
                                    plSpell_cast_counts);
      }

      // Set up room counts
      foreach oRoom in Send(SYS,@GetRooms)
      {
         plRoom_entered_counts = Cons([Send(oRoom,@GetRoomNum), 0],
                                      plRoom_entered_counts);
      }

      return;
   }

   TrinketFound()
   "Increment the count of found trinkets by one."
   {
      ++piFoundTrinkets;

      return;
   }

   PlayerKillsCounter()
   "Increment the count of how many times a player has killed something"
   {
      ++piPlayer_kills;

      return;
   }

   PlayerDiedCounter()
   "Increment the count of how many times a player has died"
   {
      ++piPlayer_deaths;

      return;
   }

   SpellCast(oSpell = $, who = $)
   "Increment the count of how many times the given spell "
   "has been cast successfully"
   {
      local iNum, lItem;

      if (oSpell <> $)
         AND NOT IsClass(oSpell,&Phase)
      {
         iNum = Send(oSpell, @GetSpellNum);
         foreach lItem in plSpell_cast_counts
         {
            if First(lItem) = iNum
            {
               SetNth(lItem, 2, Nth(lItem, 2) + 1);

               return;
            }
         }
         Debug("Got an unknown spell cast, id is", iNum);
      }

      return;
   }

   AddToRoomCount(iNum=$)
   "Used by rented rooms when they are created, so they get added "
   "correctly to the room count list."
   {
      local lItem;

      foreach lItem in plRoom_entered_counts
      {
         if First(lItem) = iNum
         {
            return;
         }
      }

      // If we got here, we didn't find the room in our room count.
      // So, we add it.
      plRoom_entered_counts = Cons([iNum,0],plRoom_entered_counts);

      return;
   }

   PlayerEnteredRoom(oRoom = $, who = $)
   "Increment the count of how many times the given room has been entered"
   {
      local iNum, lItem;

      if (oRoom <> $)
      {
         iNum = Send(oRoom,@GetRoomNum);
         foreach lItem in plRoom_entered_counts
         {
            if First(lItem) = iNum
            {
               SetNth(lItem, 2, Nth(lItem, 2) + 1);

               return;
            }
         }
         Debug("Got an unknown room entered, id is", iNum);
      }

      return;
   }

   PrintSpellStats()
   "Prints out how many time each spell has been cast"
   {
      local oSpell, lItem, iNum;

      foreach lItem in plSpell_cast_counts
      {
         iNum = First(lItem);
         oSpell = Send(SYS,@FindSpellByNum,#num=iNum);
         if (oSpell = $)
         {
            Debug("Unknown spell id", iNum);
         }
         else
         {
            Debug(iNum,Send(oSpell,@GetName),Nth(lItem,2),Nth(lItem,3));
         }
      }

      return;
   }

   PrintRoomStats()
   "Prints out how many time each room has been entered by players"
   {
      local oRoom, lItem, iNum;

      foreach lItem in plRoom_entered_counts
      {
         iNum = First(lItem);
         oRoom = Send(SYS,@FindRoomByNum,#num=iNum);
         if (oRoom = $)
         {
            Debug("Unknown room id",iNum);
         }
         else
         {
            Debug(iNum,Send(oRoom,@GetName),Nth(lItem,2));
         }
      }

      return;
   }

   PrintActiveUsers(iDays = 30)
   "Prints the number of active users in the given number of days."
   {
      local i, iActiveUsers, iLastLoginTime, iNow;

      iNow = GetTime();
      iActiveUsers = 0;

      foreach i in Send(SYS,@GetUsers)
      {
         iLastLoginTime = Send(i,@GetLastLoginTime);
         if (iNow > iLastLoginTime
            AND iNow - iLastLoginTime < iDays * 24 * 60 * 60)
         {
            ++iActiveUsers;
         }
      }

      // Note that we're checking characters, not individual accts or users.
      Debug(iActiveUsers," characters active in the past ",iDays, " days.");

      return;
   }

   PrintUserStats(iDays = 30)
   "Prints out stats about users who have played in the last given number of days. "
   "DMs are not included."
   {
      local iNow, lUsers, oUser, iActiveUsers, lHealthBins, lManaBins, lStatBins,
         lMightCounts, lIntellectCounts, lStaminaCounts, lAgilityCounts, lMysticismCounts,
         lAimCounts, lHealthCounts, lManaCounts, lBadKillBins, lBadKillCounts,
         lGoodKillBins, lGoodKillCounts, iLastLoginTime, lFactionCounts, lFactionBins,
         lGenderCounts, lGenderBins;

      iNow = GetTime();
      lUsers = Send(SYS, @GetUsers);
      iActiveUsers = 0;

      // Build histograms according to these values
      lStatBins = [1, 10, 20, 30, 40, 50];

      lMightCounts = $;
      lIntellectCounts = $;
      lStaminaCounts = $;
      lAgilityCounts = $;
      lMysticismCounts = $;
      lAimCounts = $;

      lHealthCounts = $;
      lHealthBins = [20, 29, 39, 49, 59, 69, 79, 89, 99, 109, 119, 129, 139, 149, 150];
      lManaCounts = $;
      lManaBins = [20, 29, 39, 49, 59, 69, 79, 89, 99, 109, 119, 129, 139, 149, 150];

      lBadKillCounts = $;
      lBadKillBins = [0, 1, 2, 5, 10, 20, 50, 100, 200, 500, 1000];
      lGoodKillCounts = $;
      lGoodKillBins = [0, 1, 2, 5, 10, 20, 50, 100, 200, 500, 1000];

      lGenderCounts = $;
      lGenderBins = [GENDER_NEUTER, GENDER_MALE, GENDER_FEMALE];

      lFactionCounts = $;
      lFactionBins = [FACTION_NEUTRAL, FACTION_DUKE, FACTION_PRINCESS, FACTION_REBEL];

      foreach oUser in lUsers
      {
         // Attempt to deal with the Blakod timer value wraparound, but
         // this doesn't really work.  We don't have a foolproof way to
         // determine who has actually logged in recently.
         iLastLoginTime = Send(oUser, @GetLastLoginTime);
         if NOT IsClass(oUser, &DM) 
            AND iNow > iLastLoginTime
            AND iNow - iLastLoginTime < iDays * 24 * 60 * 60
         {
            ++iActiveUsers;

            // Player stats
            lMightCounts = 
               Send(self, @AccumulateBin, #counts = lMightCounts, 
                    #value = Send(oUser, @GetMight), #bins = lStatBins);
            lIntellectCounts = 
               Send(self, @AccumulateBin, #counts = lIntellectCounts, 
                    #value = Send(oUser, @GetIntellect), #bins = lStatBins);
            lStaminaCounts = 
               Send(self, @AccumulateBin, #counts = lStaminaCounts, 
                    #value = Send(oUser, @GetStamina), #bins = lStatBins);
            lAgilityCounts = 
               Send(self, @AccumulateBin, #counts = lAgilityCounts, 
                    #value = Send(oUser, @GetAgility), #bins = lStatBins);
            lMysticismCounts = 
               Send(self, @AccumulateBin, #counts = lMysticismCounts, 
                    #value = Send(oUser, @GetMysticism), #bins = lStatBins);
            lAimCounts = 
               Send(self, @AccumulateBin, #counts = lAimCounts, 
                    #value = Send(oUser, @GetAim), #bins = lStatBins);

            // Health and mana
            lHealthCounts = 
               Send(self, @AccumulateBin, #counts = lHealthCounts, 
                    #value = Send(oUser, @GetBaseMaxHealth), #bins = lHealthBins);
            lManaCounts = 
               Send(self, @AccumulateBin, #counts = lManaCounts, 
                    #value = Send(oUser, @GetMaxMana), #bins = lManaBins);

            // Player kills, unjustified (bad), justified (good)
            lBadKillCounts = 
               Send(self, @AccumulateBin, #counts = lBadKillCounts, 
                    #value = Send(oUser, @GetUnjustifiedKills), #bins = lBadKillBins);
            lGoodKillCounts = 
               Send(self, @AccumulateBin, #counts = lGoodKillCounts, 
                    #value = Send(oUser, @GetJustifiedKills), #bins = lGoodKillBins);
            
            // Faction
            lFactionCounts = 
               Send(self, @AccumulateBin, #counts = lFactionCounts, 
                    #value = Send(oUser, @GetFaction), #bins = lFactionBins);

            // Gender
            lGenderCounts = 
               Send(self, @AccumulateBin, #counts = lGenderCounts, 
                    #value = Send(oUser, @GetGender), #bins = lGenderBins);
         }
      }

      // Print the output
      Debug("Total Users:", Length(lUsers));
      Debug("Active Users:", iActiveUsers);

      Send(self, @PrintBinCounts, #name = "Might", 
         #counts = lMightCounts, #bins = lStatBins);
      Send(self, @PrintBinCounts, #name = "Intellect", 
         #counts = lIntellectCounts, #bins = lStatBins);
      Send(self, @PrintBinCounts, #name = "Stamina", 
         #counts = lStaminaCounts, #bins = lStatBins);
      Send(self, @PrintBinCounts, #name = "Agility", 
         #counts = lAgilityCounts, #bins = lStatBins);
      Send(self, @PrintBinCounts, #name = "Mysticism", 
         #counts = lMysticismCounts, #bins = lStatBins);
      Send(self, @PrintBinCounts, #name = "Aim",
         #counts = lAimCounts, #bins = lStatBins);
      
      Send(self, @PrintBinCounts, #name = "Max health", 
         #counts = lHealthCounts, #bins = lHealthBins);
      Send(self, @PrintBinCounts, #name = "Max mana", 
         #counts = lManaCounts, #bins = lManaBins);

      Send(self, @PrintBinCounts, #name = "Player kills: justified", 
         #counts = lGoodKillCounts, #bins = lGoodKillBins);
      Send(self, @PrintBinCounts, #name = "Player kills: unjustified", 
         #counts = lBadKillCounts, #bins = lBadKillBins);

      // Faction
      Send(self, @PrintBinCounts, #name = "Faction", 
         #counts = lFactionCounts, #bins = lFactionBins);

      // Male / female
      Send(self, @PrintBinCounts, #name = "Gender", 
         #counts = lGenderCounts, #bins = lGenderBins);

      // Money in the bank

      return;
   }

   AccumulateBin(counts = $, value = 0, bins = $)
   "Put the value in the right bin, and update the corresponding element of counts. "
   "Return the newly updated count list. If the count list is $, it's initialized "
   "with 0s."
   {
      local i, bin;

      // Initialize new list with 0 values?
      if counts = $
      {
         foreach bin in bins
         {
            counts = Cons(0, counts);
         }
         // Add one for being greater than the highest bin
         counts = Cons(0, counts);
      }

      // Find the right bin
      i = 1;
      foreach bin in bins
      {
         if value <= bin
         {
            break;
         }
         ++i;
      }

      SetNth(counts, i, Nth(counts, i) + 1);

      return counts;
   }

   PrintBinCounts(name = $, counts = $, bins = $)
   "Print the count of values in each bin"
   {
      local bin, i;

      Debug("*******************");
      Debug(name);

      i = 1;
      foreach bin in bins
      {
         Debug(bin, Nth(counts, i));
         ++i;
      }
      Debug("more", Nth(counts, i));

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
