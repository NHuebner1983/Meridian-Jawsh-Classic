// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


///////////////////////////////////////////////////////////////////////////////
Object

constants:

   include blakston.khd

resources:

   include object.lkod

   object_name_rsc = "something"
   object_icon_rsc = somethin.bgf
   object_desc_rsc = "You are looking at an object"

   object_article_the_rsc = "the "
   object_article_none_rsc = ""
   object_article_a_rsc = "a "
   object_article_an_rsc = "an "
   object_article_your_rsc = "your "
   object_article_this_rsc = "this "
   object_article_these_rsc = "these "
   object_article_some_rsc = "some "
   object_article_cap_the_rsc = "The "
   object_article_cap_none_rsc = ""
   object_article_cap_a_rsc = "A "
   object_article_cap_an_rsc = "An "
   object_article_cap_your_rsc = "Your "
   object_article_cap_this_rsc = "This "
   object_article_cap_these_rsc = "These "
   object_article_cap_some_rsc = "Some "

   object_his = "his"
   object_her = "her"
   object_its = "its"
   object_hers = "hers"
   object_him = "him"
   object_it = "it"
   object_he = "he"
   object_she = "she"
   object_lord = "lord"
   object_lady = "lady"

   object_cap_his = "His"
   object_cap_her = "Her"
   object_cap_its = "Its"
   object_cap_hers = "Hers"
   object_cap_him = "Him"
   object_cap_it = "It"
   object_cap_he = "He"
   object_cap_she = "She"
   object_cap_lord = "Lord"
   object_cap_lady = "Lady"

   // Resources for displaying time remaining. Used in descriptions.
   // The default is for an enchantment (spell or skill).
   object_time_header_rsc = \
      "\n\nYour current %s enchantment will last for %r%r%r%r%r%r%r."
   object_time_sec_rsc = "1 second"
   object_time_secs_rsc = "%i seconds"
   object_time_min_rsc = "1 minute"
   object_time_mins_rsc = "%i minutes"
   object_time_hour_rsc = "1 hour"
   object_time_hours_rsc = "%i hours"
   object_time_day_rsc = "1 day"
   object_time_days_rsc = "%i days"
   object_time_and_rsc = " and "
   object_time_comma_rsc = ", "
   object_time_blank_rsc = ""

classvars:

   vrName = object_name_rsc
   vrIcon = object_icon_rsc
   vrDesc = object_desc_rsc

   viIndefinite = ARTICLE_A
   viDefinite = ARTICLE_THE

   viBulk = 0
   viWeight = 0

   viIllusion = FALSE
   vbSummoned = FALSE

   viGender = GENDER_NEUTER

   viObject_flags = 0
   viMoveOn_type = 0

properties:

   poOwner = $

   plObject_attributes = $

   piNameColor = 0
   piDrawfx = 0
   piDrawEffectFlag = 0

messages:

   Constructor()
   {
      // Essential for creation stuff that needs to happen AFTER constructors
      //  called
      Send(self,@Constructed);
      // Set any default values
      Send(self,@DefaultValues);

      return;
   }

   Constructed()
   {
      return;
   }

   Delete()
   {
      local i;

      if poOwner <> $
      {
         Send(poOwner,@LeaveHold,#what=self);
         poOwner = $;
      }

      foreach i in plObject_attributes
      {
         Send(i,@Delete);
      }

      return;
   }

   // This message will restore the default values in any object.  Must be
   //  defined for any subclass that wants to use it. This is intended to
   //  make updating a bit smoother, so you can re-set properties in objects
   //  that have changed radically.
   DefaultValues()
   {
      return;
   }

   TryLook(what = $)
   {
      Send(what,@SendLook,#what=self);

      return;
   }

   ShowDesc()
   {
      AddPacket(4,vrDesc);

      return;
   }

   GetDesc()
   {
      return vrDesc;
   }

   SendTimeRemainingHeader(parm1=$)
   "Sends the time remaining header to the user. Classes override this "
   "to send the 'master' resource for the time remaining (e.g. for an "
   "enchantment or quest) and any extra resources.  Called only by "
   "SendTimeRemaining, which appends the actual time information."
   {
      AddPacket(4,object_time_header_rsc, 4,Send(self,@GetName));

      return;
   }

   SendTimeRemainingExtra()
   "If anything extra needs to be sent after the time remaining packets "
   "are added, this messsage should be overridden to do so."
   {
      return;
   }

   SendTimeRemaining(iTime=0, parm1=$)
   "Takes iTime (in seconds) and uses it to pick which time resource to "
   "display to the user. Adds the appropriate packets via AddPacket, so "
   "call this message at the correct time."
   {
      local iSeconds, iMinutes, iHours, iDays;

      // iTime is in seconds.
      iDays = iTime / DAY;
      iHours = (iTime % DAY) / HOUR;
      iMinutes = (iTime % HOUR) / MINUTE;
      iSeconds = iTime % MINUTE;

      if iTime > 0
      {
         Send(self,@SendTimeRemainingHeader,#parm1=parm1);
      }
      else
      {
         AddPacket(4,object_time_blank_rsc);

         return;
      }

      if iDays > 0
      {
         if iDays = 1
         {
            AddPacket(4,object_time_day_rsc);
         }
         else
         {
            AddPacket(4,object_time_days_rsc, 4,iDays);
         }

         // If two or more remaining fields greater than 0, use a comma.
         if (iHours > 0 AND iMinutes > 0)
            OR (iHours > 0 AND iSeconds > 0)
            OR (iMinutes > 0 AND iSeconds > 0)
         {
            AddPacket(4,object_time_comma_rsc);
         }
         else
         {
            // If one remaining field greater than 0, use and.
            if iHours > 0
               OR iMinutes > 0
               OR iSeconds > 0
            {
               AddPacket(4,object_time_and_rsc);
            }
            else
            {
               AddPacket(4,object_time_blank_rsc);
            }
         }
      }
      else
      {
         AddPacket(4,object_time_blank_rsc, 4,object_time_blank_rsc);
      }

      if iHours > 0
      {
         if iHours = 1
         {
            AddPacket(4,object_time_hour_rsc);
         }
         else
         {
            AddPacket(4,object_time_hours_rsc, 4,iHours);
         }

         if (iMinutes > 0 AND iSeconds > 0)
         {
            AddPacket(4,object_time_comma_rsc);
         }
         else
         {
            if iMinutes > 0
               OR iSeconds > 0
            {
               AddPacket(4,object_time_and_rsc);
            }
            else
            {
               AddPacket(4,object_time_blank_rsc);
            }
         }
      }
      else
      {
         AddPacket(4,object_time_blank_rsc, 4,object_time_blank_rsc);
      }

      if iMinutes > 0
      {
         if iMinutes = 1
         {
            AddPacket(4,object_time_min_rsc);
         }
         else
         {
            AddPacket(4,object_time_mins_rsc, 4,iMinutes);
         }

         if iSeconds > 0
         {
            AddPacket(4,object_time_and_rsc);
         }
         else
         {
            AddPacket(4,object_time_blank_rsc);
         }
      }
      else
      {
         AddPacket(4,object_time_blank_rsc, 4,object_time_blank_rsc);
      }

      if iSeconds > 0
      {
         if iSeconds = 1
         {
            AddPacket(4,object_time_sec_rsc);
         }
         else
         {
            AddPacket(4,object_time_secs_rsc, 4,iSeconds);
         }
      }
      else
      {
         AddPacket(4,object_time_blank_rsc);
      }

      // Call this to add anything after the time resources if necessary.
      Send(self,@SendTimeRemainingExtra);

      return;
   }

   GetBulk()
   {
      return viBulk;
   }

   GetWeight()
   {
      return viWeight;
   }

   GetPos()
   {
      if poOwner <> $
      {
         if IsClass(poOwner,&Room)
         {
            return Send(poOwner,@GetRoomPos,#what=self);
         }
         else
         {
            return Send(poOwner,@GetPos);
         }
      }

      return $;
   }

   GetAngle()
   {
      if poOwner <> $
      {
         if IsClass(poOwner,&Room)
         {
            return Send(poOwner,@GetRoomAngle,#what=self);
         }
         else
         {
            return Send(poOwner,@GetAngle);
         }
      }

      return 0;
   }

   GetRow()
   {
      local lPos;

      lPos = Send(self,@GetPos);

      if lPos = $
      {
         return $;
      }

      return First(lPos);
   }

   GetCol()
   {
      local lPos;

      lPos = Send(self,@GetPos);

      if lPos = $
      {
         return $;
      }

      return Nth(lPos,2);
   }

   GetFineRow()
   {
      local lPos;

      lPos = Send(self,@GetPos);

      if lPos = $
      {
         return $;
      }

      return Nth(lPos,3);
   }

   GetFineCol()
   {
      local lPos;

      lPos = Send(self,@GetPos);

      if lPos = $
      {
         return $;
      }

      return Nth(lPos,4);
   }

   GetHeightAtObject()
   "Returns the height at the object's coordinates. If the object is not "
   "in a room, this message recursively checks the owner's coordinates "
   "until one in a room is found."
   {
      return Send(self, @GetHeightFloorAtObjectBSP);
   }

   GetHeightFloorAtObjectBSP()
   "Returns the floor height at the object's coordinates in FINENESS from BSP."
   "If the object is not in a room, this message recursively checks the "
   "owner's coordinates until one in a room is found."
   {
      local iQflags, iRflags, iHeightF, iHeightFWD, iHeightC, iServerID;

      if poOwner <> $
      {
         if IsClass(poOwner,&Room)
         {
            // set query-flags, here we're only interested in the sectorinfo
            iQflags = LIQ_GET_SECTORINFO;

            // query data from bsp in c-function
            if NOT GetLocationInfoBSP(
                      Send(poOwner,@GetRoomData), iQflags, 
                      Send(self,@GetRow), Send(self,@GetCol),
                      Send(self,@GetFineRow), Send(self,@GetFineCol),
                      *iRflags, *iHeightF, *iHeightFWD, *iHeightC, *iServerID)
            {
               Debug("Failed to get location info in ", Send(poOwner,@GetRoomData));

               return 0;
            }

            // we're only using the floor-height with depth modifier here
            return iHeightFWD;
         }
         else
         {
            Send(poOwner,@GetHeightFloorAtObjectBSP);
         }
      }

      return 0;
   }

   GetSectorIDAtObject()
   "Gets the sector tag ID for the room sector the object is currently in.  "
   "Returns -1 on error, as valid tags are all >= 0."
   {
      local iQflags, iRflags, iHeightF, iHeightFWD, iHeightC, iServerID;

      if poOwner <> $
      {
         if IsClass(poOwner,&Room)
         {
            // set query-flags, here we're only interested in the sectorinfo
            iQflags = LIQ_GET_SECTORINFO;

            // query data from bsp in c-function
            if NOT GetLocationInfoBSP(Send(poOwner,@GetRoomData), iQflags,
                      Send(self,@GetRow), Send(self,@GetCol),
                      Send(self,@GetFineRow), Send(self,@GetFineCol),
                      *iRflags, *iHeightF, *iHeightFWD, *iHeightC, *iServerID)
            {
               Debug("Failed to get location info in ", Send(poOwner,@GetRoomData));

               return -1;
            }

            // we're only using the floor-height with depth modifier here
            return iServerID;
         }
         else
         {
            Send(poOwner,@GetSectorIDAtObject);
         }
      }

      return -1;
   }

   GetHeightCeilingAtObjectBSP()
   "Returns the ceiling height at the object's coordinates in FINENESS from BSP."
   "If the object is not in a room, this message recursively checks the owner's coordinates "
   "until one in a room is found."
   {
      local iQflags, iRflags, iHeightF, iHeightFWD, iHeightC, iServerID;

      if poOwner <> $
      {
         if IsClass(poOwner,&Room)
         {
            // set query-flags, here we're only interested in the sectorinfo
            iQflags = LIQ_GET_SECTORINFO;

            // query data from bsp in c-function
            if NOT GetLocationInfoBSP(
                      Send(poOwner,@GetRoomData), iQflags,
                      Send(self,@GetRow), Send(self,@GetCol),
                      Send(self,@GetFineRow), Send(self,@GetFineCol),
                      *iRflags, *iHeightF, *iHeightFWD, *iHeightC, *iServerID)
            {
               Debug("Failed to get location info in ", Send(poOwner,@GetRoomData));

               return 0;
            }

            // we're only using the ceiling-height here
            return iHeightC;
         }
         else
         {
            Send(poOwner,@GetHeightCeilingAtObjectBSP);
         }
      }

      return 0;
   }

   GetOwner()
   {
      return poOwner;
   }

   ReqNewOwner(what = $)
   {
      // Don't go into a user.  Also, make sure we can leave our previous owner,
      //  if we had one.
      if IsClass(what,&User)
         OR (poOwner <> $ AND NOT Send(poOwner,@ReqLeaveHold,#what=self))
      {
         return FALSE;
      }

      return TRUE;
   }

   ReqLeaveOwner()
   {
      return TRUE;
   }

   NewOwner(what = $)
   {
      if poOwner <> $
      {
         Send(poOwner,@LeaveHold,#what=self);
      }

      poOwner = what;

      return;
   }

   IsIllusion()
   {
      return viIllusion;
   }

   IsSummoned()
   {
      return vbSummoned;
   }

   SomethingTryGo(what = $,row = $,col = $)
   {
      return FALSE;
   }

   DestroyDisposable()
   {
      return;
   }

   // New Name Convention:
   //
   // Most cases, use GetName().
   // A child class might override it to get an apparent pseudonym
   // or the word "something".  It should never return the empty string,
   // so that it's always suitable for use in sentences.
   //
   // If you want the real actual name, use GetTrueName().
   // This *always* returns vrName, and shouldn't be overridden by any
   // child class.
   //
   // For cases which might return a blank string, use GetApparentName().
   // A child class can override it to return an apparent pseudonym or
   // a blank string.  Not recommended for text, but recommended for
   // visuals.

   GetName()
   {
      return vrName;
   }

   GetTrueName()
   {
      return vrName;
   }

   GetApparentName()
   {
      return vrName;
   }

   GetDef()
   {
      // return resource of definite article
      return Send(self,@LookupArticle,#article_num=viDefinite);
   }

   GetIndef()
   {
      // return resource of indefinite article
      return Send(self,@LookupArticle,#article_num=viIndefinite);
   }

   LookupArticle(article_num = $)
   {
      // returns resource of the article, given as an integer

      if article_num = ARTICLE_THE
      {
         return object_article_the_rsc;
      }

      if article_num = ARTICLE_NONE
      {
         return object_article_none_rsc;
      }

      if article_num = ARTICLE_A
      {
         return object_article_a_rsc;
      }

      if article_num = ARTICLE_AN
      {
         return object_article_an_rsc;
      }

      if article_num = ARTICLE_YOUR
      {
         return object_article_your_rsc;
      }

      if article_num = ARTICLE_THIS
      {
         return object_article_this_rsc;
      }

      if article_num = ARTICLE_SOME
      {
         return object_article_some_rsc;
      }

      Debug("Invalid article num",article_num);

      return object_article_none_rsc;
   }

   GetCapDef()
   {
      // return resource of capitalized definite article
      return Send(self,@LookupCapitalArticle,#article_num=viDefinite);
   }

   GetCapIndef()
   {
      // return resource of capitalized indefinite article
      return Send(self,@LookupCapitalArticle,#article_num=viIndefinite);
   }

   LookupCapitalArticle(article_num = $)
   {
      // returns resource of the article, given as an integer

      if article_num = ARTICLE_THE
      {
         return object_article_cap_the_rsc;
      }

      if article_num = ARTICLE_NONE
      {
         return object_article_cap_none_rsc;
      }

      if article_num = ARTICLE_A
      {
         return object_article_cap_a_rsc;
      }

      if article_num = ARTICLE_AN
      {
         return object_article_cap_an_rsc;
      }

      if article_num = ARTICLE_YOUR
      {
         return object_article_cap_your_rsc;
      }

      if article_num = ARTICLE_THIS
      {
         return object_article_cap_this_rsc;
      }

      if article_num = ARTICLE_SOME
      {
         return object_article_cap_some_rsc;
      }

      Debug("Invalid article num",article_num);

      return object_article_none_rsc;
   }

   GetIcon()
   {
      return vrIcon;
   }

   SendAnimation()
   {
      // Send animation info to user.  Default is no animation, display with
      //  group 1.
      AddPacket(1, ANIMATE_NONE, 2, 1);

      return;
   }

   SendLookAnimation()
   {
      // Send animation info to user for when the user looks at the object.
      Send(self,@SendAnimation);

      return;
   }

   SendMoveAnimation()
   {
      // Send animation when object moves smoothly from one square to another.
      // Default is no animation, which is indicated by giving 0 for the speed.
      AddPacket(1,ANIMATE_NONE, 2,1);

      return;
   }

   SendMoveOverlays()
   {
      // Send overlays when object moves smoothly from one square to another.
      // Default is leave overlays alone
      AddPacket(1,0);

      return;
   }

   SendOverlays()
   {
      // Send overlay bitmap info to user.  Default is no overlays.
      AddPacket(1, 0);

      return;
   }

   SendLookOverlays()
   {
      // Send overlay info to user for when the user looks at the object
      Send(self,@SendOverlays);

      return;
   }

   SendEnchantmentAnimation()
   {
      Send(self,@SendAnimation);

      return;
   }

   SendEnchantmentOverlays()
   {
      AddPacket(1,0);

      return;
   }

   SendLightingInformation()
   {
      // Default: No lighting
      AddPacket(2,0);

      return;
   }

   MsgSendUser()
   {
      return;
   }

   MsgSendUserCallback()
   {
      return;
   }

   SysMsgSendUser()
   {
      return;
   }

   WaveSendUser()
   {
      return;
   }

   MidiSendUser()
   {
      return;
   }

   EffectSendUser()
   {
      return;
   }

   SectorSendUser()
   {
      return;
   }

   SectorChangeSendUser()
   {
      return;
   }

   SectorLightSendUser()
   {
      return;
   }

   WallSendUser()
   {
      return;
   }

   TryActivate()
   {
      return FALSE;
   }

   // Stuff that used to be in active. but no longer since passive isn't under
   //  it any more.

   ReqSomethingEntered(where = $,what = $)
   {
      return TRUE;
   }

   SomethingEntered(where = $,what = $)
   {
      return;
   }

   ReqSomethingLeft(where = $,what = $)
   {
      return TRUE;
   }

   SomethingLeft(where = $,what = $)
   {
      return;
   }

   ReqSomethingMoved(what = $,new_row = $,new_col = $)
   {
      return TRUE;
   }

   SomethingMoved(what = $,new_row = $,new_col = $)
   {
      return;
   }

   SomethingTurned(what = $,new_angle = 0,cause = $)
   {
      return;
   }

   ReqSomethingDeleted(what = $)
   {
      return TRUE;
   }

   SomeoneSaid(what = $,type = $,string = $)
   {
      return;
   }

   ReqSomethingAttack(what = $,victim = $,use_weapon = $)
   {
      return TRUE;
   }

   SomethingAttacked(what = $,victim = $,use_weapon = $)
   {
      return;
   }

   SomethingKilled(what = $,victim = $)
   {
      return;
   }

   ReqSomethingUse(what = $,use_item = $)
   {
      return TRUE;
   }

   SomethingUsed(what = $,use_item = $)
   {
      return;
   }

   ReqSomethingApply(what = $,use_item = $,apply_on = $)
   {
      return TRUE;
   }

   SomethingApplied(what = $,use_item = $,apply_on = $)
   {
      return;
   }

   SomethingChanged(what = $)
   {
      return;
   }

   ReqSpellCast(who = $, oSpell = $, lItems = $)
   {
      return TRUE;
   }

   SpellCast(who = $, oSpell = $, lItems = $)
   {
      return;
   }

   SomethingShot(who = $, target = $, projectile = $, flags = 0, lighting = 0)
   {
      return;
   }

   SomethingShotRadius(who=$,projectile=$,flags=PROJ_FLAG_NONE,
                 iLightIntensity=0,iLightColor=0,range=0,number=0,speed=0)
   {
      return;
   }

   SomethingDidAction(what = $, action = $)
   {
      return;
   }

   SomeoneTryUserCommand(who = $,command = $,data = $)
   {
      return FALSE;
   }

   SomethingPhasedOut(what = $, iHealth = $, iMaxHealth = $)
   "Sent by the Phase spell to an object's owner whenever the object phases out."
   {
      return;
   }

   SomethingPhasedIn(what = $)
   "Sent by the Phase spell to an object's owner whenever the object phases in."
   {
      return;
   }

   SomethingSpectatedOut(what = $)
   "Sent by the Spectate spell to an object's owner whenever the object "
   "is spectated out (leaves)."
   {
      return;
   }

   SomethingSpectatedIn(what = $)
   "Sent by the Spectate spell to an object's owner whenever the object "
   "is spectated in (returns)."
   {
      return;
   }

   // These two messages are generated by the room, triggered by other messages
   //  (NewHold and LeaveHold)

   FirstUserEntered(what = $,new_row = $,new_col = $)
   {
      return;
   }

   LastUserLeft(what = $)
   {
      return;
   }

   AmbientLightChanged()
   "This is generated by the room when the system recalcs the outside "
   "light level"
   {
      return;
   }

   BackgroundChanged()
   "This is sent when room background bitmap changes."
   {
      return;
   }

   WeatherChanged()
   "This is sent when the room weather changes."
   {
      return;
   }

   CanAcceptOffer()
   "Returns TRUE if the object should 'hear' when a player makes an offer."
   "Returns FALSE for most things."
   {
      return FALSE;
   }

   GetMoveOnType()
   {
      return viMoveOn_type;
   }

   GetObjectFlags()
   {
      return viObject_flags | piDrawEffectFlag;
   }

   GetMinimapDotFlags()
   "If the object should display a dot on the minimap, override this message "
   "and return the flags to be displayed.  Default is no dot."
   {
      return MM_NONE;
   }

   GetDrawingEffects()
   "This returns any special drawing effect the object has. Default is "
   "no drawing effect."
   {
      return piDrawfx;
   }

   GetDrawType()
   "This returns any special drawing type the object has. Default is "
   "no drawing type. Drawing types are phasing, flickering, flashing "
   "and bouncing, stored separately from object flags and drawing effects."
   {
      return piDrawEffectFlag;
   }

   GetClientObjectType()
   "This is an enum of object types. Returns 0 for most objects for now."
   {
      return 0;
   }

   GetPlayerNameColor(rgb=FALSE)
   "Returns the name color property, or if sent rgb TRUE, returns "
   "a list with the int RGB value of piNameColor."
   {
      local lColor;

      if rgb
      {
         lColor = Cons((piNameColor & 0x0000FF), lColor); // Blue
         lColor = Cons((piNameColor  & 0x00FF00) / 256, lColor); // Green
         lColor = Cons((piNameColor & 0xFF0000) / 65536, lColor); // Red

         return lColor;
      }

      return piNameColor;
   }

   SetNameColor(red=0,green=0,blue=0,rgb=$)
   "Can set the name color for any object. Currently, only objects "
   "with OF_DISPLAY_NAME set to TRUE will display a name. Can change color "
   "by red, green and blue value, or alternatively by rgb value."
   {
      if rgb <> $
         AND rgb >= 0
         AND rgb <= NC_COLOR_MAX
      {
         piNameColor = rgb;
         if poOwner <> $
         {
            Send(poOwner,@SomethingChanged,#what=self,#force=TRUE);
         }

         return TRUE;
      }

      if (red >= 0 AND red <= 255)
         AND (green >= 0 AND green <= 255)
         AND (blue >= 0 AND blue <= 255)
      {
         piNameColor = red * green * blue;
         if poOwner <> $
         {
            Send(poOwner,@SomethingChanged,#what=self,#force=TRUE);
         }

         return TRUE;
      }

      return FALSE;
   }

   GetGender()
   {
      return viGender;
   }

   GetHimHer(cap = FALSE)
   {
      local iGender;

      iGender = Send(self,@GetGender);
      if cap
      {
         if iGender = GENDER_MALE
         {
            return object_cap_him;
         }

         if iGender = GENDER_FEMALE
         {
            return object_cap_her;
         }

         return object_cap_it;
      }

      if iGender = GENDER_MALE
      {
         return object_him;
      }

      if iGender = GENDER_FEMALE
      {
         return object_her;
      }

      return object_it;
   }

   GetHisHer(cap = FALSE)
   {
      local iGender;

      iGender = Send(self,@GetGender);
      if cap
      {
         if iGender = GENDER_MALE
         {
            return object_cap_his;
         }

         if iGender = GENDER_FEMALE
         {
            return object_cap_her;
         }

         return object_cap_its;
      }

      if iGender = GENDER_MALE
      {
         return object_his;
      }

      if iGender = GENDER_FEMALE
      {
         return object_her;
      }

      return object_its;
   }

   GetHisHers(cap = FALSE)
   {
      local iGender;

      iGender = Send(self,@GetGender);
      if cap
      {
         if iGender = GENDER_MALE
         {
            return object_cap_his;
         }

         if iGender = GENDER_FEMALE
         {
            return object_cap_hers;
         }

         return object_cap_its;
      }

      if iGender = GENDER_MALE
      {
         return object_his;
      }

      if iGender = GENDER_FEMALE
      {
         return object_hers;
      }

      return object_its;
   }

   GetHeShe(cap = FALSE)
   {
      local iGender;

      iGender = Send(self,@GetGender);
      if cap
      {
         if iGender = GENDER_MALE
         {
            return object_cap_he;
         }

         if iGender = GENDER_FEMALE
         {
            return object_cap_she;
         }

         return object_cap_it;
      }

      if iGender = GENDER_MALE
      {
         return object_he;
      }

      if iGender = GENDER_FEMALE
      {
         return object_she;
      }

      return object_it;
   }

   GetLordLady(cap = TRUE)
   "Default for lord/lady is CAP = TRUE!"
   {
      local iGender;

      iGender = Send(self,@GetGender);
      if cap
      {
         if iGender = GENDER_MALE
         {
            return object_cap_lord;
         }

         if iGender = GENDER_FEMALE
         {
            return object_cap_lady;
         }

         return object_cap_lord;
      }

      if iGender = GENDER_MALE
      {
         return object_lord;
      }

      if iGender = GENDER_FEMALE
      {
         return object_lady;
      }

      return object_lord;
   }

   OwnerKilled()
   "Called when the object's owner is killed."
   {
      return;
   }

   ObjectCorpseFading()
   "Only really matters for items."
   {
      return;
   }

   CanPlayerAdvanceOnMe()
   {
      return TRUE;
   }

   IsFire()
   {
      return FALSE;
   }

   CanEditInscription()
   {
      return FALSE;
   }

   HasInscription()
   {
      return FALSE;
   }

   AddObjectAttribute(attribute=$)
   {
      if attribute <> $
         AND (plObject_attributes = $
         OR FindListElem(plObject_attributes, attribute) = 0)
      {
         plObject_attributes = Cons(attribute,plObject_attributes);

         return TRUE;
      }

      return FALSE;
   }

   RemoveObjectAttribute(attribute=$)
   {
      if attribute <> $
         AND plObject_attributes <> $
         AND FindListElem(plObject_attributes, attribute) <> 0
      {
         plObject_attributes = DelListElem(plObject_attributes,attribute);

         return TRUE;
      }

      return FALSE;
   }

   GetObjectAttributes()
   {
      return plObject_attributes;
   }

end
////////////////////////////////////////////////////////////////////////////////
