// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Portal is ActiveObject

constants:

   include blakston.khd

resources:

   include portal.lkod

   portal_name_rsc = "portal"
   portal_icon_rsc = portal.bgf
   portal_desc_rsc = "The portal flickers coldly, eerily inviting you to some unknown locale."

   portal_dead = "This archway stands cold and inanimate."

classvars:

   vrName = portal_name_rsc

   viMoveOn_type = MOVEON_TELEPORTER

   viAnimationSpeed = 100
   viMaxDistance = 3
   vrDead = portal_dead

properties:

   vrIcon = portal_icon_rsc
   vrDesc = Portal_desc_rsc

   pbAnimate = TRUE

   piDest_room = RID_DEFAULT
   piDest_angle = ANGLE_NORTH
   piDest_row = $
   piDest_col = $
   piDest_fine_row = FINENESS_HALF
   piDest_fine_col = FINENESS_HALF

   // Will contain the coordinates in which a user can be teleported, in
   // the form [ minrow, maxrow, mincol, maxcol ]. Calculated when the
   // portal first enters a room or is moved.
   plTeleportArea = $

   ptAnimate = $

messages:

   Constructor(dest_room_num = RID_DEFAULT, dest_row = 1, dest_col = 1,
               dest_angle = $, dest_fine_row = FINENESS_HALF,
               dest_fine_col = FINENESS_HALF, desc = $, icon=$)
   {
      piDest_room = dest_room_num;
      piDest_row = dest_row;
      piDest_col = dest_col;
      piDest_fine_row = dest_fine_row;
      piDest_fine_col = dest_fine_col;
      piDest_angle = dest_angle;

      if desc <> $
      {
         vrdesc = desc;
      }

      if icon <> $
      {
         vrIcon = icon;
      }

      propagate;
   }

   Delete()
   {
      if (ptAnimate <> $)
      {
         DeleteTimer(ptAnimate);
         ptAnimate = $;
      }

      propagate;
   }

   NewOwner(what=$)
   {
      if (what <> $
         AND IsClass(what,&Room))
      {
         // Post this so portal is in the room when area is calculated.
         Post(self,@CalculatePortalArea);
      }

      propagate;
   }

   CalculatePortalArea()
   "Pre-calculate the area around the portal in which a user can be teleported."
   {
      local iRow, iCol, iRowDec, iColDec;

      iRow = Send(self,@GetRow);
      iCol = Send(self,@GetCol);

      if (iRow = $
         OR iCol = $)
      {
         Debug("Portal ",self," in room ",Send(poOwner,@GetName),
               " trying to calculate position with $ row/col!");

         return;
      }

      iRowDec = iRow * 100 + Send(self,@GetFineRow) * 15625 / 10000;
      iColDec = iCol * 100 + Send(self,@GetFineCol) * 15625 / 10000;

      plTeleportArea = [iRowDec - 100, iRowDec + 100, iColDec - 100, iColDec + 100];

      return;
   }

   ShowDesc()
   {
      if pbAnimate
      {
         propagate;
      }
      else
      {
         AddPacket(4,vrDead);
      }

      return;
   }

   SetAnimation(what = $)
   {
      pbAnimate = what;
      Send(poOwner,@SomethingChanged,#what=self,#force=TRUE);

      return;
   }

   ReanimatePortal(timer=$)
   "Turns the portal's animation back on."
   {
      if (timer <> ptAnimate)
      {
         DeleteTimer(ptAnimate);
      }

      ptAnimate = $;

      Send(self,@SetAnimation,#what=TRUE);

      return;
   }

   SomethingMoved(what = $)
   {
      if what = self
      {
         // If the portal moved, recalculate the teleporting area.
         Post(self,@CalculatePortalArea);

         return;
      }

      if NOT pbAnimate
         OR plTeleportArea = $
      {
         return;
      }

      if (Send(poOwner,@IsUserInArea,#who=what,#lArea=plTeleportArea))
      {
         // Turn the portal off for a short time during transport.
         // Done in case a portal tries to repeatedly teleport
         // the same player.
         Send(self,@SetAnimation,#what=FALSE);
         ptAnimate = CreateTimer(self,@ReanimatePortal,500);

         // Something moved on top of us. Post this so the user's
         // new coordinates get set correctly if moving in the same room.
         Post(self,@TeleportSomething,#what=what);
      }

      return;
   }

   TeleportSomething(what=$)
   "Called when something walks on top of us."
   {
      // Test if the move is OK first (do_move=FALSE)
      if NOT Send(SYS,@UtilGoNearSquare,#what=what,
                  #where=Send(SYS,@FindRoomByNum,#num=piDest_room),
                  #new_row=piDest_row,#new_col=piDest_col,
                  #fine_row=piDest_fine_row,#fine_col=piDest_fine_col,
                  #new_angle=piDest_angle, #max_distance=viMaxDistance,
                  #do_move=FALSE)
      {
         Debug("Portal",self,"unable to move",what);
      }
      else
      {
         // Now actually do the move
         Send(SYS,@UtilGoNearSquare,#what=what,
              #where=Send(SYS,@FindRoomByNum,#num=piDest_room),
              #new_row=piDest_row,#new_col=piDest_col,
              #fine_row=piDest_fine_row,#fine_col=piDest_fine_col,
              #new_angle=piDest_angle, #max_distance=viMaxDistance);
      }

      return;
   }

   ReqNewOwner(what = $)
   {
      return IsClass(what,&Room);
   }

   SendAnimation()
   {
      if NOT pbAnimate
      {
         propagate;
      }

      AddPacket(1,ANIMATE_CYCLE, 4,viAnimationSpeed, 2,1, 2,1);

      return;
   }

   GetMoveOnType()
   {
      if NOT pbAnimate
      {
         return (viMoveOn_type | MOVEON_NO);
      }

      propagate;
   }

   SendLightingInformation()
   {
      local iIntensity;

      AddPacket(2,LIGHT_FLAG_ON);
      // Intensity (out of 255)
      // More intense if we're actually active.
      if pbAnimate
      {
         AddPacket(1,10);
      }
      else
      {
         AddPacket(1,5);
      }

      // Color
      AddPacket(2,LIGHT_PURPLE);

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
