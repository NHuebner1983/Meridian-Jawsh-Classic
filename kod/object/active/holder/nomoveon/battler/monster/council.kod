// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Council is Monster

constants:

   include blakston.khd

resources:

   include council.lkod

   Councilor_name_rsc = "Councilor"
   Councilor_icon_rsc = hermit.bgf
   Councilor_desc_rsc = ""

   blank_spec_rsc=""
   con_token_delivered_rsc = \
      "Thank you. You have done me a great service. %s %s"
   con_duke_delivered_rsc = \
      "I will pay more attention to the matters which concern the Duke."
   con_princess_delivered_rsc = \
      "I will look with more favor on the Princess Kateriina's ideas."
   con_rebel_delivered_rsc = \
      "I will look upon rebellion as a sign of good change."
   con_holy_delivered_rsc = \
      "I will pray to Shal'ille as a sign of good change."
   con_unholy_delivered_rsc = \
      "I will praise evil in the name of Queen Venya'Cyr."
   con_koc_delivered_rsc = \
      "I spread horrible rumors throughout the mainland in the name of Cital ko'Manca."
   con_neutral_delivered_rsc = \
      "I shall endeavor to be as impartial at the court as ye."

classvars:
   
   vrName = Councilor_name_rsc
   vrDesc = Councilor_desc_rsc
   vrIcon = Councilor_icon_rsc
   viAttributes = MOB_LISTEN | MOB_RANDOM | MOB_RECEIVE

   viObject_flags = OF_ATTACKABLE | OF_DISPLAY_NAME | OF_NPC

   // Mob doesn't move and cannot be attacked.
   viDefault_behavior = AI_NPC | AI_NOMOVE

   viDefinite = ARTICLE_NONE
   viIndefinite = ARTICLE_NONE

   viSpeed = SPEED_SLOW
   viQuestID = 0
   viInitialState=1
   viHomeroom = RID_FOREST1
   viMyRow = 15
   viMyCol = 15
   viMyAngle = ANGLE_NORTH

properties:

   piStateBump = 1
   piNameColor = NC_NPC

messages:

   Delete()
   {
      Send(Send(SYS,@GetTokenGame),@CouncilorDeleted,#what=self);

      propagate;
   }

   GetInitialState()
   {
     return viInitialState;
   }

   CheckWhyWanted(obj=$,who=$)
   {
      local oMoney,spec_rsc,fact_rsc;

      if IsClass(obj,&Token)
      {

         spec_rsc=Send(self,@CheckSpecialDeliverer,#who=who);

         if Send(who,@GetFaction)=FACTION_DUKE
         { fact_rsc=con_duke_delivered_rsc;}
         if Send(who,@GetFaction)=FACTION_NEUTRAL
         { fact_rsc=con_neutral_delivered_rsc;}
         if Send(who,@GetFaction)=FACTION_PRINCESS
         { fact_rsc=con_princess_delivered_rsc;}
         if Send(who,@GetFaction)=FACTION_REBEL
         { fact_rsc=con_rebel_delivered_rsc;}
         if Send(who,@GetFaction)=FACTION_HOLY
         { fact_rsc=con_holy_delivered_rsc;}
         if Send(who,@GetFaction)=FACTION_NECROMANCER
         { fact_rsc=con_unholy_delivered_rsc;}
         if Send(who,@GetFaction)=FACTION_KOC
         { fact_rsc=con_koc_delivered_rsc;}

         Post(poOwner,@SomeoneSaid,#what=self,#type=SAY_RESOURCE,
               #string=con_token_delivered_rsc,
               #parm1=fact_rsc,#parm2=spec_rsc);

         return TRUE;
      }

      propagate;
   }

   CheckSpecialDeliverer()
   {
      return blank_spec_rsc;
   }

   GetStateBump()
   {
     return piStateBump;
   }

   GotoHomeroom()
   {
      local room;

      room = Send(SYS,@FindRoomByNum,#num=viHomeroom);
      if room=$
      {
         Debug("FindRoombyNum num=",viHomeroom,"returned null");

         return;
      }

      Send(room,@teleport,#what=self);
      Send(room,@SomethingMoved,#what=self,#new_row=viMyRow,#new_col=viMyCol);
      Send(room,@SomethingTurned,#what=self,#new_angle=viMyAngle);

      return;
   }

   CanMorphTo()
   {
      return FALSE;
   }

   EnterStateWait()
   {
      // They shouldn't have acquired a target, but to be sure...
      if poTarget <> $
         AND Send(poTarget,@GetOwner) = poOwner
         AND IsClass(poTarget,&user)
      {
	     Send(poTarget,@ReduceAggro,#what=self);
         Send(poTarget,@SubtractFromMonsterChasers,
               #level=Send(self,@GetLevel));
      }

      poTarget = $;
      piHatred = 0;

      // Leave them in the waiting state.
      Send(self,@SetState,#bit=STATE_WAIT);
      Send(self,@ClearBehavior);

      // We no longer set a move timer for NPCs.

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
