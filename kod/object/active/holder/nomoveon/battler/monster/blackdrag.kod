// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
BlackDragon is Monster

constants:

   include blakston.khd

resources:

   BlackDragon_name_rsc = "black dragon"
   BlackDragon_icon_rsc = blckdrag.bgf
   BlackDragon_desc_rsc = \
   "Vicious and Vile, this Black Dragon drips death and  "
   "consumes souls.  Razor sharp claws, Daggers for teeth,  "
   "and an unimaginable rage against anyone who trespasses. "
   "Warrior Beware."

   BlackDragon_dead_icon_rsc = blckdragX.bgf
   BlackDragon_dead_name_rsc = "dead black dragon"

   BlackDragon_sound_hit = icedragonroar2.wav
   BlackDragon_sound_miss = icedragonroar3.wav
   BlackDragon_sound_death = icedragonroar1.wav
   BlackDragon_sound_aware = icedragonroar4.wav

classvars:

   vrName = BlackDragon_name_rsc
   vrIcon = BlackDragon_icon_rsc
   vrDesc = BlackDragon_desc_rsc
   vrDead_icon = BlackDragon_dead_icon_rsc
   vrDead_name = BlackDragon_dead_name_rsc

   viTreasure_type = TID_LUPOGG_KING

   viSpeed = SPEED_FAST
   viAttack_type = ATCK_WEAP_CLAW
   viAttributes = 0
   viLevel = 300
   viDifficulty = 10
   viAmountofLoot = 9
   viVisionDistance = 50
   viKarma = 0
   viDefault_behavior = AI_FIGHT_AGGRESSIVE | AI_FIGHT_SWITCHALOT
   viCashmin = 15000
   viCashmax = 110000

   vrSound_hit = BlackDragon_sound_hit
   vrSound_miss = BlackDragon_sound_miss
   vrSound_aware = BlackDragon_sound_aware
   vrSound_death = BlackDragon_sound_death

properties:

   piAnimation = ANIM_IDLE

messages:

   Constructed()
   {
      plResistances = [ [ATCK_SPELL_FIRE, 30],
                        [ATCK_SPELL_COLD, 30],
                        [ATCK_WEAP_BLUDGEON, 30],
                        [ATCK_WEAP_PIERCE, 80],
                        [ATCK_WEAP_SLASH, 50] ];
      propagate;
   }

   MonsterAttack(what = $)
   {
      // add in any attack animation calls
      Send(self,@DoSlash);

      return;
   }

   DoSlash()
   {
      piAnimation = ANIM_ATTACK;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = ANIM_IDLE;

      return;
   }
   
   SendLookAnimation()
   {
      AddPacket(1,ANIMATE_CYCLE,4,100,2,2,2,9);

      return;
   }

   SendMoveAnimation()
   {
      AddPacket(1,ANIMATE_CYCLE,4,75,2,2,2,9);

      return;
   }

   SendAnimation()
   {
      if piAnimation = ANIM_ATTACK
      {
         AddPacket(1,ANIMATE_ONCE,4,240,2,10,2,22,2,1);

         return;
      }

	  if piAnimation = ANIM_IDLE
	  {
			AddPacket(1,ANIMATE_CYCLE,4,100,2,2,2,9);

			// Send animation info to user.  Default is no animation, display with
	  }     //  group 1.
	  else
	  {
			AddPacket(1, ANIMATE_NONE, 2, 1);
	  }

		return;
		
   }
   
   IsAlly(target = $)
   {
      if IsClass(target,&BlackDragon)
      {
         return TRUE;
      }
   
      return FALSE;
   }

end
////////////////////////////////////////////////////////////////////////////////
