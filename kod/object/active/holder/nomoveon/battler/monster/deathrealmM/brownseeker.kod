// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
BrownSeeker is DeathRealmM

constants:

   include blakston.khd

   EXPIRE_SELF_AT = 360000 // self-delete in milliseconds (5 minutes)

resources:
   
   BrownSeeker_name_rsc = "brown seeker"
   BrownSeeker_icon_rsc = seekerc.bgf
   BrownSeeker_desc_rsc = \
      "Summoned from hell, this seeker has been purposed "
      "to find souls to devour. It emits a loud sonar-like "
      "attack, deafening those around it. If a prey is not found "
      "within a certain amount of time, it may return to hell and rest."

   BrownSeeker_dead_icon_rsc = seekercX.bgf
   BrownSeeker_dead_name_rsc = "slain brown seeker"

   BrownSeeker_sound_hit = BrownSeeker_att.mp3
   BrownSeeker_sound_miss = BrownSeeker_att.mp3
   BrownSeeker_sound_death = BrownSeeker_death.mp3
   BrownSeeker_sound_aware = BrownSeeker_miss.mp3

classvars:

   vrName = BrownSeeker_name_rsc
   vrIcon = BrownSeeker_icon_rsc
   vrDesc = BrownSeeker_desc_rsc
   vrDead_icon = BrownSeeker_dead_icon_rsc
   vrDead_name = BrownSeeker_dead_name_rsc

   viTreasure_type = TID_OGRE
   viSpeed = SPEED_FAST
   viAttributes = 0
   viLevel = 300
   viDifficulty = 9
   viVisionDistance = 18
   // Attack range of 192, or 3 row/col.
   viAttackRange = 256
   viKarma = -100
   viDefault_behavior = AI_FIGHT_HYPERAGGRESSIVE | AI_FIGHT_SWITCHALOT
   viCashmin = 5000
   viCashmax = 10000
   vrSound_hit = BrownSeeker_sound_hit
   vrSound_miss = BrownSeeker_sound_miss
   vrSound_aware = BrownSeeker_sound_aware
   vrSound_death = BrownSeeker_sound_death

   viBonusXP = 900
   viBonusTP = 3

properties:

   piAnimation = ANIM_IDLE
   piDrawEffectFlag = OF_BOUNCING
   ptSelfDelete = $

messages:

   Constructor()
   {
      ptSelfDelete = CreateTimer(self, @Delete, EXPIRE_SELF_AT);

      propagate;
   }
   
   Constructed()
   {
      plResistances = [ [-ATCK_SPELL_ACID, 80 ],
                        [ATCK_WEAP_NERUDITE, -10 ],
                        [ATCK_WEAP_NONMAGIC, 80 ] ];

      propagate;
   }

   MonsterAttack(what = $)
   {
      DeleteTimer(ptSelfDelete);
      ptSelfDelete = CreateTimer(self, @Delete, EXPIRE_SELF_AT);

      piAnimation = ANIM_ATTACK;
      Send(poOwner,@SomethingChanged,#what=self);
      piAnimation = ANIM_IDLE;

      return;
   }

   SendLookAnimation()
   {
      AddPacket(1,ANIMATE_ONCE);
      AddPacket(4,400,2,5,2,8,2,1);

      return;
   }

   SendMoveAnimation()
   {
      AddPacket(1,ANIMATE_CYCLE,4,200,2,1,2,4);

      return;
   }

   SendAnimation()
   {
      if piAnimation = ANIM_ATTACK
      {
         AddPacket(1,ANIMATE_ONCE,4,240,2,5,2,8,2,1);

         return;
      }

	  if piAnimation = ANIM_IDLE
	  {
			AddPacket(1,ANIMATE_CYCLE,4,500,2,1,2,4);

			// Send animation info to user.  Default is no animation, display with
	  }     //  group 1.
	  else
	  {
			AddPacket(1, ANIMATE_NONE, 2, 1);
	  }

		return;
		
   }

end
////////////////////////////////////////////////////////////////////////////////
