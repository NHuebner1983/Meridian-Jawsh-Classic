// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
JasperBlacksmith is JasperTown

constants:

   include blakston.khd

resources:

   include jssmith.lkod

   JasperBlacksmith_name_rsc = "Quintor"
   JasperBlacksmith_icon_rsc = jssmith.bgf
   JasperBlacksmith_desc_rsc = \
      "Quintor is widely recognized as the finest weaponsmith in the land.  "
      "He is also recognized as a quiet, brooding man who keeps to himself.  "
      "Take that as you will."

   JsBla_entry_welcome = "Hello %s%s, and welcome."

   JsBla_island_items = "I don't deal with nerudite garbage."

   JasperBlacksmith_already_have_spell = \
      "You already have knowledge of the %s spell.  You waste my time."
   JasperBlacksmith_not_ready = \
      "Your not ready to learn how to craft an mystic sword.  "

classvars:

   vrName = JasperBlacksmith_name_rsc
   vrIcon = JasperBlacksmith_icon_rsc
   vrDesc = JasperBlacksmith_desc_rsc
   viAttributes = \
      MOB_NOFIGHT | MOB_SELLER | MOB_BUYER | MOB_RANDOM \
      | MOB_NOMOVE | MOB_LISTEN | MOB_TEACHER
   viOccupation = MOB_ROLE_BLACKSMITH
   viMerchant_markup = MERCHANT_BARGAIN
   viQuestID = QST_ID_SCIMITAR_PROF

messages:

   AffectMood(what=$,why=$)
   {
      if why = MOODMOD_DAWN
      {
         Send(self,@SetMood,#new_mood=piMood-2);

         return;
      }

      if why = MOODMOD_DUSK
      {
         Send(self,@SetMood,#new_mood=piMood+2);

         return;
      }

      if why = MOODMOD_SELL_ITEM
      {
         Send(self,@SetMood,#new_mood=piMood+3);
      }

      return;
   }

   CanAddSkill(who=$,num=0)
   "We require that a quest be done before one of the spells can be learned"
   {
      if (num = SKID_PROFICIENCY_SCIMITAR)
         AND NOT Send(self,@HasDoneLearnQuest,#who=who)
      {
         return FALSE;
      }

      propagate;
   }

   ObjectDesired(what=$)
   {
      if Send(what,@CanBeGiventoNPC)
         AND (Send(Self,@IsObjectWeapon,#what=what)
            OR Send(Self,@IsObjectWearable,#what=what))
      {
         if IsClass(what,&NeruditeSword)
            OR IsClass(what,&NeruditeArmor)
            OR IsClass(what,&NeruditeBow)
         {
            Send(poOwner,@SomeoneSaid,#what=self,
                  #string=JsBla_island_items,#type=SAY_RESOURCE);

            return FALSE;
         }

         return TRUE;
      }

      return FALSE;
   }

   SetForSale()
   {
      plFor_sale = [
         [ 
            Create(&ScaleArmor),
            Create(&LeatherArmor),
            Create(&GoldShield),
            Create(&ShortSword),
            Create(&Hammer),
            Create(&Mace),
            Create(&PickAxe),
            Create(&BlacksmithsHammer)
         ],
         [
            SKID_PROFICIENCY_SCIMITAR,
            SKID_MINING
         ],
         [
            SID_CRAFTGAUNTLETS,
            SID_CRAFTHELMET,
            SID_CRAFTSCALEARMOR,
            SID_CRAFTKNIGHTSHIELD,
            SID_CRAFTMYSTICSWORD,
            SID_CRAFTSCIMITAR
         ],
         $];

      return;
   }

   UserEntered(who=$)
   {
      if Send(who,@CheckPlayerFlag,#flag=PFLAG_OUTLAW)
      {
         Send(self,@SetMood,#new_mood=piMood+2);
      }

      if Send(who,@GetHomeRoom) = RID_JAS_INN
      {
         Send(self,@SetMood,#new_mood=piMood+1);
      }

      Post(who,@SomeoneSaid,#what=self,#string=JsBla_entry_welcome,
           #type=SAY_RESOURCE,#parm1=Send(who,@GetDef),
           #parm2=Send(who,@GetName));

      return;
   }

   CanDoTeach(who=$,sid=0)
   {
      if sid = SID_CRAFTMYSTICSWORD
      {
         if NOT Send(self,@SpecialTeachChecks,#report=TRUE,#who=who,#num=sid)
         {
            return FALSE;
         }
      }

      propagate;
   }

   CanAddSpell(who=$,num=0,report=FALSE)
   {
      if NOT Send(self,@SpecialTeachChecks,#report=report,#who=who,#num=num)
      {
         return FALSE;
      }

      propagate;
   }

   SpecialTeachChecks(who=$,num=0,report=FALSE)
   {
      local i, oSpell, iSchoolRequired, bFound;

      if who = $ OR num = 0
      {
         Debug("Called SpecialTeachChecks with bad parameters!");

         return FALSE;
      }

      oSpell = Send(SYS,@FindSpellByNum,#num=num);

      if NOT Send(oSpell,@IsAccessible)
      {
         return FALSE;
      }

      if Send(who,@HasSpell,#num=num)
      {
         if report
         {
            Post(self,@SayToOne,#target=who,
                  #message_rsc=JasperBlacksmith_already_have_spell,
                  #parm1=Send(oSpell,@GetName));
         }

         return FALSE;
      }

      bFound = FALSE;
      iSchoolRequired=0;
      
      if num = SID_CRAFTMYSTICSWORD
      {
         iSchoolRequired = SS_KRAANAN;
      }

      if iSchoolRequired = 0
      {
         return TRUE;
      }

      // Special checks for high level spells: need a high level spell in 
      // a particular school.
      foreach i in Send(who,@GetSpellList)
      {
         oSpell = Send(SYS,@FindSpellByNum,
                        #num=Send(who,@DecodeSpellNum,#compound=i));
         if Send(oSpell,@GetLevel) > 3
            AND Send(oSpell,@GetSchool) = iSchoolRequired
         {
            bFound = TRUE;

            break;
         }
      }

      if bFound = FALSE
      {
         if report
         {
            Post(self,@SayToOne,#target=who,#message_rsc=JasperBlacksmith_not_ready);
         }

         return FALSE;
      }

      return TRUE;
   }

end
////////////////////////////////////////////////////////////////////////////////
