// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
StorageBox is Holder

constants:

   include blakston.khd

   CLEAN_DELAY = 21600000   /// if the chests aren't replaced in 6 hours,
                            /// they delete themselves.

resources:

   include storebox.lkod

   storagebox_name_rsc = "some storage"
   storagebox_icon_rsc = box1.bgf

   storagebox_desc_rsc = "This is a place to store stuff."

classvars:

   vrName = storagebox_name_rsc
   vrIcon = storagebox_icon_rsc
   vrDesc = storagebox_desc_rsc

   viBulk_hold_max = 999999999
   viWeight_hold_max = $

properties:

   // Placed here so we can change it when locked.
   viObject_flags = OF_CONTAINER

   pbLocked = FALSE
   ptClean = $

messages:

   Constructor(bLocked=$)
   {
      if bLocked
      {
         pbLocked = TRUE;
         viObject_Flags &= ~OF_CONTAINER;
      }

      propagate;
   }

   ReqNewOwner(what = $)
   {
      return FALSE;
   }

   SendAnimation()
   {
      if pbLocked
      {
         AddPacket(1,ANIMATE_NONE,2,1);
       
         return;
      }

      AddPacket(1,ANIMATE_NONE,2,2);

      return;
   }

   EnterLimbo()
   {
      if poOwner<> $
      {
         Send(poOwner,@LeaveHold,#what=self);
         poOwner = $;
      }

      ptClean = CreateTimer(self,@CleanTimer,CLEAN_DELAY);

      return;
   }

   CleanTimer()
   {
      ptClean = $;
      if poOwner = $
      {
         Debug("Self-cleaning excess chests.");
         Send(self,@Delete);
      }

      return;
   }

   NewOwner(what=$)
   {
      if what <> $
      {
         if ptClean <> $
         {
            DeleteTimer(ptClean);
            ptClean = $;
         }
      }

      propagate;
   }

   Delete()
   {
      if ptClean <> $
      {
         DeleteTimer(ptClean);
         ptClean = $;
      }

      Send(SYS,@RemoveChestFromList,#oChest=self);

      propagate;
   }

   ReqTaker(what=$,taker=$)
   {
      local oTakerOwner;

      oTakerOwner = Send(taker,@GetOwner);

      if (NOT Send(oTakerOwner,@LineOfSight,#obj1=taker,#obj2=self))
      {
         Debug("ALERT!  ",Send(taker,@GetTrueName),taker," in RID ",
               Send(oTakerOwner,@GetRoomNum),
               " taking from a chest they cannot see! ");

         return FALSE;
      }

      if IsClass(taker,&User)
         AND NOT IsClass(taker,&Admin)
         AND IsClass(oTakerOwner,&Room) AND IsClass(poOwner,&Room)
         AND oTakerOwner <> poOwner
      {
         Debug("ALERT!  ",Send(taker,@GetTrueName),taker," in RID ",
               Send(oTakerOwner,@GetRoomNum),
               " taking from distant chest in RID ",
               Send(poOwner,@GetRoomNum));

         return FALSE;
      }

      if IsClass(oTakerOwner,&GuildHall)
         AND NOT Send(oTakerOwner,@ReqUseGuildChest,#who=taker)
      {
         return FALSE;
      }

      propagate;
   }

   ReqNewHold(what = $, who = $, isConveyance = $)
   {
      local oWhoOwner;

      // The player's owner.
      oWhoOwner = Send(who,@GetOwner);

      if ((isConveyance <> $ AND NOT isConveyance) OR isConveyance = $)
	      AND (NOT Send(oWhoOwner,@LineOfSight,#obj1=who,#obj2=self))
      {
         Debug("ALERT!  ",Send(who,@GetTrueName),who," in RID ",
               Send(oWhoOwner,@GetRoomNum),
               " depositing to a chest they cannot see! ");

         return FALSE;
      }

      if ((isConveyance <> $ AND NOT isConveyance) OR isConveyance = $)
	     AND IsClass(who,&User)
         AND NOT IsClass(who,&Admin)
         AND IsClass(oWhoOwner,&Room)
         AND IsClass(poOwner,&Room)
         AND oWhoOwner <> poOwner
      {
         Debug("ALERT!  ",Send(who,@GetTrueName),who," in RID ",
               Send(oWhoOwner,@GetRoomNum),
               " putting into distant chest in RID ",
               Send(poOwner,@GetRoomNum));

         return FALSE;
      }

      if NOT Send(what,@CanBeStoredInVault)
      {
         return FALSE;
      }

      if Send(who, @GetGuildHall) <> $ AND IsClass(Send(who, @GetGuildHall),&GuildHall)
      {
         return Send(Send(who, @GetGuildHall), @ReqUseGuildChest,#who=who);
      }

      return TRUE;
   }

   LockChest(bLocked=$)
   {
      pbLocked = bLocked;

      if pbLocked
      {
         viObject_Flags &= ~OF_CONTAINER;
      }

      if NOT pbLocked
      {
         viObject_Flags |= OF_CONTAINER;
      }

      Send(poOwner,@SomethingChanged,#what=self,#force=TRUE);

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
