// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
TosArena is TosRoom

constants:

   include blakston.khd

   // Boundaries of the playing field
   NORTH_BOUNDARY = 6
   SOUTH_BOUNDARY = 20
   WEST_BOUNDARY = 6
   EAST_BOUNDARY = 20

resources:

   include tosarena.lkod

   room_TosArena = tosarena.roo
   name_TosArena = "The Arena of Kraanan"

   TosArena_music = pk_fm.ogg

   TosArena_commence_wav = forest1.ogg
   wind_sound_tosarena = ambcntry.ogg
   wind1_sound_tosarena = rs_wind.ogg

   TosArena_no_offer = \
      "The Watcher says, \"Spectators and combatants may not exchange goods "
      "during matches."
   TosArena_no_attack = "You may not fight here unless you are a combatant."
   TosArena_no_spell = "Only the combatants may cast spells."
   TosArena_no_rescue = "No chickening out!"
   TosArena_no_target = "That's awfully rude of you!"
   TosArena_between_bouts = "No horseplay between bouts!"

   TosArena_cant_go = \
      "The Watcher says, \"You can't leave!  You're a combatant!\""

   TosArena_traditional = "Traditional"
   TosArena_traditional_rules = \
      "Traditional bouts are those between only two combatants, a champion "
      "and a challenger.  If there is no champion, say CHAMPION to claim the "
      "title.  A potential fighter then says CHALLENGE to challenge the "
      "champion.  The champion may then choose to either ACCEPT the challenge "
      "or RENEGE his title."
   TosArena_lastman = "Last Man Standing"
   TosArena_lastman_rules = \
      "Last man standing bouts may have up to 25 combatants.  First, a "
      "CHAMPION must be declared.  Once someone CHALLENGES him, others have "
      "30 seconds to also CHALLENGE.  After the Watcher has begun the match, "
      "it's every man for himself.  The last gladiator left in the ring wins "
      "the glory of Kraanan."
   TosArena_guildvguild = "Guild Vs Guild"
   TosArena_guildvguild_rules = \
      "Two guilds may choose to combat each other.  A representative from one "
      "guild registers that guild as the CHAMPION, and then a member of the "
      "challenging guild proffers a CHALLENGE.  At this point, other guild "
      "members from both guilds have 30 seconds to join in, although no more "
      "than 10 people from any one guild may participate."
   TosArena_battleRoyale = "Battle Royale"
   TosArena_battleRoyale_rules = \
      "A mix between last man standing and guild vs guild, first a CHAMPION "
      "is needed, and then other guild members from other guilds may "
      "CHALLENGE.  Any number of guilds may take part in the proceedings, but "
      "there may be no more than 5 members of any one guild in the pit, and "
      "no more than 25 combatants total."

   TosArena_rules = "Rules"
   TosArena_rules_rules = \
      "* Between bouts, any person may say the name of a combat style to "
      "change combat styles.  However, all matches must be over and any "
      "current champions must RENEGE their titles.\n"
      "* Magic and combat are limited to between combatants on the arena "
      "pit.  Players in the stands cannot be harmed by wayward combatants.\n"
      "* The Watcher reserves the right to make the proceedings more... "
      "interesting... if he so desires.\n"
      "* Matches are 'to the death'.  However, combatants suffer no ill "
      "effects from arena death."

   TosArena_traditional_icon = arsign01.bgf
   TosArena_lastman_icon = arsign02.bgf
   TosArena_rules_icon = arsign03.bgf
   TosArena_guild_icon = arsign04.bgf
   TosArena_battleroyale_icon = arsign05.bgf

   TosArena_start_tournament = \
      "Banners unfurl and bugles warble to signify the beginning of the "
      "Royal Tournament!"
   TosArena_end_tournament = "The Royal Tournament has come to an end."
   TosArena_doors_locked = \
      "You lock the doors of the Arena of Kraanan.  Players may now only "
      "enter if a Guardian brings them here."
   TosArena_doors_unlocked = \
      "You unlock the doors to the Arena, so that all may enter once again."

   TosArena_summon_servant_cant_cast_here = "This place forbids you to summon a servant."

   TosArena_purge_message = "~B~r~IThe Watcher purges you to participate in a fair battle.~B~r~I"

   TosArena_Fanfare_Sound = fanfare1.ogg
   TosArena_Combat_Sound = arena1.ogg
   TosArena_Huzzah_Sound = huzzah.ogg

   TosArena_booth_command = "booth"
   TosArena_lock_command = "lock"

classvars:

   vrName = name_TosArena

   viTeleport_row = 22
   viTeleport_col = 13

   viPermanent_flags = ROOM_SAFE_DEATH

properties:

   poWatcher = $

   prRoom = room_TosArena
   piRoom_num = RID_TOS_ARENA

   prMusic = TosArena_music

   piBaseLight = LIGHT_NICE
   piOutside_factor = 5

   piDirectional_percent = DIRECTIONAL_PERCENT_OUTDOORS
   viTerrain_type = TERRAIN_CITY

   pbSnowGroundTexture = TRUE

   pbLocked = FALSE
   pbRealdeath = FALSE
   pbNoReagents = TRUE

messages:

   CanOffer(who = $, target = $)
   {
      if who = $ or target = $
      {
         return FALSE;
      }

      if (poWatcher = $
         OR NOT Send(poWatcher,@FightInSession)
         OR (Send(poWatcher,@IsCombatant,#who=who)
            = Send(poWatcher,@IsCombatant,#who=target)))
      {
         return TRUE;
      }

      Send(who,@MsgSendUser,#message_rsc=TosArena_no_offer);

      return FALSE;
   }

   CheckWatcher(what=$)
   {
      if poWatcher = $
      {
         poWatcher = what;
         Send(self,@NewHold,#what=what,#new_row=13,#new_col=20,
               #fine_row=0,#new_angle=ANGLE_WEST);
      }

      return;
   }

   SafePlayerAttack()
   {
      return TRUE;
   }

   NewHold(what = $,new_row = 22, new_col = 11)
   "Sends cutesey messages to anyone who enters the room.  Also, note that it "
   "will move anyone who enters in the playing field into the stands."
   "This should only be necessary for people who drop link."
   {
      if IsClass(what,&User)
         AND (Send(what,@GetOwner) = $)
         AND NOT Send(poWatcher,@IsCombatant,#who=what)
      {
         Post(self,@Teleport,#what=what,#outofplay=TRUE);
      }

      propagate;
   }

   CreateStandardExits()
   {
      plExits = $;

      plExits = Cons([ 4, 6, RID_TOS_ARENA2, 22, 35, ROTATE_NONE ],plExits);
      plExits = Cons([ 4, 7, RID_TOS_ARENA2, 22, 35, ROTATE_NONE ],plExits);
      plExits = Cons([ 5, 7, RID_TOS_ARENA2, 22, 35, ROTATE_NONE ],plExits);
      plExits = Cons([ 6, 4, RID_TOS_ARENA2, 22, 35, ROTATE_NONE ],plExits);
      plExits = Cons([ 7, 4, RID_TOS_ARENA2, 22, 35, ROTATE_NONE ],plExits);
      plExits = Cons([ 7, 5, RID_TOS_ARENA2, 22, 35, ROTATE_NONE ],plExits);

      plExits = Cons([ 18, 4, RID_TOS_ARENA2, 29, 35, ROTATE_NONE ],plExits);
      plExits = Cons([ 18, 5, RID_TOS_ARENA2, 29, 35, ROTATE_NONE ],plExits);
      plExits = Cons([ 19, 4, RID_TOS_ARENA2, 29, 35, ROTATE_NONE ],plExits);
      plExits = Cons([ 20, 7, RID_TOS_ARENA2, 29, 35, ROTATE_NONE ],plExits);
      plExits = Cons([ 21, 6, RID_TOS_ARENA2, 29, 35, ROTATE_NONE ],plExits);
      plExits = Cons([ 21, 7, RID_TOS_ARENA2, 29, 35, ROTATE_NONE ],plExits);

      propagate;
   }

   Constructed()
   {
      //  each sound is [wave_file, row, col, cutoff radius, maximum volume]
      plLooping_sounds = [[ wind_sound_tosarena, 1, 1, 200, 100 ]];

      propagate;
   }

   CreateStandardObjects()
   "Creates the watcher and two signposts."
   {
      local oSign;

      if poWatcher = $
      {
         poWatcher = Create(&TosWatcher);
         Send(self,@NewHold,#what=poWatcher,#new_row=13,#new_col=20,
               #fine_row=0,#new_angle=ANGLE_WEST);

         oSign = Create(&ArenaSign1,#name=tosarena_rules,
                     #icon=tosarena_rules_icon,#desc=tosarena_rules_rules);
         Send(self,@NewHold,#what=oSign,#new_row=13,#new_col=19,
               #fine_row=0,#fine_col=31);

         oSign = Create(&ArenaSign1,#name=tosarena_traditional,
                     #icon=tosarena_traditional_icon,
                     #desc=tosarena_traditional_rules);
         Send(self,@NewHold,#what=oSign,#new_row=11,#new_col=19,
               #fine_row=28,#fine_col=31);

         oSign = Create(&ArenaSign1,#name=tosarena_lastman,
                     #icon=tosarena_lastman_icon,#desc=tosarena_lastman_rules);
         Send(self,@NewHold,#what=oSign,#new_row=12,#new_col=19,
               #fine_row=12,#fine_col=31);

         oSign = Create(&ArenaSign1,#name=tosarena_guildvguild,
                     #icon=tosarena_guild_icon,#desc=tosarena_guildvguild_rules);
         Send(self,@NewHold,#what=oSign,#new_row=13,#new_col=19,
               #fine_row=52,#fine_col=31);

         oSign = Create(&ArenaSign1,#name=tosarena_battleroyale,
                     #icon=tosarena_battleroyale_icon,
                     #desc=tosarena_battleroyale_rules);
         Send(self,@NewHold,#what=oSign,#new_row=14,#new_col=19,
               #fine_row=36,#fine_col=31);
      }

      propagate;
   }

   InPlay(what=$,row=0,col=0, bNonPlayerOkay = FALSE)
   "Returns true if player is on playing field, false if not."
   "Can check either by row and column or by object."
   "Returns false if not a player, unless the nonPlayerOkay flag is marked"
   {
      local iRow, iCol;

      if what = $ AND row = 0
      {
         return FALSE;
      }
      else
      {
         if row <> 0
         {
           iRow = row;
           iCol = Col;
         }
         else if IsClass(what,&Player) OR bNonPlayerOkay
         {
            iRow = Send(what,@GetRow);
            iCol = Send(what,@GetCol);
         }
         else
         {
            return FALSE;
         }

         if iRow = $
            OR iCol = $
         {
            return FALSE;
         }

         //////////////////////////////////////////////////////
         ///Special for players in alcoves.                  ///
         /// Format is:                                      ///
         /// if (Under watcher's area)                       ///
         ///    OR (Upper left box defining north alcove)    ///
         ///    OR (Lower right box defining north alcove)   ///
         ///    OR (Lower left bow defining south alcove)    ///
         ///    OR (Upper right box defining south alcove)   ///
         //////////////////////////////////////////////////////

         if (iRow < NORTH_BOUNDARY OR iCol < WEST_BOUNDARY)
            OR (iRow > SOUTH_BOUNDARY OR iCol > EAST_BOUNDARY)
         {
            if ( ((iRow > 8 AND iRow < 17) AND (iCol > 18 AND iCol < 26))
                     OR ((iRow = 4 OR iRow = 5) AND (iCol = 4 OR iCol = 5))
                     OR ((iRow = 5 OR iRow = 6) AND (iCol = 5 OR iCol = 6))
                     OR ((iRow = 20 OR iRow = 21) AND (iCol = 4 OR iCol = 5))
                     OR ((iRow = 19 OR iRow = 20) AND (iCol = 5 OR iCol = 6)) )
            {
               return TRUE;
            }
            else
            {
               return FALSE;
            }
         }
         else
         {
            /// special for walls
            if bNonPlayerOkay
               AND (iRow = NORTH_BOUNDARY
                    OR iCol = WEST_BOUNDARY
                    OR iRow = SOUTH_BOUNDARY
                    OR iCol = EAST_BOUNDARY)
            {
               return FALSE;
            }
            else
            {
               return TRUE;
            }
         }
      }

      return FALSE;
   }

   IsArena()
   {
      return TRUE;
   }

   IsValidTarget(who=$)
   {
      if NOT Send(self,@CheckRoomFlag,#flag=ROOM_SAFE_DEATH)
      {
         return FALSE;
      }

      if poWatcher = $
      {
         Debug("IsValidTarget called with no watcher in existence!");

         return;
      }

      return (Send(poWatcher,@IsCombatant,#who=who)
         AND Send(poWatcher,@FightInSession));
   }

   GetWatcher()
   {
      return poWatcher;
   }

   Teleport(what=$,goinplay=FALSE,outofplay=FALSE)
   {
      // Don't teleport players if logged off.
      if (what = $
         OR (IsClass(what,&User)
            AND NOT Send(what,@IsLoggedOn)))
      {
         return;
      }

      // Check goinplay and outofplay first. If we don't have
      // a parameter set, teleport combatants in and anyone else out.
      if goinplay
      {
         Send(self,@TeleportIntoPlay,#who=what);
      }
      else if outofplay
      {
         Send(self,@TeleportOutOfPlay,#who=what);
      }
      else if Send(poWatcher,@IsCombatant,#who=what)
      {
         Send(self,@TeleportIntoPlay,#who=what);
      }
      else
      {
         Send(self,@TeleportOutOfPlay,#who=what);
      }

      return;
   }

   TeleportIntoPlay(who=$)
   {
      local i, iRow, iCol;

      // Teleport to the playing field
      iRow = Random(7,18);
      iCol = Random(7,18);
      Send(SYS,@UtilGoNearSquare,#what=who,#where=self,
            #new_row=iRow,#new_col=iCol,#mob_override=TRUE);

      // Teleport minions too.
      foreach i in Send(who,@GetControlledMinions)
      {
         if (Send(i,@GetOwner) = self)
         {
            Send(self,@TeleportIntoPlay,#who=i);
         }
      }

      return;
   }

   TeleportOutOfPlay(who=$, iNum=0)
   {
      local i, iRow, iCol, iAngle;

      if (iNum = 0)
      {
         iNum = Random(1,3);
      }

      if iNum = 1
      {
         iRow = 22;
         iCol = 13;
         iAngle = ANGLE_NORTH;
      }
      else if iNum = 2
      {
         iRow = 4;
         iCol = 13;
         iAngle = ANGLE_SOUTH;
      }
      else
      {
         iRow = 13;
         iCol = 4;
         iAngle = ANGLE_EAST;
      }

      Send(SYS,@UtilGoNearSquare,#what=who,#where=self,#new_row=iRow,
            #new_col=iCol,#new_angle=iAngle,#mob_override=TRUE);

      // Teleport minions too.
      foreach i in Send(who,@GetControlledMinions)
      {
         if (Send(i,@GetOwner) = self)
         {
            Send(self,@TeleportOutOfPlay,#who=i,#iNum=iNum);
         }
      }

      return;
   }

   SpecialGreeting()
   {
      Send(self,@SomethingWaveRoom,#wave_rsc=TosArena_Fanfare_Sound);

      return;
   }

   PurgeCombatants(lCombatants=$)
   {
      local who;

      if lCombatants = $ OR NOT Length(lCombatants)
      {
         return;
      }

      foreach who in lCombatants
      {
         if IsClass(who, &Player)
         {
            Send(Send(SYS,@FindSpellByNum,#num=SID_PURGE),@DoPurge,#who=who,#iSpellPower=$);
            Send(who,@MsgSendUser,#message_rsc=TosArena_purge_message);
         }
      }

      return;
   }

   ArenaBeginFight(lCombatants=$)
   {
      local maze, who;

      foreach who in lCombatants
      {
         if IsClass(who, &Player) AND Send(who, @GetServant) <> $
         {
            // No servants allowed in the arena.
            Send(Send(who, @GetServant), @Delete);
            Post(who,@MsgSendUser,#message_rsc=TosArena_summon_servant_cant_cast_here);
         }
      }

      // Purge the combatants, make them buff.
      Send(self,@PurgeCombatants,#lCombatants=lCombatants);

      maze = Random(1,14);

      if Length(lCombatants) = 2
      {
         // teleport 'em to the cage.
         Send(SYS,@UtilGoNearSquare,#what=First(lCombatants),#where=self,
              #new_row=5,#new_col=5,#fine_row=0,#fine_col=0,#new_angle=ANGLE_SOUTH_EAST);
         Send(SYS,@UtilGoNearSquare,#what=Nth(lCombatants,2),#where=self,
              #new_row=21,#new_col=5,#fine_row=0,#fine_col=0,#new_angle=ANGLE_NORTH_EAST);
      }

      Send(self,@RaiseMaze,#maze=maze);
      Send(self,@SomethingWaveRoom,#wave_rsc=TosArena_Combat_Sound);

      return;
   }

   RaiseMaze(maze = 14, sector = 0, height = 192)
   {
      if sector <> 0
      {
         Send(self,@SetSector,#sector=sector,#animation=ANIMATE_FLOOR_LIFT,#height=height,#speed=32);

         return;
      }

      maze = Bound(maze,1,14);
      if maze = 1
      {
         Send(self,@SetSector,#sector=1,#animation=ANIMATE_FLOOR_LIFT,#height=192,#speed=32);
      }
      else if maze = 2
      {
         Send(self,@SetSector,#sector=1,#animation=ANIMATE_FLOOR_LIFT,#height=192,#speed=32);
         Send(self,@SetSector,#sector=2,#animation=ANIMATE_FLOOR_LIFT,#height=192,#speed=32);
      }
      else if maze = 3
      {
         Send(self,@SetSector,#sector=1,#animation=ANIMATE_FLOOR_LIFT,#height=192,#speed=32);
         Send(self,@SetSector,#sector=2,#animation=ANIMATE_FLOOR_LIFT,#height=192,#speed=32);
         Send(self,@SetSector,#sector=3,#animation=ANIMATE_FLOOR_LIFT,#height=192,#speed=32);
      }
      else if maze = 4
      {
         Send(self,@SetSector,#sector=3,#animation=ANIMATE_FLOOR_LIFT,#height=192,#speed=32);
      }
      else if maze = 5
      {
         Send(self,@SetSector,#sector=3,#animation=ANIMATE_FLOOR_LIFT,#height=192,#speed=32);
         Send(self,@SetSector,#sector=6,#animation=ANIMATE_FLOOR_LIFT,#height=192,#speed=32);
      }
      else if maze = 6
      {
         Send(self,@SetSector,#sector=4,#animation=ANIMATE_FLOOR_LIFT,#height=192,#speed=32);
      }
      else if maze = 7
      {
         Send(self,@SetSector,#sector=4,#animation=ANIMATE_FLOOR_LIFT,#height=192,#speed=32);
         Send(self,@SetSector,#sector=5,#animation=ANIMATE_FLOOR_LIFT,#height=192,#speed=32);
      }
      else if maze = 8
      {
         Send(self,@SetSector,#sector=4,#animation=ANIMATE_FLOOR_LIFT,#height=192,#speed=32);
         Send(self,@SetSector,#sector=6,#animation=ANIMATE_FLOOR_LIFT,#height=192,#speed=32);
      }
      else if maze = 9
      {
         Send(self,@SetSector,#sector=4,#animation=ANIMATE_FLOOR_LIFT,#height=192,#speed=32);
         Send(self,@SetSector,#sector=5,#animation=ANIMATE_FLOOR_LIFT,#height=192,#speed=32);
         Send(self,@SetSector,#sector=6,#animation=ANIMATE_FLOOR_LIFT,#height=192,#speed=32);
      }
      else if maze = 10
      {
         Send(self,@SetSector,#sector=5,#animation=ANIMATE_FLOOR_LIFT,#height=192,#speed=32);
      }
      else if maze = 11
      {
         Send(self,@SetSector,#sector=5,#animation=ANIMATE_FLOOR_LIFT,#height=192,#speed=32);
         Send(self,@SetSector,#sector=2,#animation=ANIMATE_FLOOR_LIFT,#height=192,#speed=32);
      }
      else if maze = 12
      {
         Send(self,@SetSector,#sector=5,#animation=ANIMATE_FLOOR_LIFT,#height=192,#speed=32);
         Send(self,@SetSector,#sector=6,#animation=ANIMATE_FLOOR_LIFT,#height=192,#speed=32);
      }
      else if maze = 13
      {
         Send(self,@SetSector,#sector=6,#animation=ANIMATE_FLOOR_LIFT,#height=192,#speed=32);
         Send(self,@SetSector,#sector=2,#animation=ANIMATE_FLOOR_LIFT,#height=192,#speed=32);
      }

      return;
   }

   ArenaEndFight(lCombatants = $)
   {
      local i, j, k;

      Send(self,@LowerMaze);

      // Remove radius enchantments
      foreach i in plActive
      {
         j = First(i);
         if IsClass(j,&Player)
            OR (IsClass(j,&Monster) AND NOT ((Send(j,@GetBehavior) & AI_NPC)))
         {
            foreach k in Send(j,@GetRadiusEnchantments)
            {
               Send(Nth(k,2),@RemoveEnchantment,#who=j,#state=Nth(k,3));
            }
         }
      }

      // Remove room enchantments
      Send(self,@RemoveAllEnchantments);

      /// cages in corners.
      Send(self,@SetSector,#sector=8,#animation=ANIMATE_CEILING_LIFT,#height=124,#speed=32);
      Send(self,@SetSector,#sector=9,#animation=ANIMATE_CEILING_LIFT,#height=230,#speed=32);

      Send(self,@SomethingWaveRoom,#wave_rsc=TosArena_Huzzah_Sound);
      Send(self,@CheckBehindBars);

      return;
   }

   LowerMaze(sector=0)
   "If a sector is specified, just lower that sector.  Otherwise, lower 'em all."
   {
      if sector <> 0
      {
         Send(self,@SetSector,#sector=sector,#animation=ANIMATE_FLOOR_LIFT,#height=129,#speed=32);

         return;
      }

      Send(self,@SetSector,#sector=1,#animation=ANIMATE_FLOOR_LIFT,#height=129,#speed=32);
      Send(self,@SetSector,#sector=2,#animation=ANIMATE_FLOOR_LIFT,#height=129,#speed=32);
      Send(self,@SetSector,#sector=3,#animation=ANIMATE_FLOOR_LIFT,#height=129,#speed=32);
      Send(self,@SetSector,#sector=4,#animation=ANIMATE_FLOOR_LIFT,#height=129,#speed=32);
      Send(self,@SetSector,#sector=5,#animation=ANIMATE_FLOOR_LIFT,#height=129,#speed=32);
      Send(self,@SetSector,#sector=6,#animation=ANIMATE_FLOOR_LIFT,#height=129,#speed=32);

      return;
   }

   ArenaCommenceFight()
   {
      Send(self,@SetSector,#sector=8,#animation=ANIMATE_CEILING_LIFT,#height=194,#speed=32);
      Send(self,@SetSector,#sector=9,#animation=ANIMATE_CEILING_LIFT,#height=300,#speed=32);

      return;
   }

   ArenaStartTournament(marshal = $)
   {
      Send(self,@SomeoneSaid,#string=TosArena_start_tournament,#type=SAY_MESSAGE,#what=self);
      Send(self,@TeleportToBooth,#who=marshal);
      Send(self,@SomethingWaveRoom,#wave_rsc=TosArena_Fanfare_Sound);
      pbNoReagents = FALSE;

      return;
   }

   ArenaEndTournament(marshal = $)
   {
      Send(self,@SomeoneSaid,#string=TosArena_end_tournament,#type=SAY_MESSAGE,#what=self);
      Send(self,@SomethingWaveRoom,#wave_rsc=TosArena_Fanfare_Sound);
      pbNoReagents = TRUE;

      return;
   }

   TeleportToBooth(who=$)
   {
      Send(SYS,@UtilGoNearSquare,#what=who,#where=self,#new_row=13,#new_col=20,
            #fine_row=0,#new_angle=ANGLE_WEST);

      return;
   }

   SomeoneSaid(what=$,string=$)
   {
      if what <> $ AND IsClass(what,&DM)
      {
         if (StringEqual(string,TosArena_booth_command))
         {
            Send(self,@TeleportToBooth,#who=what);

            return;
         }

         if (Send(what,@CheckDMFlag,#flag=DMFLAG_ALLOW_ARENA_CMDS)
            AND StringEqual(string,TosArena_lock_command))
         {
            if pbLocked
            {
               Send(what,@MsgSendUser,#message_rsc=TosArena_doors_unlocked);
               pbLocked = FALSE;
            }
            else
            {
               Send(what,@MsgSendUser,#message_rsc=TosArena_doors_locked);
               pbLocked = TRUE;
            }

            return;
         }
      }

      propagate;
   }

   IsLocked()
   {
      return pbLocked;
   }

   UnlockArena()
   {
      pbLocked = FALSE;

      return;
   }

   SomethingTryGo(what = $,row = $, col = $,fine_row = $,fine_col = $)
   {
      if ((row = 20 AND col = 6 AND fine_row > 32 AND fine_col > 32)
         OR (row = 19 AND col = 5 AND fine_row < 32 AND fine_col < 32))
      {
         Send(what,@MsgSendUser,#message_rsc=room_door_was_opened);
         Send(what,@WaveSendUser,#wave_rsc=vrDoor_Sound);

         Send(SYS,@UtilGoNearSquare,#what=what,
              #where=Send(SYS,@FindRoomByNum,#num=RID_TOS_ARENA2),
              #new_row=29,#new_col=35,#new_angle=Send(what,@GetAngle));

         return TRUE;
      }

      if ((row = 6 AND col = 5 AND fine_row > 32 AND fine_col < 32)
         OR (row = 5 AND col = 6 AND fine_row < 32 AND fine_col > 32))
      {
         Send(what,@MsgSendUser,#message_rsc=room_door_was_opened);
         Send(what,@WaveSendUser,#wave_rsc=vrDoor_Sound);

         Send(SYS,@UtilGoNearSquare,#what=what,
              #where=Send(SYS,@FindRoomByNum,#num=RID_TOS_ARENA2),
              #new_row=22,#new_col=35,#new_angle=Send(what,@GetAngle));

         return TRUE;
      }

      propagate;
   }

   CheckBehindBars()
   {
      local i;

      foreach i in Send(poWatcher,@GetCombatantList)
      {
         if Send(i,@GetCol) < 7
         {
            Send(self,@Teleport,#what=i,#goinplay=TRUE);
         }
      }

      return;
   }

   CreatePeriodicSounds()
   {
      plPeriodic_sounds = [ wind1_sound_tosarena ];
      pbPeriodic_sound_random_location = TRUE;

      propagate;
   }

   ArenaRealDeath()
   "Admins can activate real death in TosArena."
   {
      return pbRealdeath;
   }

   StartSnow(bOnGround=TRUE)
   {
      // Check if we can have weather effects here.
      if NOT pbWeatherEffects
      {
         return;
      }

      // If there's a sandstorm weather effect here, clear it.
      if Send(self,@CheckRoomFlag,#flag=ROOM_SANDSTORM)
      {
         Send(self,@EndSandstorm);
      }

      if bOnGround
         AND pbSnowGroundTexture
      {
         Send(self,@ChangeTexture,#id=0,#new_texture=61015,#flags=CTF_FLOOR);
         Send(self,@ChangeTexture,#id=1,#new_texture=61015,#flags=CTF_FLOOR);
         Send(self,@ChangeTexture,#id=2,#new_texture=61015,#flags=CTF_FLOOR);
         Send(self,@ChangeTexture,#id=3,#new_texture=61015,#flags=CTF_FLOOR);
         Send(self,@ChangeTexture,#id=4,#new_texture=61015,#flags=CTF_FLOOR);
         Send(self,@ChangeTexture,#id=5,#new_texture=61015,#flags=CTF_FLOOR);
         Send(self,@ChangeTexture,#id=6,#new_texture=61015,#flags=CTF_FLOOR);
         Send(self,@ChangeTexture,#id=7,#new_texture=61015,#flags=CTF_FLOOR);
         Send(self,@ChangeTexture,#id=15,#new_texture=61016,#flags=CTF_BELOWWALL);
      }

      Send(self,@SetRoomFlag,#flag=ROOM_SNOWING,#value=TRUE);
      Send(self,@WeatherChanged);

      return;
   }

   EndSnow(override=FALSE)
   "Use override if rooms have manually placed textures."
   {
      if Send(self,@CheckRoomFlag,#flag=ROOM_SNOWING)
      {
         Send(self,@SetRoomFlag,#flag=ROOM_SNOWING,#value=FALSE);
         Send(self,@WeatherChanged);
      }

      if pbSnowGroundTexture
         OR override
      {
         Send(self,@RemoveTextureChange,#id=0);
         Send(self,@RemoveTextureChange,#id=1);
         Send(self,@RemoveTextureChange,#id=2);
         Send(self,@RemoveTextureChange,#id=3);
         Send(self,@RemoveTextureChange,#id=4);
         Send(self,@RemoveTextureChange,#id=5);
         Send(self,@RemoveTextureChange,#id=6);
         Send(self,@RemoveTextureChange,#id=7);
         Send(self,@RemoveTextureChange,#id=15);
      }

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
