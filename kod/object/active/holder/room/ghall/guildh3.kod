// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


//////////////////////////////////////////////////////////////////////////////////
GuildHall3 is Guildhall

constants:

   BRIDGE = 2
   ENTRANCE = 1

   BRIDGE_HIGH = 654
   BRIDGE_LOW = 500

   DOOR_CLOSED = 500
   DOOR_OPEN = 580

   LIFT_DELAY = 10000              // ten seconds

   include blakston.khd

resources:

   include guildh3.lkod

   room_name_guildhall3 = "The Den of Shadows"
   room_guildhall3 = guildh3.roo

classvars:

   vrName = room_name_guildhall3

   viNews_row = 6
   viNews_col = 16
   viNews_finerow = 48
   viNews_finecol = 48

   viTeleport_row = 5
   viTeleport_col = 4

   viFoyer_north = 1
   viFoyer_south = 8
   viFoyer_west = 1
   viFoyer_east = 7

   viLever_row = 10
   viLever_col = 5
   viLever_finerow = 0
   viLever_finecol = 0

   viInner_teleport_row = 12
   viInner_teleport_col = 16

   viQuality = 8
   viTerrain_type = TERRAIN_CAVES | TERRAIN_GUILDHALL | TERRAIN_RIVER
   viSeconds_til_close = 16

properties:

   prRoom = room_guildhall3
   piRoom_num = RID_GUILDH3

   piBaseLight = LIGHT_NICE

   ptEntrance = $
   ptBridge = $

messages:

   Constructor()
   {
      plGuild_doors = [ [ 5,7] ];

      // This is a box containing the guild door, used
      // for removing players from it when it closes.
      plEntrance = [ 506, 593, 787, 812 ];

      propagate;
   }

   Delete()
   {
      if ptBridge <> $
      {
         DeleteTimer(ptBridge);
         ptBridge=$;
      }

      if ptEntrance <> $
      {
         DeleteTimer(ptEntrance);
         ptEntrance = $;
      }

      propagate;
   }

   CreateStandardExits()
   {
      plExits = $;

      /// TO JALA'S SONG
      plExits = Cons([ 5, 1, RID_F8, 6, 47, ROTATE_NONE ],plExits);
      plExits = Cons([ 25, 1, RID_F8, 26, 49, ROTATE_NONE ],plExits);

      propagate;
   }

   SomethingTryGo(what=$,row=$,col=$)
   {
      if row = 5 and col = 8
      {
         Send(self,@OpenEntranceDoor);

         return TRUE;
      }

      propagate;
   }

   OpenEntranceDoor()
   {
      if ptEntrance = $
      {
         Send(self,@TimeStampDoor);
         Send(self,@SetSector,#sector=ENTRANCE,#animation=ANIMATE_CEILING_LIFT,
               #height=DOOR_OPEN,#speed=50);
         ptEntrance = CreateTimer(self,@CloseEntranceDoor,LIFT_DELAY);
      }

      Send(self,@OpenEntranceDoorSound);

      return;
   }

   CloseEntranceDoor()
   {
      ptEntrance = $;
      Send(self,@SetSector,#sector=ENTRANCE,#animation=ANIMATE_CEILING_LIFT,
            #height=DOOR_CLOSED,#speed=50);
      Send(self,@CloseEntranceDoorSound);

      // We now propagate this to handle removing players from the door,
      // and so the door can still be entered while it is closing.
      propagate;
   }

   OpenSecretDoor()
   {
      if ptBridge = $
      {
         Send(self,@SetSector,#sector=BRIDGE,#animation=ANIMATE_FLOOR_LIFT,
               #height=BRIDGE_LOW,#speed=16);
         ptBridge=CreateTimer(self,@CloseSecretDoor,LIFT_DELAY);
         Send(self,@OpenSecretDoorSound);
      }

      return;
   }

   CloseSecretDoor()
   {
      ptBridge = $;
      Send(self,@SetSector,#sector=BRIDGE,#animation=ANIMATE_FLOOR_LIFT,
            #height=BRIDGE_HIGH,#speed=16);
      Send(self,@CloseSecretDoorSound);

      return;
   }

   CreateStandardObjects()
   {
      Send(self,@NewHold,#what=Create(&Table),
            #new_row=13,#new_col=14,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&Table),
            #new_row=14,#new_col=14,#fine_row=32,#fine_col=0);

      Send(self,@NewHold,#what=Create(&Brazier),
            #new_row=7,#new_col=4,#fine_row=32,#fine_col=24);
      Send(self,@NewHold,#what=Create(&Brazier),
            #new_row=3,#new_col=4,#fine_row=32,#fine_col=24);
      Send(self,@NewHold,#what=Create(&Brazier),
            #new_row=4,#new_col=7,#fine_row=16,#fine_col=56);
      Send(self,@NewHold,#what=Create(&Brazier),
            #new_row=6,#new_col=7,#fine_row=48,#fine_col=56);
      Send(self,@NewHold,#what=Create(&Brazier),
            #new_row=3,#new_col=12,#fine_row=32,#fine_col=32);
      Send(self,@NewHold,#what=Create(&Brazier),
            #new_row=9,#new_col=9,#fine_row=32,#fine_col=32);
      Send(self,@NewHold,#what=Create(&Brazier),
            #new_row=9,#new_col=12,#fine_row=32,#fine_col=0);
      Send(self,@NewHold,#what=Create(&Brazier),
            #new_row=15,#new_col=19,#fine_row=32,#fine_col=0);
      Send(self,@NewHold,#what=Create(&Brazier),
            #new_row=22,#new_col=8,#fine_row=0,#fine_col=32);
      Send(self,@NewHold,#what=Create(&Brazier),
            #new_row=23,#new_col=18,#fine_row=0,#fine_col=32);
      Send(self,@NewHold,#what=Create(&Brazier),
            #new_row=17,#new_col=6,#fine_row=40,#fine_col=8);
      Send(self,@NewHold,#what=Create(&Brazier),
            #new_row=14,#new_col=6,#fine_row=24,#fine_col=8);
      Send(self,@NewHold,#what=Create(&Brazier),
            #new_row=29,#new_col=17,#fine_row=32,#fine_col=0);

      Send(self,@NewHold,#what=Create(&Chest),
            #new_row=29,#new_col=9,#fine_row=32,#fine_col=0,
            #new_angle=ANGLE_NORTH_EAST);
      Send(self,@NewHold,#what=Create(&Chest),
            #new_row=27,#new_col=9,#fine_row=32,#fine_col=0,
            #new_angle=ANGLE_NORTH_EAST);
      Send(self,@NewHold,#what=Create(&Chest),
            #new_row=26,#new_col=9,#fine_row=32,#fine_col=0,
            #new_angle=ANGLE_SOUTH_EAST);

      propagate;
   }

end
////////////////////////////////////////////////////////////////////////////////
