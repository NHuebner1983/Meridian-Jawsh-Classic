// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
GuildHall10 is GuildHall

constants:

   include blakston.khd

   DOOR_DELAY = 7000
   SECRET_DELAY = 15000

   ENTRANCE_DOOR = 1
   BAR_DOOR = 2
   NEWS_DOOR = 3
   EAST_DOOR = 4
   WEST_DOOR = 5
   NORTH_DOOR = 6

   SECRET_DOOR = 7
   SECRET_WALL = 9

   MAZE_FLOOR = 10

resources:

   include guildh10.lkod

   room_name_guildhall10 = "Jaarba's Abode"
   room_guildhall10 = guildh10.roo

   guildhall10_sound = down2.ogg

classvars:

   vrName = room_name_guildhall10

   viQuality = 5

   viNews_row = 12
   viNews_col = 4
   viNews_finerow = 32
   viNews_finecol = 24

   viFoyer_north = 25          ///// Foyer needs to be reset
   viFoyer_south = 33
   viFoyer_east = 23
   viFoyer_west = 13

   viLever_row = 2
   viLever_col = 14
   viLever_fine_row = 0
   viLever_fine_col = 16

   viTeleport_row = 19
   viTeleport_col = 11

   viInner_teleport_row = 6
   viInner_teleport_col = 16
   viSeconds_til_close = 8

properties:

   prRoom = room_guildhall10
   piRoom_num = RID_GUILDH10

   piBaseLight = LIGHT_NICE
   piOutside_factor = 0

   ptNorthDoor = $
   ptEastDoor = $
   ptWestDoor = $
   ptEntrance = $
   ptSecretDoor = $
   ptNewsDoor = $
   ptBarDoor = $

messages:

   Constructor()
   {
      plGuild_doors = [[17,11]];

      // This is a box containing the guild door, used
      // for removing players from it when it closes.
      plEntrance = [ 1703, 1723, 1100, 1175 ];

      propagate;
   }

   CreateStandardObjects()
   {
      Send(self,@NewHold,#what=Create(&Chest),
            #new_row=15,#new_col=4,#fine_row=32,#fine_col=0,
            #new_angle=ANGLE_EAST);

      Send(self,@NewHold,#what=Create(&Chest),
            #new_row=15,#new_col=5,#fine_row=32,#fine_col=0,
            #new_angle=ANGLE_EAST);

      Send(self,@NewHold,#what=Create(&Chest),
            #new_row=15,#new_col=7,#fine_row=32,#fine_col=0,
            #new_angle=ANGLE_EAST);

      Send(self,@NewHold,#what=Create(&Table),
            #new_row=12,#new_col=15,#fine_row=0,#fine_col=32);
      Send(self,@NewHold,#what=Create(&Table),
            #new_row=12,#new_col=17,#fine_row=0,#fine_col=0);
      Send(self,@NewHold,#what=Create(&Table),
            #new_row=13,#new_col=17,#fine_row=32,#fine_col=0);

      propagate;
   }

   CreateStandardExits()
   {
      plExits = $;

      /// TO TOWN
      plExits = Cons([ 20, 11, RID_JASPER, 30, 61, ROTATE_NONE ],plExits);

      propagate;
   }

   InFoyer(who=$,iRow=$,iCol=$,iFineRow=$,iFineCol=$)
   {
      if who <> $
      {
         if Send(who,@GetOwner) <> self
         {
            return FALSE;
         }

         iRow = Send(who,@GetRow);
         iCol = Send(who,@GetCol);
         iFineCol = Send(who,@GetFineCol);
         iFineRow = Send(who,@GetFineRow);
      }

      if iRow > 17 // South part
         OR (iRow = 17 AND iFineRow > 16) // South part
         OR iCol < 3 // West part
         OR (iCol = 3 AND iFineCol < 32) // West part
         OR iCol > 19 // East part
         OR (iCol = 19 AND iFineCol > 16) // East part
      {
         return TRUE;
      }

      // North part
      if iRow = 3 or iRow = 4
      {
         if iCol < 8 OR iCol > 14
         {
            return TRUE;
         }
         if iCol = 8 AND iFineCol < 48
         {
            return TRUE;
         }
         if iCol = 14 AND iFineCol > 16
         {
            return TRUE;
         }
      }

      return FALSE;
   }

   OpenSecretDoor()
   {
      if ptSecretDoor = $
      {
         Send(self,@SomethingWaveRoom,#wave_rsc=guildhall10_sound);
         Send(self,@SetSector,#sector=SECRET_DOOR,#animation=ANIMATE_CEILING_LIFT,
               #height=80,#speed=80);
         Send(self,@SetSector,#sector=SECRET_WALL,#animation=ANIMATE_CEILING_LIFT,
               #height=80,#speed=80);
         Send(self,@OpenSecretDoorSound);
         ptSecretDoor = CreateTimer(self,@CloseSecretDoor,SECRET_DELAY);
      }

      return;
   }

   CloseSecretDoor()
   {
      ptSecretDoor = $;
      Send(self,@SetSector,#sector=SECRET_DOOR,#animation=ANIMATE_CEILING_LIFT,
            #height=0,#speed=50);
      Send(self,@SetSector,#sector=SECRET_WALL,#animation=ANIMATE_CEILING_LIFT,
            #height=32,#speed=50);
      Send(self,@CloseSecretDoorSound);

      return;
   }

   SomethingTryGo(row=$,col=$,what=$)
   {
      if (row = 7 OR row = 8)
         AND (col = 11)
         AND ptNorthDoor = $
      {
         Send(self,@SetSector,#sector=NORTH_DOOR,#animation=ANIMATE_CEILING_LIFT,
               #height=72,#speed=80);
         ptNorthDoor = CreateTimer(self,@CloseNorthDoor,DOOR_DELAY);

         return TRUE;
      }

      if (row = 9 OR row = 10)
         AND (col = 13 OR col = 14 OR col = 15)
         AND ptEastDoor = $
      {
         Send(self,@SetSector,#sector=EAST_DOOR,#animation=ANIMATE_CEILING_LIFT,
               #height=72,#speed=80);
         ptEastDoor = CreateTimer(self,@CloseEastDoor,DOOR_DELAY);

         return TRUE;
      }

      if (row = 9)
         AND (col = 7 OR col = 8 OR col = 9)
         AND ptWestDoor = $
      {
         Send(self,@SetSector,#sector=WEST_DOOR,#animation=ANIMATE_CEILING_LIFT,
               #height=72,#speed=80);
         ptWestDoor = CreateTimer(self,@CloseWestDoor,DOOR_DELAY);

        return TRUE;
      }

      if row = 16
         AND col = 11
      {
         Send(self,@OpenEntranceDoor);

         return TRUE;
      }

      if (row = 12 OR row = 13)
         AND (col = 13 OR col = 14 OR col = 15)
         AND ptBarDoor = $
      {
         Send(self,@SetSector,#sector=BAR_DOOR,#animation=ANIMATE_CEILING_LIFT,
               #height = 72,#speed=80);
         ptBarDoor = CreateTimer(self,@CloseBarDoor,DOOR_DELAY);

         return TRUE;
      }

      if (row = 12 OR row = 13)
         AND (col = 7 OR col = 8 OR col = 9)
         AND ptNewsDoor = $
      {
         Send(self,@SetSector,#sector=NEWS_DOOR,#animation=ANIMATE_CEILING_LIFT,
               #height = 72,#speed=80);
         ptNewsDoor = CreateTimer(self,@CloseNewsDoor,DOOR_DELAY);

         return TRUE;
      }

      propagate;
   }

   OpenEntranceDoor()
   {
      if ptEntrance = $
      {
         Send(self,@TimeStampDoor);
         Send(self,@SetSector,#sector=ENTRANCE_DOOR,#animation=ANIMATE_CEILING_LIFT,
               #height=72,#speed=80);
         Send(self,@OpenEntranceDoorSound);
         ptEntrance = CreateTimer(self,@CloseEntranceDoor,DOOR_DELAY);
      }

      return;
   }

   CloseEntranceDoor()
   {
      Send(self,@SetSector,#sector=ENTRANCE_DOOR,#animation=ANIMATE_CEILING_LIFT,
            #height=0,#speed=50);
      Send(self,@CloseEntranceDoorSound);

      // We now propagate this to handle removing players from the door,
      // and so the door can still be entered while it is closing.
      propagate;
   }

   CloseNorthDoor()
   {
      Send(self,@SetSector,#sector=NORTH_DOOR,#animation=ANIMATE_CEILING_LIFT,
            #height=0,#speed=50);
      ptNorthDoor = $;

      return;
   }

   CloseEastDoor()
   {
      Send(self,@SetSector,#sector=EAST_DOOR,#animation=ANIMATE_CEILING_LIFT,
            #height=0,#speed=50);
      ptEastDoor = $;

      return;
   }

   CloseWestDoor()
   {
      Send(self,@SetSector,#sector=WEST_DOOR,#animation=ANIMATE_CEILING_LIFT,
          #height=0,#speed=50);
      ptWestDoor = $;

      return;
   }

   CloseBarDoor()
   {
      Send(self,@SetSector,#sector=BAR_DOOR,#animation=ANIMATE_CEILING_LIFT,
            #height=0,#speed=50);
      ptBarDoor = $;

      return;
   }

   CloseNewsDoor()
   {
      Send(self,@SetSector,#sector=NEWS_DOOR,#animation=ANIMATE_CEILING_LIFT,
            #height=0,#speed=50);
      ptNewsDoor = $;

      return;
   }

   RaiseMaze()
   {
      Send(self,@SomethingWaveRoom,#wave_rsc=guildhall2_sound);
      Send(self,@SetSector,#sector=MAZE_FLOOR,#animation=ANIMATE_FLOOR_LIFT,
            #height=48,#speed=16);

     return;
   }

   LowerMaze()
   {
      Send(self,@SomethingWaveRoom,#wave_rsc=guildhall2_sound);
      Send(self,@SetSector,#sector=MAZE_FLOOR,#animation=ANIMATE_FLOOR_LIFT,
            #height=0,#speed=16);

     return;
   }

   DefensesDown()
   {
      Send(self,@LowerMaze);

      propagate;
   }

   DefensesUp()
   {
      Send(self,@RaiseMaze);

      propagate;
   }

   ClaimGuildHall()
   {
      Send(self,@RaiseMaze);

      propagate;
   }

   ResetGuildHall()
   {
      Send(self,@RaiseMaze);

      propagate;
   }

   ConquerTimer()
   {
      Send(self,@RaiseMaze);

      propagate;
   }

   Delete()
   "Be sure all door timers are deleted."
   {
      if ptNorthDoor <> $
      {
         DeleteTimer(ptNorthDoor);
         ptNorthDoor = $;
      }
      if ptEastDoor <> $
      {
         DeleteTimer(ptEastDoor);
         ptEastDoor = $;
      }
      if ptWestDoor <> $
      {
         DeleteTimer(ptWestDoor);
         ptWestDoor = $;
      }
      if ptEntrance <> $
      {
         DeleteTimer(ptEntrance);
         ptEntrance = $;
      }
      if ptSecretDoor <> $
      {
         DeleteTimer(ptSecretDoor);
         ptSecretDoor = $;
      }
      if ptBarDoor <> $
      {
         DeleteTimer(ptBarDoor);
         ptBarDoor = $;
      }
      if ptNewsDoor <> $
      {
         DeleteTimer(ptNewsDoor);
         ptNewsDoor = $;
        }

      propagate;
   }

end
////////////////////////////////////////////////////////////////////////////////
