// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


//////////////////////////////////////////////////////////////////////////////////////
GuildHall16 is GuildHall

constants:
   
   LIFT_DELAY = 13000

   LEVER_REACTIVATE_DELAY = 2000    // 2 seconds

   TREASURE_ROW_MIN = 9
   TREASURE_ROW_MAX = 14
   TREASURE_COL_MIN = 5
   TREASURE_COL_MAX = 10
       
   include blakston.khd

resources:

   room_name_GuildHall16 = "The Symbol of Dawn"
   room_GuildHall16 = GuildHall16.roo

   GuildHall16_music = forest.ogg

classvars:

   vrName = room_name_GuildHall16

   viTeleport_row = 15
   viTeleport_col = 35

   viNews_row = 8
   viNews_col = 19
   viNews_finerow = 60
   viNews_finecol = 56

   viLever_row = 2
   viLever_col = 13
   viLever_fine_row = 30
   viLever_fine_col = 56

   viQuality = 7

   viInner_teleport_row = 25
   viInner_teleport_col = 15
   viSeconds_til_close = 24

   vbChestInFoyer = TRUE

   viTerrain_type = TERRAIN_GUILDHALL

properties:

   prMusic = GuildHall16_music

   prRoom = room_GuildHall16
   piRoom_num = RID_GUILDH16

   piBaseLight = LIGHT_NICE

   ptSecret = $
   ptEntrance = $

   plChestArea1 = 8

messages:

   Constructor()
   {
      plGuild_doors = [[16,24],[17,24]];

      propagate;
   }

   CreateStandardExits()
   {
      plExits = $;

      plExits = Cons([ 32, 35, RID_BAR_SOUTH, 10, 47, SET_ANGLE_WEST ],plExits);

      propagate;
   }

   Delete()
   {
      if ptSecret <> $ {
         DeleteTimer(ptSecret);
         ptSecret=$;
      }
      if ptEntrance <> $ {
         DeleteTimer(ptEntrance);
         ptEntrance = $;
      }

      propagate;
   }

   InFoyer(who=$)
   {
      local iSectorID;

      if who <> $
      {
         if Send(who,@GetOwner) <> self
         {
            return FALSE;
         }
      }

      iSectorID = Send(who,@GetSectorIDAtObject);

      if ((iSectorID = 10))
      {
         return TRUE;
      }

      return FALSE;
   }

   SomethingTryGo(what=$, row=$,  col = $)
   {
      if ((row = 12) OR (row = 13) OR (row = 14) )
         AND ((col = 31) OR (col = 32) OR (col = 33))
      {
         Send(self,@OpenEntranceDoor);

         return TRUE;
      }

      if (poGuild_Owner=$)
         AND (row=19)
         AND ((col=13) OR (col=14) OR (col=15))
      {
         Send(self,@OpenSecretDoor);
      }

      propagate;
   }

   OpenEntranceDoor()
   {
      if ptEntrance = $
      {
         Send(self,@TimeStampDoor);
         Send(self,@SetSector,#sector=1,
               #animation=ANIMATE_CEILING_LIFT,
               #height=85,#speed=50);
         ptEntrance=CreateTimer(self,@CloseEntranceDoor,LIFT_DELAY);
         Send(self,@OpenEntranceDoorSound);
      }

      return;
   }

   CloseEntranceDoor()
   {
      Send(self,@SetSector,#sector=1,
            #animation=ANIMATE_CEILING_LIFT,
            #height=8,#speed=120);
      Send(self,@CloseEntranceDoorSound);

      // We now propagate this to handle removing players from the door,
      // and so the door can still be entered while it is closing.
      propagate;
   }


   OpenSecretDoor()
   {
      if ptSecret = $
      {
         Send(self,@SetSector,#sector=2,
               #animation=ANIMATE_FLOOR_LIFT,
               #height=0,#speed=16);
         Send(self,@SetSector,#sector=3,
               #animation=ANIMATE_FLOOR_LIFT,
               #height=0,#speed=16);
         Send(self,@SetSector,#sector=4,
               #animation=ANIMATE_FLOOR_LIFT,
               #height=0,#speed=16);
         ptSecret = CreateTimer(self,@CloseSecretDoor,LIFT_DELAY);
         Send(self,@OpenSecretDoorSound);
      }

      return;
   }

   CloseSecretDoor()
   {
      ptSecret = $;
      Send(self,@SetSector,#sector=2,
            #animation=ANIMATE_FLOOR_LIFT,
            #height=76,#speed=16);
      Send(self,@SetSector,#sector=3,
            #animation=ANIMATE_FLOOR_LIFT,
            #height=108,#speed=16);
      Send(self,@SetSector,#sector=4,
            #animation=ANIMATE_FLOOR_LIFT,
            #height=116,#speed=16);
      Send(self,@CloseSecretDoorSound);

      return;
   }

   CreateStandardObjects()
   {
      // Create the chest.
      Send(self,@NewHold,#what=Create(&Chest),
            #new_row=12,#new_col=5,#new_angle=ANGLE_NORTH);
      Send(self,@NewHold,#what=Create(&Chest),
            #new_row=10,#new_col=5,#new_angle=ANGLE_NORTH);
      Send(self,@NewHold,#what=Create(&Chest),
            #new_row=9,#new_col=6,#new_angle=ANGLE_NORTH);
      Send(self,@NewHold,#what=Create(&Chest),
            #new_row=9,#new_col=8,#new_angle=ANGLE_NORTH);

      propagate;
   }

   ReqUseGuildChest(who=$)
   {
      local oOwner;

      if who = $
      {
         return FALSE;
      }
      
      oOwner = Send(who,@GetOwner);
      
      if oOwner <> self
      {
         Debug("ALERT!  ",Send(who,@GetTrueName),who,
               "tried to use Guild Hall chest in GH ",
               Send(self,@GetName)," player is in room ",
               Send(oOwner,@GetName));

         return FALSE;
      }
      
      if Send(self,@IsUserInArea,#who=who,#lArea=plChestArea1)
      {
         return TRUE;
      }

      // If they fail the above check, they're probably too far away.
      Debug("ALERT!  ",Send(who,@GetTrueName),who,
            "tried to use Guild Hall chest in GH ",
            Send(self,@GetName)," player coordinates ",
            Send(who,@GetRow),Send(who,@GetCol),
            Send(who,@GetFineRow),Send(who,@GetFineCol));

      return FALSE;
   }

end
////////////////////////////////////////////////////////////////////////////////
