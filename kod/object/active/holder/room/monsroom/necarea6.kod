// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


///////////////////////////////////////////////////////////////////////////////////
Necropolis6 is MonsterRoom

constants:

   include blakston.khd

   GIANT_ROW = 8
   GIANT_COL = 22
   GIANT_FINEROW = 16
   GIANT_FINECOL = 16

   // 1 minute for testing
   HOUR_MILLI = 60000

   // Gate sector IDs
   GATE_1 = 1
   GATE_2 = 2
   GATE_3 = 3

   // Gated sector IDs
   AREA_1 = 4
   AREA_2 = 5
   AREA_3 = 6

   // Door info.
   DOOR_OPEN_SPEED  = 20
   DOOR_CLOSE_SPEED = 60
   DOOR_CLOSE_FAST_SPEED = 200
   DOOR_HEIGHT_FLOOR = 360
   DOOR_HEIGHT_CEILING = 504

   // Gates one and two stay open for 30 seconds.
   DOOR_CLOSE_TIMER = 30000
   // Gate three stays open for 30 seconds
   DOOR_CLOSE_TIMER_LAST = 30000

   // Special blink coords for area 2 and 3.
   BLINK2_ROW = 17
   BLINK2_COL = 25

   BLINK3_ROW = 6
   BLINK3_COL = 30

resources:

   room_name_Necropolis6 = "Maze of The Mimic"
   room_Necropolis6 = necarea6.roo
   Necropolis6_music = nec02.ogg

   Necropolis6_loop = necloop4.ogg

   Necropolis6_open_sound = doordown.ogg
   Necropolis6_close_sound = doorrsup.ogg

   Necropolis6_no_earthquake = \
      "This place looks far too unstable to risk an earthquake.  "
      "You wisely decide to halt your casting."
   Necropolis6_shalspell_blocked = \
      "You begin the incantation for your spell, but the dark magic "
      "present here seems to sap all power from your words."
   Necropolis6_necro_spawn = \
      "~kThe mimic whispers, \"~r~IYour efforts are futile, the war "
      "will come to your lands no matter how much you fight.  Die, and join "
      "us instead!~k~I\""

   Necropolis6_hurry_gate = \
      "~kA ghostly voice whispers, \"~r~IHurry through the gate! You only have a moment before it closes!~k~I\""

   Necropolis6_watch_out = \
      "~kA ghostly voice whispers, \"~r~IThe mimic is a powerful creature. I cannot help you. Get through the gate quickly and prepare yourself.~k~I\""

   Necropolis6_hurry_leave = \
      "~kA ghostly voice whispers, \"~r~IPlease take part of my mana, it's all I can give you for avenging me. I have stored what mystical energy I have left in a mana node. You can find it in the corner as you leave this room.~k~I\""

classvars:

   vrName = room_name_Necropolis6

   viTeleport_row = 27
   viTeleport_col = 11

   viTerrain_type = TERRAIN_NECROPOLIS

properties:

   prRoom = room_Necropolis6
   piRoom_num = RID_NECROAREA6

   piBaseLight = LIGHT_MIN
   piOutside_factor = 0

   piGen_time = 25000
   piGen_percent = 100

   piInit_count_min = 7
   piInit_count_max = 9

   piMonster_count_max = 25

   prMusic = Necropolis6_music

   ptAreaThree = $

   // Handle our own mob generation.
   pbGenerateMonsters = FALSE
   plSpawnOne = $
   plSpawnTwo = $
   plSpawnThree = $

   ptGateOne = $
   ptGateTwo = $
   ptGateThree = $

    // Spawns this % of the time.
   piNecroSpawnRate = 100

messages:

   #region Create/Delete
   Constructed()
   {
      // No inherent spawn.
      plMonsters = $;
      plGenerators = $;

      // Coordinates for daemon skeletons.
      plSpawnOne = [ [19, 9], [19, 13], [17, 10], [13, 10], [6, 10] ];
      plSpawnTwo = [ [16, 15], [17, 21], [18, 32], [14, 29], [14, 25] ];
      plSpawnThree = [ [7, 29], [8, 25], [7, 31] ];

      plLooping_sounds = [[ Necropolis6_loop, 0, 0, 200, 100 ]];

      propagate;
   }

   CreateStandardExits()
   {
      plExits = $;

      // To hallway
      plExits = Cons([ 32, 10, RID_NECROAREA3, 6, 20, ROTATE_NONE ],plExits);
      plExits = Cons([ 32, 11, RID_NECROAREA3, 6, 20, ROTATE_NONE ],plExits);
      plExits = Cons([ 32, 12, RID_NECROAREA3, 6, 20, ROTATE_NONE ],plExits);

      // To INSIDE
      plExits = Cons([ 22, 10, RID_NECROAREA6, 20, 11, ROTATE_NONE ],plExits);
      plExits = Cons([ 22, 11, RID_NECROAREA6, 20, 11, ROTATE_NONE ],plExits);
      plExits = Cons([ 22, 12, RID_NECROAREA6, 20, 11, ROTATE_NONE ],plExits);

      plExits = Cons([ 21, 10, RID_NECROAREA6, 22, 11, ROTATE_NONE ],plExits);
      plExits = Cons([ 21, 11, RID_NECROAREA6, 22, 11, ROTATE_NONE ],plExits);
      plExits = Cons([ 21, 12, RID_NECROAREA6, 22, 11, ROTATE_NONE ],plExits);

      propagate;
   }

   CreateStandardObjects()
   {
      // BRAX NODE
      Send(self,@NewHold,#what=Create(&ManaNode,#node_num=NODE_BRAX),
           #new_row=3,#new_col=35,#fine_row=23,#fine_col=7,
           #new_angle=ANGLE_WEST);

      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_NECSLIME),
         #new_row=5,#new_col=19,#fine_row=48,#fine_col=16,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_NECSLIME),
         #new_row=2,#new_col=17,#fine_row=32,#fine_col=0,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_NECSLIME),
         #new_row=4,#new_col=8,#fine_row=32,#fine_col=32,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_NECSLIME),
         #new_row=12,#new_col=19,#fine_row=48,#fine_col=8,#angle=ANGLE_EAST);
 
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_NECSLIME),
         #new_row=18,#new_col=8,#fine_row=32,#fine_col=0,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_NECSLIME),
         #new_row=5,#new_col=10,#fine_row=48,#fine_col=32,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_NECSLIME),
         #new_row=3,#new_col=29,#fine_row=16,#fine_col=0,#angle=ANGLE_EAST);

      Send(self,@NewHold,#what=Create(&Skull),
         #new_row=8,#new_col=15,#fine_row=0,#fine_col=0,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_HALFSKULL),
         #new_row=17,#new_col=14,#fine_row=0,#fine_col=16,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&Skull),
         #new_row=15,#new_col=21,#fine_row=48,#fine_col=32,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_HALFSKULL),
         #new_row=15,#new_col=27,#fine_row=0,#fine_col=16,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&Skull),
         #new_row=14,#new_col=32,#fine_row=0,#fine_col=16,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_HALFSKULL),
         #new_row=11,#new_col=32,#fine_row=32,#fine_col=32,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&Skull),
         #new_row=11,#new_col=31,#fine_row=32,#fine_col=32,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_HALFSKULL),
         #new_row=7,#new_col=27,#fine_row=0,#fine_col=16,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&Skull),
         #new_row=8,#new_col=28,#fine_row=48,#fine_col=16,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_HALFSKULL),
         #new_row=7,#new_col=22,#fine_row=32,#fine_col=48,#angle=ANGLE_EAST);

      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_HALFSKULL),
         #new_row=9,#new_col=11,#fine_row=0,#fine_col=0,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&Skull),
         #new_row=11,#new_col=12,#fine_row=0,#fine_col=32,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_HALFSKULL),
         #new_row=14,#new_col=11,#fine_row=32,#fine_col=32,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&Skull),
         #new_row=16,#new_col=11,#fine_row=32,#fine_col=0,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_HALFSKULL),
         #new_row=18,#new_col=13,#fine_row=32,#fine_col=48,#angle=ANGLE_EAST);

      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_NECTREE4),
         #new_row=27,#new_col=9,#fine_row=0,#fine_col=48,#angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&GlowTree),
         #new_row=22,#new_col=13,#fine_row=48,#fine_col=48,#angle=ANGLE_EAST);

      propagate;
   }

   Delete()
   {
      if (ptAreaThree <> $)
      {
         DeleteTimer(ptAreaThree);
         ptAreaThree = $;
      }

      if (ptGateOne <> $)
      {
         DeleteTimer(ptGateOne);
         ptGateOne = $;
      }

      if (ptGateTwo <> $)
      {
         DeleteTimer(ptGateTwo);
         ptGateTwo = $;
      }

      if (ptGateThree <> $)
      {
         DeleteTimer(ptGateThree);
         ptGateThree = $;
      }

      propagate;
   }
   #endregion Create/Delete

   // Overrides to handle what happens when a user logs on/enters in a
   // particular area, or tries to teleport using blink, or kills something.
   #region Room Overrides
   NewHoldObject(what = $, new_pos = $)
   "If a user drops into one of the zones, make sure there are skeletons "
   "present or a gate open for them to exit."
   {
      local iSectorID;

      if (what = $
         OR new_pos = $
         OR NOT IsClass(what,&User))
      {
         propagate;
      }

      iSectorID = Send(self,@GetSectorIDAtLocation,#row=Nth(new_pos,2),
                        #col=Nth(new_pos,3),#fine_row=Nth(new_pos,4),
                        #fine_col=Nth(new_pos,5));

      // Post so it happens after fully logging in, if user logs into
      // area 2 or 3.
      Post(self,@UserEntryCheck,#who=what,#iSectorID=iSectorID);

      propagate;
   }

   SomethingPhasedIn(what=$)
   {
      Send(self,@UserEntryCheck,#who=what,
            #iSectorID=Send(what,@GetSectorIDAtObject));

      propagate;
   }

   SomethingSpectatedIn(what=$)
   {
      Send(self,@UserEntryCheck,#who=what,
            #iSectorID=Send(what,@GetSectorIDAtObject));

      propagate;
   }

   UserEntryCheck(iSectorID = 0, who = $)
   "User 'who' entered room at 'iSectorID' by logging in, phasing in or being "
   "unspectated.  Check if they should be moved, or if mobs should be made."
   {
      if (who = $)
      {
         return;
      }

      if (iSectorID = AREA_2)
      {
         if (ptGateTwo = $
            AND NOT Send(self,@IsSkeletonInSectorID,#iNum=iSectorID))
         {
            Send(self,@Teleport,#what=who,#foyer=TRUE);
         }
      }
      else if (iSectorID = AREA_3)
      {
         if (ptGateThree = $
            AND NOT Send(self,@IsSkeletonInSectorID,#iNum=iSectorID))
         {
            Send(self,@Teleport,#what=who,#foyer=TRUE);
         }
      }
      else
      {
         // Make sure skeletons exist in first area.
         Send(self,@CreateSkeletons,#bArea=AREA_1);
      }

      return;
   }

   Teleport(what=$,foyer=FALSE,mob_override=FALSE)
   "Admin supported.  Handle users in area 2 or 3, or let Room handle it."
   {
      if (foyer)
      {
         propagate;
      }

      if Send(what,@GetOwner) = self
      {
         switch (Send(what,@GetSectorIDAtObject))
         {
         case AREA_2:
            Send(SYS,@UtilGoNearSquare,#what=what,#where=self,
                  #new_row=BLINK2_ROW,#new_col=BLINK2_COL,
                  #mob_override=mob_override);

            return;
         case AREA_3:
            Send(SYS,@UtilGoNearSquare,#what=what,#where=self,
                  #new_row=BLINK3_ROW,#new_col=BLINK3_COL,
                  #mob_override=mob_override);

            return;
         }
      }

      propagate;
   }

   DestroyDisposable()
   "Don't empty the room if we have a logoff ghost here."
   {
      local i, each_obj;

      foreach i in plActive
      {
         each_obj = First(i);
         if (IsClass(each_obj,&LogoffGhost))
         {
            return;
         }
      }

      propagate;
   }

   SomethingKilled(what = $, victim = $)
   {
      local cClass, i;

      cClass = GetClass(victim);

      if ((cClass = &GiantDaemonSkeleton)
         AND NOT Send(victim,@IsIllusion))
      {
         switch(Send(victim,@GetSectorIDAtObject))
         {
         case AREA_1:
            if (Send(self,@CountSkeletonsInSectorID,#iNum=AREA_1) = 1)
            {
               Send(self,@RaiseGate,#iNum=GATE_1);
            }
            break;
         case AREA_2:
            if (Send(self,@CountSkeletonsInSectorID,#iNum=AREA_2) = 1)
            {
               Send(self,@RaiseGate,#iNum=GATE_2);
            }
            break;
         case AREA_3:
            if (Send(self,@CountSkeletonsInSectorID,#iNum=AREA_3) = 1)
            {
               //if (Random(1,100) <= piNecroSpawnRate)
               //{
                  Send(self,@SpawnNecromancer);
               //}
               //else
               //{
                  //Send(self,@RaiseGate,#iNum=GATE_3);
               //}
            }
            break;
         }
      }
      else if (cClass = &Mimic)
      {
         Send(self,@RaiseGate,#iNum=GATE_3);
      }

      propagate;
   }
   #endregion Room Overrides

   CountSkeletonsInSectorID(iNum=AREA_1)
   "Includes giant daemon skeleton, but not necromancer."
   {
      local i, each_obj, iCount;

      if (iNum < AREA_1
         OR iNum > AREA_3)
      {
         Debug("Invalid sector ID sent to CountHoldingInSectorID: ",iNum);

         return 0;
      }

      iCount = 0;

      foreach i in plActive
      {
         each_obj = First(i);
         if ((IsClass(each_obj,&GiantDaemonSkeleton))
            AND NOT Send(each_obj,@IsIllusion) // No animated mobs etc.
            AND Send(each_obj,@GetSectorIDAtObject) = iNum)
         {
            ++iCount;
         }
      }

      return iCount;
   }

   IsSkeletonInSectorID(iNum=0)
   "Includes giant daemon skeleton and necromancer."
   {
      local i, each_obj, cClass;

      if (iNum < AREA_1
         OR iNum > AREA_3)
      {
         Debug("Invalid sector ID sent to IsSkeletonInSectorID: ",iNum);

         return FALSE;
      }

      foreach i in plActive
      {
         each_obj = First(i);
         cClass = GetClass(each_obj);
         if ((cClass = &GiantDaemonSkeleton
               OR cClass = &Mimic)
            AND NOT Send(each_obj,@IsIllusion) // No animated mobs etc.
            AND Send(each_obj,@GetSectorIDAtObject) = iNum)
         {
            return TRUE;
         }
      }

      return FALSE;
   }

   CreateSkeletons(bArea=0)
   {
      local i;

      // Must be a valid spawn area.
      if (bArea < AREA_1
         OR bArea > AREA_3)
      {
         return;
      }

      // Determine if we have skeletons in this area already.
      if (Send(self,@IsSkeletonInSectorID,#iNum=bArea))
      {
         return;
      }

      // Spawn in this area.
      switch (bArea)
      {
      case AREA_1:
         foreach i in plSpawnOne
         {
            Send(self,@NewHold,#what=Create(&GiantDaemonSkeleton),
               #new_row=First(i),#new_col=Nth(i,2));
         }
         return;
      case AREA_2:
         foreach i in plSpawnTwo
         {
            Send(self,@NewHold,#what=Create(&GiantDaemonSkeleton),
               #new_row=First(i),#new_col=Nth(i,2));
         }
         return;
      case AREA_3:
         foreach i in plSpawnThree
         {
            Send(self,@NewHold,#what=Create(&GiantDaemonSkeleton),
               #new_row=First(i),#new_col=Nth(i,2));
         }
         Send(self,@NewHold,#what=Create(&Mimic),
               #new_row=GIANT_ROW,#new_col=GIANT_COL,
               #fine_row=GIANT_FINEROW,#fine_col=GIANT_FINECOL);
         return;
      }

      return;
   }

   CreateAllSkeletons()
   {
      local i, cClass, each_obj, bAreaOne, bAreaTwo, bAreaThree, bGiantSkel;

      bAreaOne = FALSE;
      bAreaTwo = FALSE;
      bAreaThree = FALSE;
      bGiantSkel = FALSE;

      // Determine if we have skeletons
      foreach i in plActive
      {
         each_obj = First(i);
         cClass = GetClass(each_obj);
         if (cClass = &GiantDaemonSkeleton)
         {
            switch (Send(each_obj,@GetSectorIDAtObject))
            {
               case AREA_1: bAreaOne = TRUE; break;
               case AREA_2: bAreaTwo = TRUE; break;
               case AREA_3: bAreaThree = TRUE; break;
            }
         }
         else if (cClass = &Mimic)
         {
            bGiantSkel = TRUE;
         }
      }

      if (NOT bAreaOne)
      {
         foreach i in plSpawnOne
         {
            Send(self,@NewHold,#what=Create(&GiantDaemonSkeleton),
               #new_row=First(i),#new_col=Nth(i,2));
         }
      }
      if (NOT bAreaTwo)
      {
         foreach i in plSpawnTwo
         {
            Send(self,@NewHold,#what=Create(&GiantDaemonSkeleton),
               #new_row=First(i),#new_col=Nth(i,2));
         }
      }
      if (NOT bAreaThree)
      {
         foreach i in plSpawnThree
         {
            Send(self,@NewHold,#what=Create(&GiantDaemonSkeleton),
               #new_row=First(i),#new_col=Nth(i,2));
         }
      }
      if (NOT bGiantSkel)
      {
         Send(self,@NewHold,#what=Create(&Mimic),
               #new_row=GIANT_ROW,#new_col=GIANT_COL,
               #fine_row=GIANT_FINEROW,#fine_col=GIANT_FINECOL);
      }

      return;
   }

   SpawnNecromancer()
   {
      Send(self,@NewHold,#what=Create(&Minotaur),
            #new_row=GIANT_ROW,#new_col=GIANT_COL,
            #fine_row=GIANT_FINEROW,#fine_col=GIANT_FINECOL);
      Send(self,@SomeoneSaid,#type=SAY_MESSAGE,#string=Necropolis6_necro_spawn,
            #what=self);

      return;
   }

   #region Open/close gates
   RaiseGate(iNum=0)
   {
      // Must be valid gate.
      if (iNum < GATE_1
         OR iNum > GATE_3)
      {
         return;
      }

      if (iNum = GATE_1)
      {
         if (ptGateOne <> $)
         {
            return;
         }
         // Make skeletons in area two.
         Send(self,@CreateSkeletons,#bArea=AREA_2);
         ptGateOne = CreateTimer(self,@CloseGateOne,DOOR_CLOSE_TIMER);
         
         // Hurry, the gate is open.
         Send(self,@SomeoneSaid,#type=SAY_MESSAGE,#string=Necropolis6_hurry_gate,#what=self);
      }
      else if (iNum = GATE_2)
      {
         if (ptGateTwo <> $)
         {
            return;
         }
         // Make skeletons in area three.
         Send(self,@CreateSkeletons,#bArea=AREA_3);
         ptGateTwo = CreateTimer(self,@CloseGateTwo,DOOR_CLOSE_TIMER);
         
         Send(self,@CloseGateOne, #timer=ptGateTwo);

         // Hurry, the gate is open.
         Send(self,@SomeoneSaid,#type=SAY_MESSAGE,#string=Necropolis6_watch_out,#what=self);
      }
      else if (iNum = GATE_3)
      {
         if (ptGateThree <> $)
         {
            return;
         }
         ptGateThree = CreateTimer(self,@CloseGateThree,DOOR_CLOSE_TIMER_LAST);

         Send(self,@CloseGateTwo, #timer=ptGateTwo);
         
         Send(self,@CreateSkeletons,#bArea=AREA_1);

         // Hurry, the gate is open.
         Send(self,@SomeoneSaid,#type=SAY_MESSAGE,#string=Necropolis6_hurry_leave,#what=self);
      }

      Send(self,@SomethingWaveRoom,#wave_rsc=Necropolis6_open_sound);
      Send(self,@SetSector,#sector=iNum,#animation=ANIMATE_CEILING_LIFT,
            #height=DOOR_HEIGHT_CEILING,#speed=DOOR_OPEN_SPEED);

      return;
   }

   CloseGateOne(timer = $)
   {
      if (ptGateOne <> $
         AND ptGateOne <> timer)
      {
         DeleteTimer(ptGateOne);
      }
      ptGateOne = $;

      Send(self,@LowerGate,#iNum=GATE_1);

      Send(self,@CreateSkeletons,#bArea=AREA_1);

      return;
   }

   CloseGateTwo(timer = $)
   {
      if (ptGateTwo <> $
         AND ptGateTwo <> timer)
      {
         DeleteTimer(ptGateTwo);
      }
      ptGateTwo = $;

      Send(self,@LowerGate,#iNum=GATE_2);

      Send(self,@CreateSkeletons,#bArea=AREA_1);
      Send(self,@CreateSkeletons,#bArea=AREA_2);

      return;
   }

   CloseGateThree(timer = $)
   {
      if (ptGateThree <> $
         AND ptGateThree <> timer)
      {
         DeleteTimer(ptGateThree);
      }
      ptGateThree = $;

      Send(self,@LowerGate,#iNum=GATE_3);

      // Create skeletons in area one, start the dungeon again.
      Send(self,@CreateSkeletons,#bArea=AREA_1);

      return;
   }

   LowerGate(iNum=0)
   {
      local i, each_obj;

      if (iNum < GATE_1
         OR iNum > GATE_3)
      {
         return;
      }

      if (iNum = GATE_2
         AND Send(self,@IsAnyUserInSectorID,#iNum=AREA_2))
      {
         // Don't leave users in area 2 with no skeletons.
         Send(self,@CreateSkeletons,#bArea=AREA_2);
      }
      else if (iNum = GATE_3)
      {
         // Teleport users out of area 3 so we can reset the room.
         foreach i in plActive
         {
            each_obj = First(i);
            if (IsClass(each_obj,&User)
               AND Send(each_obj,@GetSectorIDAtObject) = AREA_3)
            {
               Send(self,@Teleport,#what=each_obj,#foyer=TRUE);
            }
         }
      }

      Send(self,@SomethingWaveRoom,#wave_rsc=Necropolis6_close_sound);
      Send(self,@SetSector,#sector=iNum,#animation=ANIMATE_CEILING_LIFT,
            #height=DOOR_HEIGHT_FLOOR,#speed=DOOR_CLOSE_SPEED);

      return;
   }

   LowerAllGates()
   "Lowers all gates quickly, no sound."
   {
      Send(self,@SetSector,#sector=GATE_1,#animation=ANIMATE_CEILING_LIFT,
               #height=DOOR_HEIGHT_FLOOR,#speed=DOOR_CLOSE_FAST_SPEED);
      Send(self,@SetSector,#sector=GATE_2,#animation=ANIMATE_CEILING_LIFT,
               #height=DOOR_HEIGHT_FLOOR,#speed=DOOR_CLOSE_FAST_SPEED);
      Send(self,@SetSector,#sector=GATE_3,#animation=ANIMATE_CEILING_LIFT,
               #height=DOOR_HEIGHT_FLOOR,#speed=DOOR_CLOSE_FAST_SPEED);

      return;
   }
   #endregion Open/close gates

   ReqSpellCast(who = $, oSpell = $, lItems = $)
   {
      if (oSpell = Send(SYS,@FindSpellByNum,#num=SID_EARTHQUAKE))
      {
         Send(who,@MsgSendUser,#message_rsc=Necropolis6_no_earthquake);

         return FALSE;
      }

      if (oSpell = Send(SYS,@FindSpellByNum,#num=SID_FINAL_RITES))
      {
         Send(who,@MsgSendUser,#message_rsc=Necropolis6_shalspell_blocked);

         return FALSE;
      }

      propagate;
   }

   CanHavePlayerPortal()
   {
      // No bypassing gates.
      return FALSE;
   }

end
////////////////////////////////////////////////////////////////////////////////
