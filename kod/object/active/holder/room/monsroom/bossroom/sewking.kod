// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
SewerKingLair is BossRoom

constants:

   include blakston.khd
   DOOR_RESET_TIME = 10000
   SECTOR_DOOR1 = 1
   H_DOOR1_UP =1160
   H_DOOR1_DN =961
   SECTOR_DOOR2 = 2
   H_DOOR2_UP = 1060
   H_DOOR2_DN = 953
   SECTOR_WATERa = 5
   H_WATERa_UP = 780
   H_WATERa_DN = 100
   SECTOR_WATERb = 6
   H_WATERb_UP = 219
   H_WATERb_DN = 100
   SECTOR_WATERc = 7
   H_WATERc_UP = 169
   H_WATERc_DN = 100
   SECTOR_WATERd = 3
   H_WATERd_UP = 949
   H_WATERd_DN = 100
   SECTOR_WATERFALL = 4
   H_WATERFALL_UP = 850
   H_WATERFALL_DN = 100

   DOOR_UP = 1
   DOOR_DN = 0
   DOOR_UP_SPEED = 8
   DOOR_DN_SPEED = 8
   WATER_UP_SPEED = 30
   WATERFALL_DN_SPEED = 4000

   REGION_W=1
   REGION_C=2
   REGION_E=3

   BLINKBOX1_S = 43
   BLINKBOX1_W = 15
   BLINKBOX1_E = 49
   BLINKBOX1_N = 28
   BLINKBOX2_W = 21
   BLINKBOX2_E = 43
   BLINKBOX2_N = 1

   DROWN_COUNTDOWN_TIME = 11500
   DROWN_INTERVAL = 20000
   DROWN_DAMAGE = 40
   DROWNBOX1_S = 28
   DROWNBOX1_W = 24
   DROWNBOX1_E = 41
   DROWNBOX1_N = 18
   DROWNBOX2_W = 33
   DROWNBOX2_N = 16

resources:

   include sewking.lkod

   room_SewerKingLair = sewking.roo
   room_name_SewerKingLair = "The Ancient Smuggler's Crossing"

   SewerKingLair_music = cave.ogg
   SewerKingLair_door_sound = down2.ogg
   SewerKingLair_water_sound = wfall2.ogg
   SewerKingLair_drowning_sound = ouchf2.ogg

   SewerKingLair_lever_desc = \
      "This lever is caked with years' worth of accumulated rust and slime."
   SewerKingLair_drowning = \
      "You gasp for breath in the last half-inch of air left near the "
      "ceiling, taking as much water as air into your lungs. "
      "Maybe the power of Riija could save you from your impending doom?"

   SewerKingLair_jumped_mistake = "~B~r~IYou sense you've made a grave mistake as you fall to your death.~B~r~I"

   SewerKingLair_Signname = "DEADLY CLIFF"
   SewerKingLair_Sign = \
      "WATCH YOUR STEP!"
      "\n\n"
      "As you look down into the Lupogg King's lair, you can see several "
      "rocky areas and shallow water. It's certainly not the best place "
      "to go diving."
      "\n\n"
      "You may think it's a clever idea to jump into the Lupogg King's lair "
      "but this is most certainly a leap to your death. "
      "\n\n"
      "Your corpse will be devoured by the Lupogg King and you may find it "
      "difficult to return to your defiled body."
      "\n\n"
      "---YOU HAVE BEEN WARNED---"
      "\n\n"
      "Sincerely yours, \n"
      "The Barloque & Jasper City Council Safety Board"
      "\n\n"
      
//   sewking_bones_name = "pile of bones"
//   sewking_bones_icon = skelX.bgf
//   sewking_bones_desc = \
//      "These are the splintered, well-gnawed remains of some unlucky, "
//      "and probably unwise, explorer.  You shudder to think of the fate "
//      "that must have befallen this poor soul."

   SewerKingLair_waterfall_sound = wfall2.ogg

classvars:

   vrName = room_name_SewerKingLair

   viTeleport_row = 38
   viTeleport_col = 33
   viTeleport_rowW = 40
   viTeleport_colW = 10
   viTeleport_rowE = 18
   viTeleport_colE = 54

   viTerrain_type = TERRAIN_SEWERS | TERRAIN_LAIR

   viBossResetTime = 1 * 60 * 1000

properties:

   prRoom = room_SewerKingLair
   piRoom_num = RID_SEWER_KING

   piBaseLight = (LIGHT_VERY_DARK + LIGHT_MIN)/2
   piOutside_factor = 0

   piGen_time = 25000
   piGen_percent = 10

   piInit_count_min = 7
   piInit_count_max = 9

   piMonster_count_max = 15

   poDoor1 = $
   poDoor2 = $
   piWaterPosition = DOOR_DN

   poLever1 = $
   poLever2 = $

   ptDrownCountdownTimer = $
   ptDrownIntervalTimer = $

   ptResetEntranceTimer = $
   
   // Jumping to your death, trying to cheat the Lupogg King entrance.
   // A sign warns them, should be funny.
   plJumpers = $
   plJumped = $
   ptCheckJumped = $
   poCheckJumped = $
   
messages:

   Constructor()
   {
      plMonsters = [ [&Lupogg, 100] ];
      plGenerators = [ [11,37], [21,28], [23,31] ];

      poDoor1 = Create(&MovingSector,#SectorRoom=self,#sectorID=SECTOR_DOOR1,
                        #upH=H_DOOR1_UP,#downH=H_DOOR1_DN,#upspeed=DOOR_UP_SPEED,
                        #downspeed=DOOR_DN_SPEED,#toggletime=DOOR_RESET_TIME,
                        #movesound=SewerKingLair_door_sound);

      poDoor2 = Create(&MovingSector,#SectorRoom=self,#sectorID=SECTOR_DOOR2,
                        #upH=H_DOOR1_UP,#downH=H_DOOR1_DN,#upspeed=DOOR_UP_SPEED,
                        #downspeed=DOOR_DN_SPEED,#toggletime=DOOR_RESET_TIME,
                        #movesound=SewerKingLair_door_sound);

      plLooping_sounds = [ [ SewerKingLair_waterfall_sound, 36, 33, 100, 120 ] ];

      propagate;
   }

   SetupBossTemplates()
   {
      plBossTemplate = [ [&LupoggKing, 6, 32] ];

      plHenchmenTemplate =
         [ [&Lupogg, 14,32], [&Lupogg, 7,41], [&Lupogg, 13,26]];

      plBossTreasureTemplate =
         [ [&OfferingKraanan, 11, 50, 29, 45], [&LongBow, 12, 52, 13, 23],
         [&MysticSword, 12, 53, 13, 32], [&DiscipleRobe, 11, 52, 20, 31] ];

      return;
   }

   CreateStandardExits()
   {
      plEdge_exits = $;
      plEdge_Exits = Cons([LEAVE_EAST, RID_BAR_SEWER3, 35, 1, ROTATE_NONE],
                           plEdge_exits);
      plEdge_Exits = Cons([LEAVE_SOUTH, RID_JAS_SEWER3, 2, 19, ROTATE_NONE],
                           plEdge_exits);

      propagate;
   }

   CreateStandardObjects()
   {
      local oObj;

      poLever1 = Create(&Lever,#description=SewerKingLair_lever_desc);
      Send(self,@NewHold,#what=poLever1,#new_row=39,#new_col=13,
            #fine_row=00,#fine_col=32);

      poLever2 = Create(&Lever,#description=SewerKingLair_lever_desc);
      Send(self,@NewHold,#what=poLever2,#new_row=33,#new_col=51,
            #fine_row=00,#fine_col=00);

      Send(self,@NewHold,#what=create(&Skull),#new_row=20,#new_col=36,
            #fine_row=48,#fine_col=00);

      // Cliff back into the pog king lair (deadly jump warning sign)
      oObj = Create(&Sign,#desc=SewerKingLair_Sign,#newbie=TRUE,#name=SewerKingLair_Signname);
      Send(self,@NewHold,#what=oObj,#new_row=12,#new_col=24,
         #fine_row=18,#fine_col=7);

      //Send(self,@NewHold,#what=create(&Skull),#new_row=20,#new_col=36,#fine_row=00,#fine_col=00);
      //Send(self,@NewHold,#what=create(&Skull),#new_row=20,#new_col=36,#fine_row=16,#fine_col=00);
      //Send(self,@NewHold,#what=create(&Skull),#new_row=20,#new_col=36,#fine_row=32,#fine_col=00);
      //Send(self,@NewHold,#what=create(&Skull),#new_row=20,#new_col=36,#fine_row=48,#fine_col=00);
      //Send(self,@NewHold,#what=create(&Skull),#new_row=20,#new_col=36,#fine_row=00,#fine_col=16);
      //Send(self,@NewHold,#what=create(&Skull),#new_row=20,#new_col=36,#fine_row=16,#fine_col=16);
      //Send(self,@NewHold,#what=create(&Skull),#new_row=20,#new_col=36,#fine_row=32,#fine_col=16);
      //Send(self,@NewHold,#what=create(&Skull),#new_row=20,#new_col=36,#fine_row=48,#fine_col=16);
      //Send(self,@NewHold,#what=create(&Skull),#new_row=20,#new_col=36,#fine_row=00,#fine_col=32);
      //Send(self,@NewHold,#what=create(&Skull),#new_row=20,#new_col=36,#fine_row=16,#fine_col=32);
      //Send(self,@NewHold,#what=create(&Skull),#new_row=20,#new_col=36,#fine_row=32,#fine_col=32);
      //Send(self,@NewHold,#what=create(&Skull),#new_row=20,#new_col=36,#fine_row=48,#fine_col=32);
      //Send(self,@NewHold,#what=create(&Skull),#new_row=20,#new_col=36,#fine_row=00,#fine_col=48);
      //Send(self,@NewHold,#what=create(&Skull),#new_row=20,#new_col=36,#fine_row=16,#fine_col=48);
      //Send(self,@NewHold,#what=create(&Skull),#new_row=20,#new_col=36,#fine_row=32,#fine_col=48);
      //Send(self,@NewHold,#what=create(&Skull),#new_row=20,#new_col=36,#fine_row=48,#fine_col=48);
      //Send(self,@NewHold,#what=create(&sign,#desc=sewking_bones_desc,
      //      #name=sewking_bones_name,#icon=sewking_bones_icon),
      //      #new_row=21,#new_col=26,#fine_row=32,#fine_col=55);

      Send(self,@NewHold,#what=create(&OrnamentalObject,#type=OO_BONES),
            #new_row=21,#new_col=26,#fine_row=32,#fine_col=55);

      propagate;
   }

////////////////////
// Lever/Door Code //
////////////////////
//
   ResetEntrance()
   {
      local oMonster;

      oMonster = Send(self,@FindHolding,#class=&LupoggKing);

      if oMonster = $ OR (oMonster <> $ AND Send(oMonster,@GetCurrentState) = 1)
      {
         // Dead lupogg king or none at all.
         // Check if players are in area of pogg king still.
         // If they are, we'll wait for theme to leave and then reset the boss.
         if Send(self, @ArePlayersInBossRoom)
         {
            // Players are in the boss room still. Let's wait till they leave before we do anything.
            ptResetEntranceTimer = CreateTimer(self, @ResetEntrance, 3000);

            return;
         }

         // Players are not in the boss room and the pog king is either dead or not there.
         
         // Let's reset the boss!
         Send(self, @ResetBoss);
      }

      // The pog king is in his lair, we do nothing.

      return;
   }

   ArePlayersInBossRoom()
   "Checks if players are still in the boss room."
   {
      local o, lPlayersInRoom, bPlayersFound, lPos;

      lPlayersInRoom = Send(self, @GetHoldingByClass, #class=&Player);

      if lPlayersInRoom = $ OR NOT IsList(lPlayersInRoom) OR Length(lPlayersInRoom) <= 0
      {
         //Debug("no players in the room");
         return FALSE;
      }

      foreach o in lPlayersInRoom
      {
         lPos = Send(o, @GetPos);
         
         if Send(self,@FindRegion,#testrow=Nth(lPos,1),#testcol=Nth(lPos,2)) = REGION_C
            AND (Nth(lPos,1) < BLINKBOX1_N)
         {
            //Debug(Send(o, @GetName),"is in the king room");
            return TRUE;
         } else{
            //Debug(Send(o, @GetName),"IS NOT in the king room");
         }
      }

      return FALSE;
   }

   CheckJumpedOffCliff()
   {
      local iHeight, lPos, what, new_row, new_col, fine_row, fine_col;

      ptCheckJumped = $;

      what = poCheckJumped;
      //Debug("what is # 1",what);
      poCheckJumped = $;
      //Debug("what is # 2",what);

      if what = $
      {
         //Debug("what is $, falsing check jumped off cliff");
         return FALSE;
      }

      if what <> $ AND IsClass(what, &Player)
      {
         lPos = Send(what, @GetPos);
         iHeight = Send(what, @GetHeightAtObject);

         new_row = Nth(lPos, 1);
         new_col = Nth(lPos, 2);
         fine_row = Nth(lPos, 3);
         fine_col = Nth(lPos, 4);

         //Debug("Check Jumped",new_row,new_col,fine_row,fine_col,"Height",Send(what, @GetHeightAtObject));
         
         if new_col >= 24 AND iHeight < 700
         {
            //Debug("They jumped!");

            // This player jumped off the cliff.
            if FindListElem(plJumpers, what)
            {
               plJumpers = DelListElem(plJumpers, what);
            }

            if plJumped = $
            {
               plJumped = [];
            }

            if NOT FindListElem(plJumped, what)
            {
               //Debug("Added to KillPlayer List");
               plJumped = AppendListElem(what, plJumped);
            }
            else
            {
               //Debug("Player already jumped, skipping");
               // This player has already jumped.
               return;
            }

            //Debug("Killing Player Now");

            // Kill the player!
            Send(what, @KillPlayer, 
               #wait_time=900, 
               #rscMistakeMessage=SewerKingLair_jumped_mistake,
               #oRoomOrPlayerWhoKilledMe=self);
         }
      }

      return;
   }

   SomethingMoved(what = $, new_row = $, new_col = $, fine_row = FINENESS/2,
                  fine_col = FINENESS/2, cause = CAUSE_UNKNOWN, speed = 0,
                  non_monsters_only = FALSE)
   {
      local iHeight;

      // if what <> $ AND IsClass(what, &Player)
      // {
      //    //Debug("Something Moved",new_row,new_col,fine_row,fine_col,"Height",Send(what, @GetHeightAtObject));
      // }

      if piWaterPosition = DOOR_DN
      {
         iHeight = Send(what, @GetHeightAtObject);

         // Player is looking down into the Pog King Lair from the "DEADLY CLIFF" sign.
         if what <> $ AND IsClass(what, &Player)
            AND (new_row = 11 OR new_row = 12) 
            AND new_col < 18
         {
            //Debug("They backed away!");
            if plJumpers = $
            {
               plJumpers = [];
            }

            if FindListElem(plJumpers, what)
            {
               plJumpers = DelListElem(plJumpers, what);
            }

            propagate;
         }

         if what <> $ AND IsClass(what, &Player)
            AND (new_row = 11 OR new_row = 12) 
            AND new_col <= 24
            AND new_col >= 18
         {
            //Debug("Jumper detected!");

            if plJumpers = $
            {
               plJumpers = [];
            }

            if NOT FindListElem(plJumpers, what)
            {
               // This player will die if they go new_row = 12 OR 11 AND >=24 new_col
               plJumpers = AppendListElem(what, plJumpers);
            }

            if ptCheckJumped <> $ AND IsTimer(ptCheckJumped) AND GetTimeRemaining(ptCheckJumped) > 0
            {
               DeleteTimer(ptCheckJumped);
               ptCheckJumped = $;
            }

            poCheckJumped = what;
            ptCheckJumped = CreateTimer(self, @CheckJumpedOffCliff, 1000);
            //Debug("Started Jump Detect Timer");

            propagate;
         }
      }

      propagate;
   }

   RemoveKilledPlayer(who=$)
   "After the player is killed, report back letting us know to remove them from the jumper list."
   {
      local bRemoved;

      bRemoved = FALSE;

      if who <> $ AND IsClass(who, &Player) AND plJumped <> $ AND IsList(plJumped) AND FindListElem(plJumped, who)
      {
         // Remove them from the Jumped list.
         plJumped = DelListElem(plJumped, who);
         bRemoved = TRUE;
         //Debug("Removed",Send(who,@GetName),"from jumped");
      }

      if who <> $ AND IsClass(who, &Player) AND plJumpers <> $ AND IsList(plJumpers) AND FindListElem(plJumpers, who)
      {
         // Just in case they somehow got back on the jumpers list.
         plJumpers = DelListElem(plJumpers, who);
         //Debug("Removed",Send(who,@GetName),"from jumpers");
      }

      return bRemoved;
   }

   SomethingChanged(what=$)
   {
      if what = poLever1
         AND Send(poLever1,@GetState) = LEVER_DOWN
      {
         Send(poLever1,@SetStuck,#newstuck=true);
      }

      if what = poLever2
         AND Send(poLever2,@GetState) = LEVER_DOWN
      {
         Send(poLever2,@SetStuck,#newstuck=true);
      }

      if (what = poLever1 OR what = poLever2)
         AND Send(poLever1,@GetState) = LEVER_DOWN
         AND Send(poLever2,@GetState) = LEVER_DOWN
      {
         // Both levers must be toggled to open the doors.
         Send(poDoor1,@Toggle);
         Send(poDoor2,@Toggle);
         ptResetEntranceTimer = CreateTimer(self, @ResetEntrance, 3000);
      }
      if what = poDoor2
      {
         Send(poLever1,@SwitchLever);
         Send(poLever1,@SetStuck,#newstuck=false);
      }
      if what = poDoor1
      {
         Send(poLever2,@SwitchLever);
         Send(poLever2,@SetStuck,#newstuck=false);
      }

      propagate;
   }

//
////////////////////////
// end Lever/Door Code //
////////////////////////

///////////////////////
// Monster death code //
///////////////////////
//
   BossKilledTrigger()
   {
      local i;

      // These should be placed in Killed() of monster:
      //        lupogg king death wail
      //        cast earthquake

      // Raise the water, lower the waterfalls:
      Send(self,@SomethingWaveRoom,#wave_rsc=SewerKingLair_water_sound);
      Send(self,@SetSector,#sector=SECTOR_WATERa,#animation=ANIMATE_FLOOR_LIFT,
            #height = H_WATERa_UP,#speed=WATER_UP_SPEED);
      Send(self,@SetSector,#sector=SECTOR_WATERb,#animation=ANIMATE_FLOOR_LIFT,
            #height = H_WATERb_UP,#speed=WATER_UP_SPEED);
      Send(self,@SetSector,#sector=SECTOR_WATERc,#animation=ANIMATE_FLOOR_LIFT,
            #height = H_WATERc_UP,#speed=WATER_UP_SPEED);
      Send(self,@SetSector,#sector=SECTOR_WATERd,#animation=ANIMATE_FLOOR_LIFT,
            #height = H_WATERd_UP,#speed=WATER_UP_SPEED);
      Send(self,@SetSector,#sector=SECTOR_WATERFALL,
            #animation=ANIMATE_CEILING_LIFT,
            #height = H_WATERFALL_DN,#speed=WATERFALL_DN_SPEED);
      piWaterPosition = DOOR_UP;
      plLooping_sounds = [[ SewerKingLair_waterfall_sound, 15, 33, 100, 100 ],
                           [ SewerKingLair_waterfall_sound, 14, 41, 40, 100 ],
                           [ SewerKingLair_waterfall_sound, 5, 43, 40, 100 ],
                           [ SewerKingLair_waterfall_sound, 3, 39, 40, 100 ],
                           [ SewerKingLair_waterfall_sound, 3, 33, 40, 100 ],
                           [ SewerKingLair_waterfall_sound, 5, 27, 40, 100 ] ];
      foreach i in plActive
      {
         if IsClass(First(i),&User)
         {
            Send(self,@SendLoopingSounds,#who=First(i));
         }
      }

      // Handle drowning in the middle passage:
      ptDrownCountdownTimer = CreateTimer(self,@DrownCountdownTimerTrigger,
                                    DROWN_COUNTDOWN_TIME);

      propagate;
   }

//
//////////////////////////
// end Monster death code//
//////////////////////////


////////////////////////
// Boss resetting code //
////////////////////////
//

   ResetBoss()
   {
      // Lower the water instantaneously.
      Send(self,@SetSector,#sector=SECTOR_WATERa,#animation=ANIMATE_FLOOR_LIFT,
            #height = H_WATERa_DN,#speed=0);
      Send(self,@SetSector,#sector=SECTOR_WATERb,#animation=ANIMATE_FLOOR_LIFT,
            #height = H_WATERb_DN,#speed=0);
      Send(self,@SetSector,#sector=SECTOR_WATERc,#animation=ANIMATE_FLOOR_LIFT,
            #height = H_WATERc_DN,#speed=0);
      Send(self,@SetSector,#sector=SECTOR_WATERd,#animation=ANIMATE_FLOOR_LIFT,
            #height = H_WATERd_DN,#speed=0);
      Send(self,@SetSector,#sector=SECTOR_WATERFALL,
            #animation=ANIMATE_CEILING_LIFT,#height = H_WATERFALL_UP,#speed=0);
      piWaterPosition = DOOR_DN;
      plLooping_sounds = [[ SewerKingLair_waterfall_sound, 36, 33, 100, 100 ],
                          [ room_sewer_sound, 1, 1, 200, 70 ]];

      propagate;
   }
//
////////////////////////////
// end Boss resetting code //
////////////////////////////

///////////////////
// Blink handling //
///////////////////
//

   FindRegion(who=$,testrow=$,testcol=$)
   "Call with either a user or a pair of coords to test which region "
   "the point is in."
   {
      if (who <> $) AND (Send(who,@getOwner) <> self)
      {
         return REGION_E;
      }

      if testrow = $
      {
         testrow = Send(who,@GetRow);
      }

      if testcol = $
      {
         testcol = Send(who,@GetCol);
      }

      // In central area
      if (testrow <= BLINKBOX1_S)
         AND ((testrow >= BLINKBOX1_N AND testcol >= BLINKBOX1_W AND testcol <= BLINKBOX1_E)
            OR (testcol >= BLINKBOX2_W AND testcol <= BLINKBOX2_E AND testrow >= BLINKBOX2_N))
      {
         return REGION_C;
      }

      // Outside central area
      if (testcol <= ((BLINKBOX1_W + BLINKBOX1_E)/2))
      {
         return REGION_W;
      }

      return REGION_E;
   }

   Teleport(what=$,region=0)
   "Admin supported."
   "For guild halls - if you're in the guild hall, use secondary "
   "blink coordinates."
   {
      if region = 0
      {
         region = Send(self,@FindRegion,#who=what);
      }

      if region = REGION_C
      {
         propagate;
      }

      if region = REGION_W
      {
         Send(SYS,@utilGoNearSquare,#what=what,#where=self,
               #new_row=viTeleport_rowW,#new_col=viTeleport_colW);

         return TRUE;
      }

      if region = REGION_E
      {
         Send(SYS,@utilGoNearSquare,#what=what,#where=self,
               #new_row=viTeleport_rowE,#new_col=viTeleport_colE);

         return TRUE;
      }

      propagate;
   }

   NewHold(what = $,new_row=$,new_col=$)
   "Prevents anyone from logging on into a special zone"
   {
      // If players log on into the central region above the entry room,
      // send them to the central teleport point.
      if IsClass(what,&User)
         AND (Send(what,@GetOwner) = $)
      {
         if Send(self,@FindRegion,#testrow=new_row,#testcol=new_col) = REGION_C
            AND (new_row < BLINKBOX1_N)
         {
            Post(self,@Teleport,#what=what,#region=REGION_C);
         }
      }

      propagate;
   }

//
///////////////////////
// end Blink handling //
///////////////////////

/////////////
// Drowning //
/////////////
//
   IsInDrownArea(who=$)
   {
      local iRow,iCol;
      if who = $
      {
         return FALSE;
      }

      iRow=Send(who,@GetRow);
      iCol=Send(who,@GetCol);

      if (iRow <= DROWNBOX1_S) AND (iCol <= DROWNBOX1_E) AND (iCol >= DROWNBOX1_W)
         AND (iRow > DROWNBOX2_N OR (iRow = DROWNBOX2_N AND Send(who,@GetFineRow) > 32))
         AND (iRow >= DROWNBOX1_N OR iCol >= DROWNBOX2_W)
      {
         return TRUE;
      }

      return FALSE;
   }

   DrownCountdownTimerTrigger()
   {
      local i;
      ptDrownCountdownTimer = $;

      foreach i in plActive
      {
         if IsClass(First(i),&User)
            AND Send(self,@IsInDrownArea,#who=First(i))
         {
            // Do horrible nasty drowning stuff here.  (heh, heh, heh...)
            // but for now, just a teleport.  :(
            //Send(self,@Teleport,#what=First(i),#region=REGION_W);

            Send(self,@DrownIntervalTrigger);

            // Only want to start this once, no matter how many
            // people are drowning!
            return;
         }
      }

      return;
   }

   DrownIntervalTrigger()
   {
      local i,UsersStillDrowning;
      UsersStillDrowning = FALSE;
      ptDrownIntervalTimer = $;

      foreach i in plActive
      {
         if IsClass(First(i),&User)
            AND Send(self,@IsInDrownArea,#who=First(i))
         {
            // Do horrible nasty drowning stuff here.  (heh, heh, heh...)
            // damage, etc.
            Send(self,@SomethingWaveRoom,#what=First(i),
                  #wave_rsc=SewerKingLair_drowning_sound);
            Send(First(i),@MsgSendUser,#message_rsc=SewerKingLair_drowning);

            // Set #decay=true to avoid breaking trances
            // Send(First(i),@LoseHealth,#amount=DROWN_DAMAGE,#decay=TRUE);

            if Send(First(i),@AssessDamage,#report=FALSE,#what=First(i),
                     #damage=(DROWN_DAMAGE*Random(8,12)/10)) = $
            {
               Send(First(i),@KilledSomething,#what=First(i));
            }

            UsersStillDrowning = TRUE;
         }
      }

      // This should never be necessary, but just in case...
      // If the boss is alive, the water should be low, hence no drowning.
      if plBoss <> $
      {
         UsersStillDrowning = FALSE;
      }

      if UsersStillDrowning
      {
         // Ready for another go...
         ptDrownIntervalTimer = CreateTimer(self,@DrownIntervalTrigger,
                                    DROWN_INTERVAL);
      }

      return;
   }

//
/////////////////
// end Drowning //
/////////////////

   Delete()
   {
      Send(poDoor1,@Delete);
      poDoor1 = $;
      Send(poDoor2,@Delete);
      poDoor2 = $;
      poLever1 = $;
      poLever2 = $;

      if ptDrownCountdownTimer <> $
      {
         DeleteTimer(ptDrownCountdownTimer);
         ptDrownCountdownTimer = $;
      }

      if ptDrownIntervalTimer <> $
      {
         DeleteTimer(ptDrownIntervalTimer);
         ptDrownIntervalTimer = $;
      }

      propagate;
   }

end
////////////////////////////////////////////////////////////////////////////////
