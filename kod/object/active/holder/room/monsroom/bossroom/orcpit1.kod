// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Orcpit1 is BossRoom

constants:

   include blakston.khd

   DOOR_RESET_TIME = 9000
   SECTOR_DOOR1a = 1
   SECTOR_DOOR1b = 2
   SECTOR_DOOR2a = 3
   SECTOR_DOOR2b = 4
   SECTOR_DOOR3a = 5
   SECTOR_DOOR3b = 6
   H_DOOR1a_DOWN = 310
   H_DOOR1a_UP = 380
   H_DOOR1b_DOWN = 204
   H_DOOR1b_UP = 274
   H_DOOR2a_DOWN = 310
   H_DOOR2a_UP = 380
   H_DOOR2b_DOWN = 204
   H_DOOR2b_UP = 274
   H_DOOR3a_DOWN = 310
   H_DOOR3a_UP = 380
   H_DOOR3b_DOWN = 204
   H_DOOR3b_UP = 274

   DOOR_UP = 1
   DOOR_DOWN = 0
   DOOR_UP_SPEED = 30
   DOOR_DOWN_SPEED = 150

resources:

   include orcpit1.lkod

   room_name_Orcpit1 = "Lair of the Orc Pit Boss"
   room_Orcpit1 = ocp1.roo
   Orcpit1_music = orcpit.ogg

   Orcpit1_door_sound = doorrsup.ogg
   Orcpit1_door_down_sound = arr_metl.ogg

   pitboss_angry = "~B~rOrc wizards arrive to avenge the death of their pit boss.~y~I Now would be a good time to run!"

classvars:

   vrName = room_name_Orcpit1

   viTeleport_row = 31
   viTeleport_col = 41

   viTerrain_type = TERRAIN_CAVES | TERRAIN_LAIR

   // 20 seconds
   viBossResetTime = 20000

properties:

   prRoom = room_Orcpit1
   piRoom_num = RID_ORC_PIT

   piBaseLight = (LIGHT_VERY_DARK + LIGHT_MIN)/2
   piOutside_factor = 0

   prMusic = Orcpit1_music

   piGen_time = 25000
   piGen_percent = 80

   piInit_count_min = 7
   piInit_count_max = 10

   piMonster_count_max = 50

   piDoor1Position = DOOR_DOWN
   ptDoor1ResetTimer = $
   piDoor2Position = DOOR_DOWN
   ptDoor2ResetTimer = $
   piDoor3Position = DOOR_DOWN

   plWaterGenerators = $

   ptAggroTimer = $

   poLastTarget = $

messages:

   Constructor()
   {
      plMonsters = [ [&Ore, 20],
                     [&DiamondVein, 15],
                     [&EmeraldVein, 15],
                     //[&NeruditeVein, 10],
                     [&RubyVein, 15],
                     [&SapphireVein, 15],
                     [&UncutVein, 10] ];

      plGenerators = [ [52,19], [50,23], [57,18], [59,22], [58,28], [59,46],
                       [63,46], [65,49], [63,52], [59,54]
                     ];

      plWaterGenerators = [
         [42,44], [43,42], [43,41], [43,39], [43,38], [43,37]
      ];

      propagate;
   }

   SetupBossTemplates()
   {
      plBossTemplate = [ [&OrcPitBoss, 24, 41] ];
      plHenchmenTemplate = [ [&OrcWizard, 24, 39], [&OrcWizard, 24, 43] ];

      plBossTreasureTemplate = [ [&DiscipleRobe, 15, 41, 0, 0],
                                 [&IvyCirclet, 16, 41, 0, 0],
                                 [&OrcShield, 15, 42, 0, 0],
                                 [&MysticSword, 16, 42, 0, 0] ,
                                 [&OfferingShalille, 15, 41, 32, 32]
                               ];

      return;
   }

   CreateStandardObjects()
   {
      local lBraziers;

      lBraziers = [ [25, 40, 48, 8], [25, 42, 48, 56] ];

      Send(self,@CreateObjFromList,#lObjlist=lBraziers,
            #oObjectClassName=&OrcTorch);

      return;
   }


   CreateStandardExits()
   {
      plEdge_exits = $;
      plEdge_Exits = Cons([LEAVE_WEST, RID_ORC_PIT_A, 7, 61,
                           ROTATE_NONE,ROW_IS_LESS_THAN,42], plEdge_exits);
      plEdge_Exits = Cons([LEAVE_EAST, RID_ORC_PIT_B, 8, 4,
                           ROTATE_NONE,ROW_IS_LESS_THAN,42], plEdge_exits);
      plEdge_Exits = Cons([LEAVE_WEST, RID_ORC_CAVE1_EXT, 18, 43,
                           ROTATE_NONE,ROW_IS_GREATER_THAN,42], plEdge_exits);
      plEdge_Exits = Cons([LEAVE_EAST, RID_ORC_CAVE5_EXT, 8, 3,
                           ROTATE_NONE,ROW_IS_GREATER_THAN,42], plEdge_exits);

      propagate;
   }

//////////////////////
// Monster death code//
//////////////////////
//

   BossKilledTrigger()
   {
      local i, oMonster, lGenerator, iRandom;

      poLastTarget = $;
      oMonster = $;

      // Just killed the orc pit boss (opening door, creating treasure...)

      // Raise the gate.
      Send(self,@SomethingWaveRoom,#wave_rsc=Orcpit1_door_sound);
      Send(self,@SetSector,#sector=SECTOR_DOOR3a,
            #animation=ANIMATE_CEILING_LIFT,
            #height=H_DOOR3a_UP,#speed=DOOR_UP_SPEED);
      Send(self,@SetSector,#sector=SECTOR_DOOR3b,
            #animation=ANIMATE_CEILING_LIFT,
            #height=H_DOOR3b_UP,#speed=DOOR_UP_SPEED);
      piDoor3Position = DOOR_UP;

      // Send in the army of orc wizards to avenge his death!
      i = 0;
      foreach i in plActive
      {
         if IsClass(First(i),&Player)
         {
            Send(First(i),@MsgSendUser,#message_rsc=pitboss_angry);
            
            if poLastTarget = $
            {
               // You're toast!
               poLastTarget = First(i);
            }
         }
      }

      i = 0;
      while (i < 25)
      {
         oMonster = Create(&OrcWizard);

         iRandom = Random(1, Length(plWaterGenerators));
         lGenerator = Nth(plWaterGenerators, iRandom);

         Send(self,@GenerateMonster,#oMonster=oMonster,
            #piSurvivalLevel=1,#bStack=TRUE,#iRow=Nth(lGenerator, 1),#iCol=Nth(lGenerator, 2));

         i++;
      }

      ptAggroTimer = CreateTimer(self, @AggroOrcWizards, 1000);

      propagate;
   }

   AggroOrcWizards()
   {
      local i;

      if poLastTarget <> $
      {
         i = 0;

         foreach i in plActive
         {
            if IsClass(First(i),&OrcWizard)
            {
               Post(First(i),@TargetSwitch,#what=poLastTarget,#iHatred=9999);
               Post(First(i),@EnterStateChase,#target=poLastTarget,#actnow=TRUE);
               Post(First(i),@EnterStateAttack,#target=poLastTarget,#actnow=TRUE);
            }
         }
      }

      return;
   }

//
//////////////////////////
// end Monster death code//
//////////////////////////


////////////////////////
// Boss resetting code //
////////////////////////
//
   ResetBoss()
   {
      local i;

      foreach i in plActive
      {
         if IsClass(First(i),&NumberItem) OR IsClass(First(i),&Item)
         {
            Send(First(i),@Delete);
         }
      }

      foreach i in plPassive
      {
         if IsClass(First(i),&NumberItem) OR IsClass(First(i),&Item)
         {
            Send(First(i),@Delete);
         }
      }

      // Close the boss door instantaneously.
      Send(self,@SetSector,#sector=SECTOR_DOOR3a,
            #animation=ANIMATE_CEILING_LIFT,#height=H_DOOR3a_DOWN,#speed=0);
      Send(self,@SetSector,#sector=SECTOR_DOOR3b,
            #animation=ANIMATE_CEILING_LIFT,#height=H_DOOR3b_DOWN,#speed=0);
      piDoor3Position = DOOR_DOWN;

      // Boss is dead, wipe the room clean.
      foreach i in plActive
      {
         if IsClass(First(i),&OrcPitBossBody) OR IsClass(First(i),&OrcWizard) OR IsClass(First(i),&Ore)
         {
            Send(First(i),@Delete);
         }
      }

      propagate;
   }

//
////////////////////////////
// End Boss resetting code //
////////////////////////////


////////////////////////
// Normal moving doors //
////////////////////////
//

   SomethingTryGo(what=$,row=$,col=$)
   {
      if ((row = 56 OR row = 57) AND (col = 14 OR col = 15))
         AND piDoor1Position = DOOR_DOWN
      {
         Send(self,@SomethingWaveRoom,#wave_rsc=Orcpit1_door_sound);
         Send(self,@SetSector,#sector=SECTOR_DOOR1a,
               #animation=ANIMATE_CEILING_LIFT,
               #height=H_DOOR1a_UP,#speed=DOOR_UP_SPEED);
         Send(self,@SetSector,#sector=SECTOR_DOOR1b,
               #animation=ANIMATE_CEILING_LIFT,
               #height=H_DOOR1b_UP,#speed=DOOR_UP_SPEED);
         piDoor1Position = DOOR_UP;
         ptDoor1ResetTimer = CreateTimer(self,@DoorResetTrigger1,DOOR_RESET_TIME);

         return TRUE;
      }

      if ((row = 63 OR row = 64) AND (col = 55 OR col = 56))
         AND piDoor2Position = DOOR_DOWN
      {
         Send(self,@SomethingWaveRoom,#wave_rsc=Orcpit1_door_sound);
         Send(self,@SetSector,#sector=SECTOR_DOOR2a,
               #animation=ANIMATE_CEILING_LIFT,
               #height=H_DOOR2a_UP,#speed=DOOR_UP_SPEED);
         Send(self,@SetSector,#sector=SECTOR_DOOR2b,
               #animation=ANIMATE_CEILING_LIFT,
               #height=H_DOOR2b_UP,#speed=DOOR_UP_SPEED);
         piDoor2Position = DOOR_UP;
         ptDoor2ResetTimer = CreateTimer(self,@DoorResetTrigger2,DOOR_RESET_TIME);

         return TRUE;
      }

      propagate;
   }

   DoorResetTrigger1()
   {
      ptDoor1ResetTimer = $;

      if piDoor1Position = DOOR_UP
      {
         Send(self,@SomethingWaveRoom,#wave_rsc=Orcpit1_door_down_sound);
         Send(self,@SetSector,#sector=SECTOR_DOOR1a,
               #animation=ANIMATE_CEILING_LIFT,
               #height=H_DOOR1a_DOWN,#speed=DOOR_DOWN_SPEED);
         Send(self,@SetSector,#sector=SECTOR_DOOR1b,
               #animation=ANIMATE_CEILING_LIFT,
               #height=H_DOOR1b_DOWN,#speed=DOOR_DOWN_SPEED);
         piDoor1Position = DOOR_DOWN;
      }

      return;
   }

   DoorResetTrigger2()
   {
      ptDoor2ResetTimer = $;

      if piDoor2Position = DOOR_UP
      {
         Send(self,@SomethingWaveRoom,#wave_rsc=Orcpit1_door_down_sound);
         Send(self,@SetSector,#sector=SECTOR_DOOR2a,
               #animation=ANIMATE_CEILING_LIFT,
               #height=H_DOOR2a_DOWN,#speed=DOOR_DOWN_SPEED);
         Send(self,@SetSector,#sector=SECTOR_DOOR2b,
               #animation=ANIMATE_CEILING_LIFT,
               #height=H_DOOR2b_DOWN,#speed=DOOR_DOWN_SPEED);
         piDoor2Position = DOOR_DOWN;
      }

      return;
   }

///////////////////////
// Logon safeguarding //
///////////////////////

   NewHold(what = $)
   "Prevents anyone from logging on into a special zone"
   {
      if IsClass(what,&User) AND (Send(what,@GetOwner) = $)
      {
         Post(self,@Teleport,#what=what);
      }

      propagate;
   }

   LastUserLeft()
   {
      local i;

      Send(self,@ResetBoss);

      propagate;
   }

   Delete()
   {
      if ptDoor1ResetTimer <> $
      {
         DeleteTimer(ptDoor1ResetTimer);
         ptDoor1ResetTimer = $;
      }

      if ptDoor2ResetTimer <> $
      {
         DeleteTimer(ptDoor2ResetTimer);
         ptDoor2ResetTimer = $;
      }

      propagate;
   }

end
////////////////////////////////////////////////////////////////////////////////
