// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


/////////////////////////////////////////////////////////////////////////////////
DeathRealmTosGraveyard is DeathRealm

constants:

   include blakston.khd

resources:

   room_DeathRealm_TosGraveyard = tosgrave.roo

   DeathRealm_wind_sound_tosgrave = ambcntry.ogg
   DeathRealm_wind1_sound_tosgrave = rs_wind.ogg

classvars:

   viTeleport_row = 14
   viTeleport_col = 18

   viWeatherZone = WEATHER_ZONE_TOS

properties:

   prRoom = room_DeathRealm_TosGraveyard
   piRoom_num = RID_DTOS_GRAVEYARD

   plTombstones = $
   viTerrain_type = TERRAIN_CITY | TERRAIN_MYSTICAL

messages:

   AvailableTombstone(what = $)
   "When tombstones are created in here, they tell us they want to know about "
   "player deaths."
   {
      plTombstones = Cons(what,plTombstones);

      return;
   }

   LeaveHold(what = $)
   {
      local i;

      foreach i in plTombstones
      {
         if i = what
         {
            plTombstones = DelListElem(plTombstones,what);

            break;
         }
      }

      propagate;
   }

   PlayerKilled(who = $,killer = $)
   "System calls this when a player is killed, in this room only."
   {
      local oTombstone;

      if plTombstones = $
      {
         return;
      }

      // Move tombstone at end of list to the beginning.
      oTombstone = Last(plTombstones);
      plTombstones = DelListElem(plTombstones,oTombstone);
      plTombstones = Cons(oTombstone,plTombstones);

      Send(oTombstone,@SetPlayerTombstone,#who=who,#killer=killer);

      return;
   }

   CreateStandardExits()
   {
      plEdge_Exits = $;
      plEdge_Exits = Cons([LEAVE_EAST, RID_DTOS, 50, 3, ROTATE_NONE], plEdge_exits);

      plExits = $;

      // Crypt
      plExits = Cons([ 6, 29, RID_DTOS_CRYPT, 23, 8, ROTATE_NONE ],plExits);

      propagate;
   }

   CreateStandardObjects()
   {

      // some haphazard tombstones

      Send(self,@NewHold,#what=Create(&Tombstone,
                  #tombstone_type=TOMBSTONE_NORMAL),
           #new_row=19,#new_col=25,#new_angle=ANGLE_SOUTH);

      Send(self,@NewHold,#what=Create(&Tombstone,
                  #tombstone_type=TOMBSTONE_CROSS),
           #new_row=25,#new_col=6,#new_angle=ANGLE_SOUTH_EAST);

      Send(self,@NewHold,#what=Create(&Tombstone,
                  #tombstone_type=TOMBSTONE_NORMAL),
      #new_row=7,#new_col=22,#new_angle=ANGLE_SOUTH);

      Send(self,@NewHold,#what=Create(&Tombstone,
                  #tombstone_type=TOMBSTONE_CROSS),
      #new_row=10,#new_col=6,#new_angle=ANGLE_NORTH_WEST);

      Send(self,@NewHold,#what=Create(&Tombstone,
                  #tombstone_type=TOMBSTONE_CROSS),
           #new_row=10,#new_col=14,#new_angle=ANGLE_NORTH_EAST);

      Send(self,@NewHold,#what=Create(&Tombstone,
                  #tombstone_type=TOMBSTONE_CROSS),
      #new_row=12,#new_col=17,#new_angle=ANGLE_WEST);

      Send(self,@NewHold,#what=Create(&Tombstone,
                  #tombstone_type=TOMBSTONE_NORMAL),
           #new_row=14,#new_col=7,#new_angle=ANGLE_SOUTH_EAST);

      Send(self,@NewHold,#what=Create(&Tombstone,
                  #tombstone_type=TOMBSTONE_NORMAL),
      #new_row=14,#new_col=25,#new_angle=ANGLE_WEST);

      Send(self,@NewHold,#what=Create(&Tombstone,
                  #tombstone_type=TOMBSTONE_NORMAL),
           #new_row=17,#new_col=26,#new_angle=ANGLE_NORTH);

      Send(self,@NewHold,#what=Create(&Tombstone,
                  #tombstone_type=TOMBSTONE_NORMAL),
      #new_row=18,#new_col=12,#new_angle=ANGLE_SOUTH_EAST);

      Send(self,@NewHold,#what=Create(&Tombstone,
                  #tombstone_type=TOMBSTONE_CROSS),
      #new_row=17,#new_col=19,#new_angle=ANGLE_NORTH);


      // Lighting

      // Bright white light shining from the ornament in the top-left corner.
      Send(self,@NewHold,#what=Create(&DynamicLight,#iColor=LIGHT_BWHITE,
            #iIntensity=80),#new_row=8,#new_col=7,#fine_row=48,#fine_col=56);

      propagate;
   }

   CreatePeriodicSounds()
   {
      plPeriodic_sounds = [ DeathRealm_wind1_sound_tosgrave ];
      pbPeriodic_sound_random_location = True;

      propagate;
   }

end
////////////////////////////////////////////////////////////////////////////////
