// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
DeathRealmThrone2 is DeathRealm

constants:

   include blakston.khd

   Farnohl_CYCLE = 120

resources:

   DeathRealm_room_throne2 = throne2.roo

classvars:

   viTeleport_row = 10
   viTeleport_col = 5

   viTerrain_type = TERRAIN_LAIR | TERRAIN_CASTLE

properties:

   prRoom = DeathRealm_room_throne2
   piRoom_num = RID_DTHRONE2

   prMapChanges = FALSE
   prMonsters = FALSE
   prQuake = FALSE
   prFireRing = FALSE

   ptFarnohl = $

messages:

   CreateStandardExits()
   {
      plExits = $;

      plExits = Cons([ 23, 4, RID_DTHRONE1, 2, 5, ROTATE_NONE ],plExits);
      plExits = Cons([ 23, 5, RID_DTHRONE1, 2, 5, ROTATE_NONE ],plExits);

      propagate;
   }

   CreateStandardObjects()
   {
      // throne
      Send(self,@NewHold,#what=Create(&Throne),
      #new_row=1,#new_col=5,#new_angle=ANGLE_SOUTH);

      // left row of pillars 
      Send(self,@NewHold,#what=Create(&Pillar),#new_row=16,#new_col=3,#fine_col=56);
      Send(self,@NewHold,#what=Create(&Pillar),#new_row=13,#new_col=3,#fine_col=56);
      Send(self,@NewHold,#what=Create(&Pillar),#new_row=10,#new_col=3,#fine_col=56);
      Send(self,@NewHold,#what=Create(&Pillar),#new_row=7,#new_col=3,#fine_col=56);
      Send(self,@NewHold,#what=Create(&Pillar),#new_row=4,#new_col=3,#fine_col=56);
      Send(self,@NewHold,#what=Create(&Pillar),#new_row=1,#new_col=3,#fine_col=56);

      // right row of pillars
      Send(self,@NewHold,#what=Create(&Pillar),#new_row=16,#new_col=7,#fine_col=8);
      Send(self,@NewHold,#what=Create(&Pillar),#new_row=13,#new_col=7,#fine_col=8);
      Send(self,@NewHold,#what=Create(&Pillar),#new_row=10,#new_col=7,#fine_col=8);
      Send(self,@NewHold,#what=Create(&Pillar),#new_row=7,#new_col=7,#fine_col=8);
      Send(self,@NewHold,#what=Create(&Pillar),#new_row=4,#new_col=7,#fine_col=8);
      Send(self,@NewHold,#what=Create(&Pillar),#new_row=1,#new_col=7,#fine_col=8);

      return;
   }

   Enter(who=$)
   {
      Send(self,@NewHold,#what=who,#new_row=22,#new_col=5,
            #new_angle=ROTATE_NONE);

      return;
   }

   FirstUserEntered()
   {
      Send(self,@SpawnFarnohl);

      propagate;
   }

   LastUserLeft()
   {
      local i;

      if ptFarnohl <> $
      {
         DeleteTimer(ptFarnohl);
         ptFarnohl = $;
      }

      propagate;
   }

   FarnohlTimer()
   {
      ptFarnohl = $;
      Send(self,@SpawnFarnohl);

      return;
   }

   SpawnFarnohl()
   {
      local iTime, i, oFarnohl;

      if ptFarnohl = $
      {
         // Randomize the time by 10//
         iTime = (Farnohl_CYCLE * random(90,110)) / 100;
         // Convert to ms (numbers get too big if you do it above)
         iTime = iTime * 1000;
         ptFarnohl = CreateTimer(self,@FarnohlTimer,iTime);
      }

      foreach i in plActive
      {
         if IsClass(Send(self,@HolderExtractObject,#data=i),&Farnohl)
         {
            return FALSE;
         }
      }

      oFarnohl = Create(&Farnohl);
      Send(self,@NewHold,#what=oFarnohl,#new_row=2,#new_col=5,#new_angle=ANGLE_SOUTH);

      return TRUE;
   }

   Delete()
   {
      if ptFarnohl <> $
      {
         DeleteTimer(ptFarnohl);
         ptFarnohl = $;
      }

      propagate;
   }
   
end
////////////////////////////////////////////////////////////////////////////////
