// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
LogoffGhost is ActiveObject

constants:

   include blakston.khd
   include protocol.khd

resources:

   include logghost.lkod

   logoffghost_name_rsc = "logoff ghost"
   logoffghost_desc_rsc = \
      "This is the ghosted body of %q, whose consciousness has travelled to "
      "another plane of existence."

   logoffghost_default_icon = ptb.bgf
   logoffghost_default_larm = plb.bgf
   logoffghost_default_rarm = prb.bgf
   logoffghost_default_legs = pfb.bgf

   logoffghost_default_sword = swordov.bgf
   logoffghost_default_shield = rshield.bgf

   logoffghost_penalty_mail_Sender = "Your guardian angel"

   logoffghost_noflatpenalty_mail = \
      "Subject: Penalties for logging off in an unsafe area\n"
      "You have suffered some penalties for logging off in an unsafe area:\n"
      "You lost %q XP, %q items, %q spell points, and %q skill points."
      "\n\n"
      "In the future, it would be wise to log off in a safe area such as an "
      "inn, an adventurer's hall, or the interior of your guild's hall."
      "\n\n"
      "Abandoning your body in an unsafe area weakens it, which may cause you "
      "to suffer some of the effects of death: you could lose proficiency in "
      "spells and skills, as well as loosening your grip on items in your "
      "possession.  You have an 8 minute grace period (3 minutes for "
      "murderers) after logoff before penalties are incurred, so if you "
      "lose your connection involuntarily, simply reconnect within 8 minutes "
      "and your character will be fine.  Every time you log off unsafely "
      "in a short period of time, your body becomes progressively weaker "
      "and as such will suffer more from being abandoned.  The first "
      "time you logoff unsafely, you will suffer little or no penalties, "
      "but once you have performed enough unsafe logoffs, the damage to "
      "your body will be comparable to the losses incurred when your character "
      "dies.  This penalty escalation recedes over time, so if "
      "you don't log off unsafely too frequently, your character should "
      "suffer only mild if any penalties.  You can also use the Phase spell "
      "to simulate the effects of logging off while remaining in-game, but if "
      "you do not Phase back to reality after the grace period, you will take "
      "penalties as if you had logged off unsafely."
      "\n\n"
      "I recommend you do not use this as a tactic to avoid danger, since "
      "it could work against you should your connection to the Meridian "
      "become too unstable soon after."
      "\n\n"
      "  -- Your guardian angel"

   logoffghost_penalty_mail = \
      "Subject: Penalties for logging off in an unsafe area\n"
      "You have suffered some penalties for logging off in an unsafe area:\n"
      "You lost %q XP, %q items, %q spell points, and %q skill points."
      "\n\n"
      "In the future, it would be wise to log off in a safe area such as an "
      "inn, an adventurer's hall, or the interior of your guild's hall."
      "\n\n"
      "Abandoning your body in an unsafe area weakens it, which may cause you "
      "to suffer some of the effects of death: you could lose proficiency in "
      "spells and skills, as well as loosening your grip on items in your "
      "possession.  You have an 8 minute grace period (3 minutes for "
      "murderers) after logoff before penalties are incurred, so if you "
      "lose your connection involuntarily, simply reconnect within 8 minutes "
      "and your character will be fine.  You can also use the Phase spell "
      "to simulate the effects of logging off while remaining in-game, but if "
      "you do not Phase back to reality after the grace period, you will take "
      "penalties as if you had logged off unsafely."
      "\n\n"
      "I recommend you do not use this as a tactic to avoid danger, since "
      "it could work against you should your connection to the Meridian "
      "become too unstable soon after."
      "\n\n"
      "  -- Your guardian angel"

   logoffghost_newbie_mail = "Subject: Logging off in an unsafe area\n"
      "You last logged off in an unsafe area, where the lines of connection "
      "to the Meridian are weak.  I have managed to protect you from the harm "
      "that usually would result from passing back through the Meridian in "
      "such a place, but in the future it would be wise to log off in a safe "
      "area such as an inn or an adventurer's hall (or your guild's hall, "
      "when you have progressed enough to join a guild)."
      "\n\n"
      "Abandoning your body in an unsafe area weakens it, which may cause "
      "you to experience some effects of death: you could lose proficiency "
      "in spells and skills, as well as lose your grip on items in your "
      "possession.  You have an 8 minute grace period after logoff before "
      "penalties are incurred, so if you lose your connection involuntarily, "
      "simply reconnect within 8 minutes and your character will be fine."
      "\n\n"
      "  -- Your guardian angel"

   logoffghost_someone = "Someone"

   logoffghost_poof_wav_rsc = logoffghost_poof.ogg

classvars:


properties:

   piDrawFX = DRAWFX_DITHERINVIS

   vrDesc = logoffghost_desc_rsc
   vrName = logoffghost_name_rsc
   vrIcon = logoffghost_default_icon

   // Who the LogoffGhost is of.
   poGhostedPlayer = $
   piExpression = 1
   prToupee = charinfo_hair_cb_icon
   prEyes = charinfo_eyes_kx_icon
   prMouth = charinfo_mouth_lx_icon
   prNose = charinfo_nose_mx_icon
   prHead = charinfo_head_kx_icon
   prRight_arm = logoffghost_default_rarm
   prLeft_arm = logoffghost_default_larm
   prLegs = logoffghost_default_legs

   prWeapon = logoffghost_default_sword
   prShield = logoffghost_default_shield
   prBowTop = $

   piIcon_frame = 1
   piLegs_frame = 1
   piLeft_frame = 1
   piRight_frame = 1
   piShield_frame = 1
   piWeapon_frame = 1

   piIcon_translation = 0
   piLegs_translation = 0
   piArms_translation = 0
   piWeapon_translation = 0
   piShield_translation = 0
   piSkin_translation = 3
   piHair_translation = PT_GRAY_TO_BGREEN

   piOverlays = 8

   ptPenaltyTimer = $
   psXPLost = $
   psItemsLost = $
   psSpellPointsLost = $
   psSkillPointsLost = $
   piSoldierShieldOverlay = $

messages:

   Constructor(GhostedPlayer = $, iPenaltyTime = $)
   {
      local i;

      if GhostedPlayer <> $
      {
         Send(self,@SetLogoffGhost,#GhostedPlayer=GhostedPlayer);
         if poGhostedPlayer <> $
         {
            ptPenaltyTimer = CreateTimer(self,@PenaltyTrigger,iPenaltyTime);
            Send(Send(poGhostedPlayer,@GetOwner),@NewHold,#what=self,
                 #new_row=Send(poGhostedPlayer,@GetRow),
                 #new_col=Send(poGhostedPlayer,@GetCol),
                 #fine_row=(Send(poGhostedPlayer,@GetFineRow)+2),
                 #fine_col=(Send(poGhostedPlayer,@GetFineCol)+2),
                 #new_angle=Send(poGhostedPlayer,@GetAngle));
         }
      }

      propagate;
   }

   Delete()
   {
      poGhostedPlayer = $;

      if ptPenaltyTimer <> $
      {
         DeleteTimer(ptPenaltyTimer);
         ptPenaltyTimer = $;
      }

      propagate;
   }

   ShowDesc()
   {
      if poGhostedPlayer <> $
      {
         Addpacket(4,vrDesc);
         AddPacket(STRING_RESOURCE,Send(poGhostedPlayer,@GetTrueName));
      }
      else
      {
         Addpacket(4,vrDesc);
         AddPacket(STRING_RESOURCE,logoffghost_someone);
         Post(self,@Delete);
      }

      return;
   }

   AddPenaltyTime(amount=0)
   "Allows adding (or removing) time until expiry of the logoff ghost."
   {
      local iTime, iBaseTime;

      if (amount <> 0
         AND ptPenaltyTimer <> $)
      {
         iTime = GetTimeRemaining(ptPenaltyTimer);
         DeleteTimer(ptPenaltyTimer);

         iBaseTime = Send(poGhostedPlayer,@GetBasePhaseTime);

         // If we are given an amount larger than base time, assume it is
         // wanted and add it with an upper bound of 10 minutes. Otherwise,
         // bind it at the ghosted player's base time.
         if (amount > iBaseTime)
         {
            iTime = Bound(iTime + amount,1000,600000);
         }
         else
         {
            iTime = Bound(iTime + amount,1000,iBaseTime);
         }

         ptPenaltyTimer = CreateTimer(self,@PenaltyTrigger,iTime);
      }

      return;
   }

   PenaltyTrigger()
   {
      ptPenaltyTimer = $;

      // if player is logged on, some special case didn't get caught!
      if Send(poGhostedPlayer,@IsLoggedOn)
      {
         // delete the ghost, bail with no penalties
         Send(self,@Delete);

         return;
      }

      if Send(SYS,@GetLogoffPenaltyEnable)
      {
         if Send(poGhostedPlayer,@CanPlayerPvP)
         {
            Send(self,@InflictPenalties);
         }
         else
         {
            Send(poGhostedPlayer,@ReceiveNestedMail,
                 #from=logoffghost_penalty_mail_Sender,
                 #dest_list=[poGhostedPlayer],
                 #nest_list=[4,logoffghost_newbie_mail]);
         }
      }

      // Play a sound audible in the room
      if poOwner <> $
      {
         Send(poOwner, @SomethingWaveRoom, #what=self,
               #wave_rsc = logoffghost_poof_wav_rsc);
      }

      // Send this person to the room's blink coordinates, or to their hometown
      // if the Hometown Penalties setting is on and the player is not angeled.
      // This helps get people out of continuous crash situations and mounting
      // penalties. Hometown Penalties is intended to keep PvP players from
      // being 'kept offline' by opponents.

      if Send(poGhostedPlayer,@CanPlayerPvP)
      {
         if Send(SETTINGS_OBJECT,@ReturnToSafetyPenaltiesEnabled)
         {
            Send(poGhostedPlayer,@AdminGoToLastSafeRoom);
         }
         else
         {
            Send(poGhostedPlayer,@AdminGoToBlink);
         }
      }
      else if Send(SETTINGS_OBJECT,@AngelReturnToSafetyPenaltiesEnabled)
      {
         Send(poGhostedPlayer,@AdminGoToLastSafeRoom);
      }
      else
      {
         Send(poGhostedPlayer,@AdminGoToBlink);
      }

      Send(self,@Delete);

      return;
   }

   InflictPenalties()
   {
      // Sanity check: Are they logged on?
      if Send(poGhostedPlayer,@IsLoggedOn)
      {
         return;
      }

      // Ghosted player handles the penalties and calls the logoff ghost
      // back with the penalty numbers to send the mail.
      Send(poGhostedPlayer,@CalculatePenalties,#what=self);

      return;
   }

   SendPenaltyInfo(iXPLost=0, iItemsLost=0, iSpellPtLost=0, iSkillPtLost=0)
   {
      local rMail;

      // Get the correct mail resource.
      if Send(SETTINGS_OBJECT,@GetFlatPenaltiesEnable,
            #flag=Send(poGhostedPlayer,@CheckPlayerFlag,#flag=PFLAG_MURDERER))
      {
         rMail = logoffghost_penalty_mail;
      }
      else
      {
         rMail = logoffghost_noflatpenalty_mail;
      }

      // Convert to strings for the mail.
      psXPLost = Send(SYS,@IntToString,#num=iXPLost);
      psItemsLost = Send(SYS,@IntToString,#num=iItemsLost);
      psSpellPointsLost = Send(SYS,@IntToString,#num=iSpellPtLost);
      psSkillPointsLost = Send(SYS,@IntToString,#num=iSkillPtLost);

      // Send mail notifying user of penalties incurred
      Send(poGhostedPlayer,@ReceiveNestedMail,
           #from=logoffghost_penalty_mail_Sender,
           #dest_list=[poGhostedPlayer],
           #nest_list=[4,rMail, 4,psXPLost, 4,psItemsLost, 4,psSpellPointsLost,
                       4,psSkillPointsLost]);

      return;
   }

   SomethingEntered(what=$)
   {
      /* If user logs back on while ghosted, delete ghost without penalties.
         Note that we assume here that a player cannot logon into a different
         room than they logged off in; this assumption fails in the following cases:
            - player death while logged off
            - AdminGoToSafety while logged off
      */

      if what = poGhostedPlayer
      {
         Send(poGhostedPlayer,@SetPhaseTimeEqualTo,
               #amount=GetTimeRemaining(ptPenaltyTimer));
         Send(self,@Delete);
      }

      propagate;
   }

   ResetFrames()
   {
      piIcon_frame = 1;
      piLeft_frame = 1;
      piRight_frame = 1;
      piLegs_frame = 1;
      piOverlays = 8;

      if prShield <> $
      {
         if piSoldierShieldOverlay = HS_SHIELD_BACK
         {
            piShield_frame = 1;
         }
         else
         {
            piShield_frame = 2;
         }

         piLeft_frame = 7;
         piOverlays = piOverlays + 1;
      }

      if prWeapon <> $
      {
         piWeapon_frame = 4;
         if prBowTop <> $
         {
            piWeapon_frame = 2;
            piLeft_frame = 7;
         }
         else
         {
            piRight_frame = 17;
         }

         piOverlays = piOverlays + 1;
      }

      return;
   }

   ResetPose()
   {
      Send(self,@ResetFrames);

      piIcon_translation = Send(poGhostedPlayer,@GetBodyTranslation);
      piLegs_translation = Send(poGhostedPlayer,@GetLegsTranslation);
      piArms_translation = Send(poGhostedPlayer,@GetArmsTranslation);
      piHair_translation = Send(poGhostedPlayer,@getHairColor);
      piSkin_Translation = Send(poGhostedPlayer,@GetSkinColor);
      piExpression = Send(poGhostedPlayer,@GetExpression);

      if poOwner <> $
      {
         Send(poOwner,@SomethingChanged,#what=self,#force=TRUE);
      }

      return;
   }

   SetLogoffGhost(GhostedPlayer = $)
   {
      local oWeapon;

      if GhostedPlayer = $
         OR NOT IsClass(GhostedPlayer,&User)
      {
         Debug("Bad GhostedPlayer!");

         return;
      }

      poGhostedPlayer = GhostedPlayer;

      vrIcon = Send(poGhostedPlayer,@GetIcon,#trueicon=TRUE);

      prHead = Send(poGhostedPlayer,@GetHeadRsc);
      prEyes = Send(poGhostedPlayer,@GetEyesRsc);
      prMouth = Send(poGhostedPlayer,@GetMouthRsc);
      prNose = Send(poGhostedPlayer,@GetNoseRsc);
      prToupee = Send(poGhostedPlayer,@GetHairRsc);

      prLeft_arm = Send(poGhostedPlayer,@GetLeftArmRsc);

      prRight_arm = Send(poGhostedPlayer,@GetRightArmRsc);
      prLegs = Send(poGhostedPlayer,@GetLegsRsc);
      prShield = Send(poGhostedPlayer,@GetShieldRsc);
      piShield_translation = Send(poGhostedPlayer,@GetShieldTranslation);
      oWeapon = Send(poGhostedPlayer,@LookUpPlayerWeapon);
      
      if Send(poGhostedPlayer,@FindUsing,#class=&SoldierShield) <> $
      {
         piSoldierShieldOverlay = Send(poGhostedPlayer,@GetShieldOverlayHotspot);
      }

      piWeapon_translation = 0;
      prBowTop = $;

      if oWeapon <> $
      {
         piWeapon_translation = Send(oWeapon,@GetPaletteTranslation);

         if isClass(oWeapon,&RangedWeapon)
         {
            prBowTop = Send(oWeapon,@GetSecondOverlay);
         }
      }

      if oWeapon <> $
      {
         prWeapon = Send(oWeapon,@GetOverlay);
      }
      else
      {
         prWeapon = $;
      }

      Send(self,@ResetPose);

      return;
   }

   SendAnimation()
   {
      if (piIcon_translation) <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION, 1,piIcon_translation);
      }

      AddPacket(1,ANIMATE_NONE, 2,piIcon_frame);

      return;
   }

   SendOverlays()
   {
      local i,iOverlays,hotspot,iLeft_group,iRight_group,iSkin_xlat,
            iArms_xlat;

      // Send overlay bitmap info to user.

      // Player has 8 standard overlays: right arm, left arm, legs, head, eyes, 
      //  mouth, nose, hair

      // Number of overlays
      AddPacket(1,piOverlays);

      // Left hand
      AddPacket(4,prLeft_arm, 1,HS_LEFT_HAND);
      if piArms_translation <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION, 1,piArms_translation);
      }

      AddPacket(1,ANIMATE_NONE, 2,piLeft_frame);

      // Right hand
      AddPacket(4,prRight_arm, 1,HS_RIGHT_HAND);
      if piArms_translation <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION, 1,piArms_translation);
      }

      AddPacket(1,ANIMATE_NONE, 2,piRight_frame);

      // Legs
      AddPacket(4,prLegs, 1,HS_LEGS);
      if piLegs_translation <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION, 1,piLegs_translation);
      }

      AddPacket(1,ANIMATE_NONE, 2,piLegs_frame);

      // Face
      iSkin_xlat = piSkin_translation;
      AddPacket(4,prHead, 1,HS_HEAD, 1,ANIMATE_TRANSLATION, 1,iSkin_xlat,
                1,ANIMATE_NONE, 2,1);
      AddPacket(4,prMouth, 1,HS_MOUTH, 1,ANIMATE_TRANSLATION, 1,iSkin_xlat,
                1,ANIMATE_NONE, 2,piExpression);
      AddPacket(4,prEyes, 1,HS_EYES, 1,ANIMATE_TRANSLATION, 1,iSkin_xlat,
                1,ANIMATE_NONE, 2,piExpression);
      AddPacket(4,prNose, 1,HS_NOSE, 1,ANIMATE_TRANSLATION, 1,iSkin_xlat,
                1,ANIMATE_NONE, 2,1);
      AddPacket(4,prToupee, 1,HS_TOUPEE, 1,ANIMATE_TRANSLATION,
                1,piHair_translation, 1,ANIMATE_NONE, 2,1);

      if prShield <> $
      {
         if piSoldierShieldOverlay <> $
         {
            AddPacket(4,prShield,1,piSoldierShieldOverlay);
         }
         else
         {
            AddPacket(4,prShield,1,HS_LEFT_WEAPON);
         }

         if piShield_translation <> 0
         {
            AddPacket(1,ANIMATE_TRANSLATION, 1,piShield_translation);
         }

         AddPacket(1,ANIMATE_NONE, 2,piShield_frame);
      }

      if prWeapon <> $
      {
         AddPacket(4,prWeapon);

         if prBowTop <> $
         {
            AddPacket(1,HS_BOTTOM_BOW);
         }
         else
         {
            AddPacket(1,HS_RIGHT_WEAPON);
         }

         if piWeapon_translation <> 0
         {
            AddPacket(1,ANIMATE_TRANSLATION, 1,piWeapon_translation);
         }

         AddPacket(1,ANIMATE_NONE, 2,piWeapon_frame);
      }

      return;
   }

   GetGhostedPlayer()
   {
      return poGhostedPlayer;
   }

end
////////////////////////////////////////////////////////////////////////////////
