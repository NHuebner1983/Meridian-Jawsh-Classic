// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
ActiveWallElement is ActiveObject

// Brambles, a monster-type wall element, uses code from this file.  If you
//  update this file, double-check the code in Brambles as well.

constants:

   include blakston.khd

   // 1.5 seconds
   EFFECT_INTERVAL = 1500

resources:

   include wallelem.lkod

   ActiveWallElement_name_rsc = "wall element"
   ActiveWallElement_icon_rsc = poisoncl.bgf
   ActiveWallElement_desc_rsc = "This is a wall spell element."
   
   ActiveWallElement_dissipate_rsc = "The wall element dissipates."
   ActiveWallElement_unaffected_rsc = "You are unaffected by the wall element."

classvars:

   vrName = ActiveWallElement_name_rsc
   vrIcon = ActiveWallElement_icon_rsc
   vrdesc = ActiveWallElement_desc_rsc

   viObject_flags = OF_NOEXAMINE

   viMoveOn_type = MOVEON_NOTIFY

   vrDissipateMessage = ActiveWallElement_dissipate_rsc
   vrUnaffectedMessage = ActiveWallElement_unaffected_rsc

   // Flag to see if the wall element effect is harmful.
   vbIsHarmful = TRUE

   // Does this have a Periodic timer check?
   vbPeriodic = TRUE

   // Does the element affect the caster?
   vbCanAffectCaster = FALSE
   vbIsAreaEffect = TRUE

properties:

   vbSummoned = FALSE

   poCaster = $
   ptExpire = $

   // This is the squared range that the element will affect.
   piRange = 0

   // This is a periodic timer that triggers periodic effects and
   //  clears the affected list.
   ptPeriodic = $

   // This is a list of objects already affected by the element
   //  this period.
   plAffected = $

messages:

   Constructor(caster=$,duration=$)
   {
      poCaster = caster;

      ptExpire = CreateTimer(self,@Expire,
                        Send(self,@GetDuration,#duration=duration));
      ptPeriodic = CreateTimer(self,@PeriodicEffect,
                        Send(self,@GetPeriodicDuration));

      if caster <> $ AND IsClass(caster,&User)
      {
         vbSummoned = TRUE;
      }

      propagate;
   }

   GetPeriodicDuration()
   {
      // 90 - 110// of base interval
      return (EFFECT_INTERVAL * Random(90,110))/100;
   }

   GetDuration(duration = 0)
   "Return the final duration modified as necessary."
   {
      return duration;
   }

   SomethingMoved(what = $,new_row = $,new_col = $)
   {
      local iRow, iCol;

      // Determine victim's row and column
      if new_row = $
      {
         iRow = Send(what,@GetRow);
      }
      else
      {
         iRow = new_row;
      }

      if new_col = $
      {
         iCol = Send(what,@GetCol);
      }
      else
      {
         iCol = new_col;
      }

      // Check for range
      if IsClass(what,&Battler)
         AND NOT (IsClass(what,&Player)
                  AND Send(what,@IsInCannotInteractMode))
         AND Send(self,@InRange,#what=what,#iRow=iRow,#iCol=iCol)
      {
         Send(self,@CheckForEffect,#what=what,#new_row=iRow,#new_col=iCol,
               #bMovement=TRUE);
      }

      return;
   }

   CheckForEffect(what = $,new_row = $,new_col = $)
   "Check for range to see if we apply the effect."
   {
      local oRoom;

      oRoom = Send(self,@GetOwner);

      // Might not affect caster.
      if (NOT IsClass(what,&Battler))
         OR ((NOT vbCanAffectCaster) AND what = poCaster)
      {
         return FALSE;
      }

      // Don't affect them again this cycle.
      if plAffected <> $
         AND FindListElem(plAffected,what) <> 0
      {
         return FALSE;
      }

      // Don't affect users that haven't moved yet.
      if IsClass(what,&Player)
      {
         if NOT Send(what,@CheckPlayerFlag,#flag=PFLAG_MOVED_SINCE_ENTRY)
         {
            return FALSE;
         }
      }

      // If this is harmful, and both caster and victim are players, then
      // disallow damage if caster's safety is on or if cannot do attack.
      // AllowBattlerAttack also performs all the other required checks,
      // so they are no longer needed in this class.
      if vbIsHarmful AND poCaster <> $
         AND NOT Send(poCaster,@AllowBattlerAttack,#victim=what,
                        #report=FALSE,#stroke_obj=self)
      {
         // We've been "affected" for this cycle.  This prevents super-spam.
         plAffected = Cons(what,plAffected);

         if IsClass(what,&Player)
            AND NOT Send(what,@IsInCannotInteractMode)
         {
            Send(what,@MsgSendUser,#message_rsc=vrUnaffectedMessage);
         }

         return FALSE;
      }

      Send(self,@DoEffect,#what=what,#new_row=new_row,#new_col=new_col);

      return TRUE;
   }

   PeriodicEffect()
   "Periodic check. Clears the affected list, does the effect "
   "if the wall is periodic."
   {
      local i, oObject;

      ptPeriodic = $;
      plAffected = $;

      if vbPeriodic
      {
         foreach i in Send(poOwner,@GetHolderActive)
         {
            oObject = Send(poOwner,@HolderExtractobject,#data=i);
            if IsClass(oObject,&Battler)
               AND NOT (IsClass(oObject,&Player)
                  AND Send(oObject,@IsInCannotInteractMode))
               AND Send(self,@InRange,#what=oObject,
                        #iRow=Send(oObject,@GetRow),
                        #iCol=Send(oObject,@GetCol))
            {
               Send(self,@CheckForEffect,#what=oObject);
            }
         }
      }

      ptPeriodic = CreateTimer(self,@PeriodicEffect,
                        Send(self,@GetPeriodicDuration));

      return;
   }

   DoEffect(what = $, new_row = $, new_col = $)
   "Apply the wall's effect to 'what'."
   {
      // Keep track that we've affected this object.
      plAffected = Cons(what,plAffected);

      // Event monsters with boosted levels are granted walkthrough walls
      // when a wall element damages or affects them
      if IsClass(what,&Monster)
         AND Send(what,@GetBoostedLevel) > 0
      {
         Send(what,@SetBehaviorFlag,#flag=AI_MOVE_WALKTHROUGH_WALLS);
      }
      
      if IsClass(what,&LupoggKing)
      {
         Send(what,@AngeredByWallElement,#what=self);
      }

      return;
   }

   InRange(what = $,iRow = $,iCol = $,bMovement = FALSE)
   "Checks if we can see the target and if so if they are in range."
   {
      local iRow_diff, iCol_diff, iDistanceSquared, iLongRange;

      iRow_diff = Send(self,@GetRow) - iRow;
      iCol_diff = Send(self,@GetCol) - iCol;

      iDistanceSquared = iRow_diff * iRow_diff + iCol_diff * iCol_diff;

      // This first check is to see if they're within a one square range if
      // this check was caused by movement.  If so, we reset the user's move
      // counter, since we make them spam move messages which can throw
      // off speedhack detection.
      if bMovement
      {
         // Make sure we're checking at least 1 square away
         // from current position.
         iLongRange = Bound(piRange,1,$);
      }
      else
      {
         iLongRange = piRange;
      }

      if iDistanceSquared <= (iLongRange * iLongRange)
      {
         if (iLongRange = piRange
               OR iDistanceSquared <= (piRange * piRange))
            AND Send(poOwner,@LineOfSight,#obj1=self,#obj2=what)
         {
            return TRUE;
         }
      }

      return FALSE;
   }

   Expire()
   {
      ptExpire = $;
      Send(self,@Delete);

      return;
   }

   Delete()
   {
      poCaster = $;
      plAffected = $;

      if ptPeriodic <> $
      {
         DeleteTimer(ptPeriodic);
         ptPeriodic = $;
      }

      if ptExpire <> $
      {
         DeleteTimer(ptExpire);
         ptExpire = $;
      }

      propagate;
   }

   ReqNewOwner(what = $)
   {
      return IsClass(what,&Room);
   }

   NewOwner(what = $)
   {
      Post(self,@LocationCheck,#where=what);

      plAffected = $;

      propagate;
   }

   LocationCheck(where = $)
   {
      if (IsClass(where,&GuildHall)
            AND Send(where,@InFoyer,#who=poCaster))
         OR (Send(where,@IsArena)
            AND NOT Send(where,@InPlay,#what=self,#bNonPlayerOkay=TRUE))
      {
         if poCaster <> $ AND IsClass(poCaster,&Player)
         {
            Send(poCaster,@MsgSendUser,#message_rsc=vrDissipateMessage);
         }

         Post(self,@Delete);
      }

      return;
   }

   GetCaster()
   {
      return poCaster;
   }

   IsAreaEffect()
   {
      return vbIsAreaEffect;
   }

   IsRangedAttack()
   {
      return FALSE;
   }

end
////////////////////////////////////////////////////////////////////////////////
