// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Gift is PassiveItem

constants:

   include blakston.khd
   include protocol.khd

resources:

   include gift.lkod

   gift_name_rsc = "gift"
   gift_icon_rsc = package.bgf
   gift_desc_rsc = \
      "This is a gift from the gods, to thank you for your patience and "
      "your patronage."
   gift_open = "With unbridled delight, you open the gift to find %s%s inside!"
   gift_desc_name = \
      "This is a neatly wrapped present.  A tag attached to the bow reads, "
      "'From %q with love'."
   gift_bonded_wrapped = "You sense that your %s has been giftwrapped."
   gift_bonded_unwrapped = \
      "You sense that your gift has been unwrapped to reveal %s%s."

classvars:

   vrName = gift_name_rsc
   vrIcon = gift_icon_rsc
   vrDesc = gift_desc_rsc

   viUse_type = ITEM_SINGLE_USE
   viUse_amount = 1

   viBulk = 50
   viWeight = 50

   viValue_average = 30

properties:

   poGiftGiver = $     /// if poGiftGIver = $, then it's from the gods.
   poContents = $

messages:

   Constructor(contents = $, giver = $)
   {
      local oBondee;

      if contents <> $
      {
         if Send(contents,@HasAttribute,#ItemAtt=IA_BONDED)
         {
            oBondee = Nth(Send(contents,@GetAttributeData,#ItemAtt=IA_BONDED),2);
            Send(oBondee,@ClearBondedItem);
            Send(oBondee,@BondItem,#what=self);
            if Send(contents,@GetOwner) <> oBondee
            {
               Send(oBondee,@MsgSendUser,#message_rsc=gift_bonded_wrapped,
                     #parm1=Send(contents,@GetName));
            }
         }
         if Send(contents,@GetOwner) <> $
         {
            Send(Send(contents,@GetOwner),@LeaveHold,#what=contents);
            Send(contents,@NewOwner,#what=$);
         }
      }
      poGiftGiver = giver;
      poContents = contents;

      propagate;
   }

   CanBeStoredInVault()
   {
      return TRUE;
   }

   GetBulk()
   {
      if poContents <> $
      {
         // Gifts should have no bulk.
         return 0; //Send(poContents,@GetBulk) + 1;
      }

      propagate;
   }

   GetWeight()
   {
      if poContents <> $
      {
         // Gifts should be weightless.
         return 0; //Send(poContents,@GetWeight) + 1;
      }

      propagate;
   }

   GetValue()
   {
      // Can't really tell the value of an item in a box.
      return 10;
   }

   DoBaseDesc()
   {
      if poGiftGiver = $
      {
         AddPacket(4, gift_desc_rsc);

         return;
      }

      AddPacket(4,gift_desc_name, 6,Send(poGiftGiver,@GetTrueName));

      return;
   }

   ReqNewApply()
   {
      return TRUE;
   }

   NewApplied(what = $)
   {
      local rand, bAny, oBondee, oldOwner;

      bAny = FALSE;
      if Length(Send(what,@GetSpellList)) < 5
      {
         bAny = TRUE;
      }

      while poContents = $
      {
         // Give one of the five amulets.
         rand = Random(1,9);

         if rand <= 2
            AND (bAny OR Send(what,@GetNumSpellsInSchool,#school=SS_QOR) > 1)
         {
            poContents = Create(&QorCharm);
         }

         if (rand = 3 OR rand = 4)
            AND (bAny OR Send(what,@GetNumSpellsInSchool,#school=SS_KRAANAN) > 1)
         {
            poContents = Create(&KraananCharm);
         }

         if (rand = 5 or rand = 6)
            AND (bAny OR Send(what,@GetNumSpellsInSchool,#school=SS_FAREN) > 1)
         {
            poContents = Create(&FarenCharm);
         }

         if (rand = 7 or rand = 8)
            AND (bAny OR Send(what,@GetNumSpellsInSchool,#school=SS_SHALILLE) > 1)
         {
            poContents = Create(&ShalilleCharm);
         }

         if rand = 9
         {
            poContents = Create(&RiijaCharm);
         }
      }

      Send(poOwner,@MsgSendUser,#message_rsc=gift_open,
            #parm1=Send(poContents,@GetIndef),#parm2=Send(poContents,@GetName));

      oldOwner = poOwner;
      Send(poOwner,@LeaveHold,#what=self);
      Send(self,@NewOwner,#what=$);
      Send(oldOwner,@NewHold,#what=poContents);

      // Note that this RecalcBulkAndWeight is entirely superfluous,
      // but we'll leave it here as a safeguard against future wierdness.
      Send(oldOwner,@RecalcBulkAndWeight);
      if Send(self,@HasAttribute,#ItemAtt=IA_BONDED)
      {
         oBondee = nth(Send(self,@GetAttributeData,#ItemAtt=IA_BONDED),2);
         Send(oBondee,@ClearBondedItem);
         Send(oBondee,@BondItem,#what=poContents);
         if oldOwner <> oBondee
         {
            Send(oBondee,@MsgSendUser,#message_rsc=gift_bonded_unwrapped,
                  #parm1=Send(poContents,@GetIndef),
                  #parm2=Send(poContents,@GetName));
         }
      }

      poContents = $;

      Send(self,@Delete);

      return;
   }

   Delete()
   {
      if poContents <> $
      {
         Send(poContents,@Delete);
      }

      poContents = $;
      poGiftGiver = $;

      propagate;
   }

end
////////////////////////////////////////////////////////////////////////////////
