// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
MagicBow is Bow

constants:

   include blakston.khd

resources:

   include magicbow.lkod

   MagicBow_name_rsc = "magic bow"
   MagicBow_desc_rsc = \
      "Crafted by the gods, this bow hums with magical power. Usually such a weapon would reduce your spell power, but this magical bow will help you thrive."

classvars:

   vrName = MagicBow_name_rsc
   vrDesc = MagicBow_desc_rsc

   viValue_average = 130000
   viBulk = 70
   viWeight = 70

   viSpell_modifier = 10
   
   viHits_init_min = 470
   viHits_init_max = 750

properties:

   viWeaponDamage = 4
   viRange = 85 * FINENESS
   viHit_roll_modifier = 125

   // What's the basic color of the wood?
   viBaseXLAT = XLAT_TO_SKY

   piAttack_Type = ATCK_WEAP_MAGIC + ATCK_WEAP_PIERCE

   ptColorChange = $
   piColorChangeInterval = 3000
   piColorChangeIdleInterval = 15000

messages:

   Constructed()
   {
      Send(self,@StartColorShift);

      propagate;
   }

   StartColorShift()
   {
      if ptColorChange <> $ AND IsTimer(ptColorChange)
      {
         return;
      }

      ptColorChange = CreateTimer(self, @SetColor, piColorChangeInterval);

      return;
   }

   SetColor(iColor=XLAT_TO_SKY)
   {
      local iRandom, lColors, oRoom, oPlayer;

      oRoom = $;
      oPlayer = $;

      if poOwner <> $ AND IsClass(poOwner, &Player)
      {
         oPlayer = poOwner;
         oRoom = Send(oPlayer, @GetOwner);
      }

      if oRoom = $ AND poOwner <> $ AND IsClass(poOwner, &Room)
      {
         oRoom = poOwner;
      }

      if oRoom = $ OR (oPlayer <> $ AND NOT Send(oPlayer,@IsEquipped,#oObj=self))
      {
         // Do not perform color changes until the item is in use - it might create a lot of lag.
         // We'll definitely still show the color changes if the bow is on the ground, that's should be a fun effect.
         ptColorChange = CreateTimer(self, @SetColor, piColorChangeIdleInterval);

         return;
      }

      ptColorChange = CreateTimer(self, @SetColor, piColorChangeInterval);

      lColors = [
         XLAT_TO_ORANGE,
         XLAT_TO_BLUE,
         XLAT_TO_SKY,
         XLAT_TO_YELLOW
      ];

      if iColor = XLAT_TO_SKY
      {
         iColor = Nth(lColors, Random(1, Length(lColors)));
      }

      viBaseXLAT = iColor;

      Send(self,@UpdateColor);

      if poOwner <> $ AND IsClass(poOwner, &Room)
      {
         oRoom = poOwner;
      }

      if poOwner <> $ AND IsClass(poOwner, &Player)
      {
         oRoom = Send(poOwner, @GetOwner);
      }

      if oRoom <> $ AND IsClass(oRoom, &Room)
      {
         Send(oRoom,@SomethingChanged,#what=self);
      }

      return;
   }

   NewUsed()
   {
      Send(self, @StartColorShift);

      propagate;
   }

   NewOwner()
   {
      Send(self, @StartColorShift);

      propagate;
   }

   Delete()
   {
      Send(self, @StopTimer);

      propagate;
   }

   StopTimer()
   {
      if ptColorChange <> $ AND IsTimer(ptColorChange)
      {
         DeleteTimer(ptColorChange);
      }

      ptColorChange = $;

      return;
   }

end
////////////////////////////////////////////////////////////////////////////////