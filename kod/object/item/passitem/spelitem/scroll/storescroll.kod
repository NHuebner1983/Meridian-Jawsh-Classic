// Me// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
StoreScroll is PassiveItem

constants:

   include blakston.khd
   include protocol.khd

resources:

   Store_scroll_name_rsc = "store contract"
   Store_scroll_icon_rsc = scr07.bgf
   Store_scroll_desc_rsc = \
      "This contract will setup a store for you to sell your goods to the public."
   Store_scroll_moved_store = "Your store has been moved from %s to %s."
   Store_scroll_store_already_open = "Your store is already open in %s."

classvars:

   vrName = Store_scroll_name_rsc
   vrIcon = Store_scroll_icon_rsc
   vrDesc = Store_scroll_desc_rsc

   viUse_type = ITEM_SINGLE_USE
   viUse_amount = 1

   viBulk = 50
   viWeight = 50

   viValue_average = 300000

properties:

    pbAllowMovingStore = TRUE

messages:

    Constructor()
    "Store contracts are no longer used for global marketplace."
    {
        // We can turn back on personal stores, but it's annoying to see signs everywhere from individuals.
        // We now have one sign everyone can use, it should be good enough.
        Send(self, @Delete);

        return;
    }

    GetValue(type=$)
    {
        if type = $
        {
            type = &Shilling;
        }

        if type = &Shilling
        {
            return 10;
        }

        if type = &Platinum
        {
            return 0;
        }
        
        // Can't really tell the value of an item in a box.
        return 10;
    }

    ReqNewApply()
    {
        return TRUE;
    }

    NewApplied(who=$,bContracted=FALSE)
    {
        local oRoom, oStore, bNewStore;

        oRoom = Send(poOwner,@GetOwner);
        //oStore = Send(poOwner,@GetStore);

        bNewStore = FALSE;

        if (oRoom = $)
        {
            Debug(who, Send(who,@GetName), " tried to create a reflection in $ room.");

            return;
        }

        // if (oStore = $)
        // {
        //     bNewStore = TRUE;

        //     oStore = Create(&Store,#oStoreOwner=poOwner);
        //     Send(oStore,@SetStoreOwner,#who=who);

        //     // poMaster set in Reflection's Constructor, but not added as a minion.
        //     Send(oStore,@SetStoreOwner,#oStoreOwner=poOwner,#bContracted=bContracted);
        //     Send(poOwner,@SetStore,#oStore=oStore);
        //     Send(oRoom,@NewHold,#what=oStore,#new_row=Send(poOwner,@GetRow),
        //         #new_col=Send(poOwner,@GetCol),#fine_row=Send(poOwner,@GetFineRow),
        //         #fine_col=Send(poOwner,@GetFineCol));
            
        //     // Save the store location
        //     Send(poOwner, @SaveStoreLocation);
        // }

        // if NOT bNewStore AND pbAllowMovingStore
        // {
        //     // Move the store to our current position
        //     Send(poOwner, @ResetStoreLocation, #change=TRUE);
        //     Send(poOwner,@MsgSendUser,#message_rsc=Store_scroll_moved_store,
        //         #parm1=Send(oStore,@GetRoomName),
        //         #parm2=Send(oRoom,@GetName));
        // }
        // else if NOT bNewStore AND NOT pbAllowMovingStore
        // {
        //     // We are not allowed to move our store, just tell the user where it is.
        //     Send(poOwner,@MsgSendUser,#message_rsc=Store_scroll_store_already_open,
        //         #parm1=Send(oStore,@GetRoomName));
        // }

        return;
    }

end
////////////////////////////////////////////////////////////////////////////////