// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
DiscipleRobe is RobeBase

/// This item is significant in that it is a torso with something
/// hotspotted onto it.  WHy they did it that way, but I guess we 
/// all learn from other people's stupid implementations, neh?

constants:

   include blakston.khd

resources:

   include robedisc.lkod

   RobeInsignia_name_rsc = "robes of the disciple"
   RobeInsignia_icon_rsc = Robe.bgf
   RobeInsignia_desc_rsc = \
      "Heavy and warm, disciple robes typically denote a fervent (and some "
      "would say unhealthy) dedication to one school or another.   These robes "
      "bear the insignia of %s and will give bonuses to spells in that school."

   disciplerobe_riija_female = emblm-rf.bgf
   disciplerobe_riija_male = emblm-rm.bgf
   disciplerobe_faren_female = emblm-ff.bgf
   disciplerobe_faren_male = emblm-fm.bgf
   disciplerobe_qor_female = emblm-qf.bgf
   disciplerobe_qor_male = emblm-qm.bgf
   disciplerobe_shalille_female = emblm-sf.bgf
   disciplerobe_shalille_male = emblm-sm.bgf
   disciplerobe_jala_female = emblm-jf.bgf
   disciplerobe_jala_male = emblm-jm.bgf
   disciplerobe_kraanan_female = emblm-kf.bgf
   disciplerobe_kraanan_male = emblm-km.bgf

classvars:

   vrName = RobeInsignia_name_rsc
   vrIcon = RobeInsignia_icon_rsc
   vrDesc = RobeInsignia_desc_rsc
   viGround_group = 1
   viInventory_group = 2
   viBroken_group = 3
   viSpell_modifier = 10
   viBulk = 160
   viWeight = 130
   viValue_average = 2000
   viItem_type = ITEMTYPE_ARMOR

properties:

   viXLAT_immortal =  XLAT_TO_SKY
   viXLAT_no_knowledge =  XLAT_TO_YELLOW
   viXLAT_level_one = XLAT_TO_SKIN1
   viXLAT_level_two = XLAT_TO_SKIN2
   viXLAT_level_three = XLAT_TO_ORANGE 
   viXLAT_level_four = XLAT_TO_SKIN4
   viXLAT_qor_master = XLAT_TO_BLACK
   viXLAT_shalille_master = XLAT_TO_GRAY
   viXLAT_faren_master = XLAT_TO_RED
   viXLAT_kraanan_master = XLAT_TO_BLUE
   viXLAT_riija_master = XLAT_TO_PURPLE
   viXLAT_jala_master = XLAT_TO_GREEN
   piSchool = SS_RIIJA
   piLevel = 0
   prInsignia_male =  disciplerobe_riija_male
   prInsignia_female = disciplerobe_riija_female
   piDefense_bonus = 5
   pbImmortalColor = TRUE
   
   // We'll set the color of the robe here instead of the robebase.kod.
   pbColorSet = FALSE

messages:

   Constructor(school = -1)
   {
      if school = -1
      {
         school = Random(1,6);
      }

      Send(self,@SetSchool,#school=school);
	  
	  // Instead of showing a blue kraanan robe, we'll show the lvl 5 of the robe
	  // So its recognizable easier by the user who picks it up.
	  Send(self,@SetRobeColorAsMaster);

      propagate;
   }
   
   SetRobeColorAsMaster()
   {
      if piSchool = SS_JALA
	  {
         Send(self,@SetPaletteTranslation,
            #translation=Send(SYS,@EncodeTwoColorXLAT,#color1=viXLAT_jala_master,
                              #color2=XLAT_TO_SKIN1));
	     pbColorSet = TRUE;
	  }
	  else if piSchool = SS_FAREN
	  {
         Send(self,@SetPaletteTranslation,
            #translation=Send(SYS,@EncodeTwoColorXLAT,#color1=viXLAT_faren_master,
                              #color2=XLAT_TO_SKIN1));
	     pbColorSet = TRUE;
	  }
	  else if piSchool = SS_KRAANAN
	  {
         Send(self,@SetPaletteTranslation,
            #translation=Send(SYS,@EncodeTwoColorXLAT,#color1=viXLAT_kraanan_master,
                              #color2=XLAT_TO_SKIN1));
	     pbColorSet = TRUE;
	  }
	  else if piSchool = SS_SHALILLE
	  {
         Send(self,@SetPaletteTranslation,
            #translation=Send(SYS,@EncodeTwoColorXLAT,#color1=viXLAT_shalille_master,
                              #color2=XLAT_TO_SKIN1));
	     pbColorSet = TRUE;
	  }
	  else if piSchool = SS_QOR
	  {
         Send(self,@SetPaletteTranslation,
            #translation=Send(SYS,@EncodeTwoColorXLAT,#color1=viXLAT_qor_master,
                              #color2=XLAT_TO_SKIN1));
	     pbColorSet = TRUE;
	  }
	  else if piSchool = SS_RIIJA
	  {
         Send(self,@SetPaletteTranslation,
            #translation=Send(SYS,@EncodeTwoColorXLAT,#color1=viXLAT_riija_master,
                              #color2=XLAT_TO_SKIN1));
	     pbColorSet = TRUE;
	  }
	  
	  return;
   }

   GetBaseSpellModifier(oSpell=$)
   {
      if Send(oSpell,@GetSchool) = piSchool
      {
         return Bound(4 * piLevel,5,20);
      }

      return 5;
    }

   SetXLATTranslation(translation=$)
   {
      local skin_color, XLAT;

      if poOwner <> $
      {
         skin_color = Send(poOwner,@GetSkinColor);
         skin_color = Send(poOwner,@ConvertSkinColorToXLAT,#skin_color=skin_color);
      }
      else
      {
         skin_color = XLAT_TO_SKIN2;
      }
      XLAT = Send(SYS,@EncodeTwoColorXLAT,#color1=translation,#color2=skin_color);
      Send(self,@SetPaletteTranslation,#translation=XLAT);

      if poOwner <> $
      {
         if IsClass(poOwner,&Room)
         {
            Send(Send(SYS,@UtilGetRoom,#what=self),@SomethingChanged,#what=self);
         }

         if IsClass(poOwner,&User)
         {
            Send(poOwner,@SomethingChanged,#what=self);
            Send(self,@DoPlayerArt);
         }
      }

      return;
   }

   ResetColors()
   {
      local i, oWarEvent, iSide, oSpell, iHigh_level, skin_color, bFound;

      iHigh_level = 0;

      oWarEvent = Send(SYS,@GetWarEvent);
      if Send(oWarEvent,@IsActive)
      {
         iSide = Send(oWarEvent,@GetPlayerSide,#who=poOwner);
         Send(self,@SetXLATTranslation,#translation=Send(oWarEvent,@GetSideColor,#side=iSide));

         return;
      }

      if (IsClass(poOwner,&DM) AND pbImmortalColor)
      {
         Send(self,@SetXLATTranslation,#translation=viXLAT_immortal);

         return;
      }

      foreach i in Send(poOwner,@GetSpellList)
      {
         oSpell = Send(SYS,@FindSpellByNum,#num=Send(poOwner,@DecodespellNum,#compound=i));
         if piSchool = Send(oSpell,@GetSchool)
         {
            if Send(oSpell,@GetLevel) > iHigh_level
            {
               iHigh_Level = Send(oSpell,@GetLevel);
            }
         }
      }

      piLevel = iHigh_level;

      bFound = FALSE;

      /// Okay, decipher the high level.
      if iHigh_level = 0
      {
         Send(self,@SetXLATTranslation,#translation=viXLAT_no_knowledge);
      }
      else if iHigh_level = 1
      {
         Send(self,@SetXLATTranslation,#translation=viXLAT_level_one);
      }
      else if iHigh_level = 2
      {
         Send(self,@SetXLATTranslation,#translation=viXLAT_level_two);
      }
      else if iHigh_level = 3
      {
         Send(self,@SetXLATTranslation,#translation=viXLAT_level_three);
      }
      else if iHigh_level = 4
      {
         Send(self,@SetXLATTranslation,#translation=viXLAT_level_four);
      }

      // Okay, it's above level four.  Let's be school specific, shall we?
      if iHigh_level > 4
      {
         if piSchool = SS_JALA
         {
            Send(self,@SetXLATTranslation,#translation=viXLAT_jala_master);
         }
         else if piSchool = SS_FAREN
         {
            Send(self,@SetXLATTranslation,#translation=viXLAT_faren_master);
         }
         else if piSchool = SS_KRAANAN
         {
            Send(self,@SetXLATTranslation,#translation=viXLAT_kraanan_master);
         }
         else if piSchool = SS_SHALILLE
         {
            Send(self,@SetXLATTranslation,#translation=viXLAT_shalille_master);
         }
         else if piSchool = SS_QOR
         {
            Send(self,@SetXLATTranslation,#translation=viXLAT_qor_master);
         }
         else if piSchool = SS_RIIJA
         {
            Send(self,@SetXLATTranslation,#translation=viXLAT_riija_master);
         }
      }

      return;
   }

   ReqUse()
   "Called when the player tries to use the item"
   {
      local i, oItemAtt;

      // Check to be sure nothing in ItemAtts disallows this.
      foreach i in plItem_Attributes
      {
         oItemAtt = Send(SYS,@FindItemAttByNum,
                        #num=Send(self,@GetNumFromCompound,#compound=First(i)));
         if NOT Send(oItemAtt,@ItemReqUse,#oItem=self,#oPlayer=poOwner)
         {
            return FALSE;
         }
      }

      return TRUE;
   }

   NewUsed()
   {
      if prInsignia_male <> $
      {
         Send(poOwner,@SetOverlay,#what=self);
      }

      Send(self,@ResetColors);

      propagate;
   }
  
   NewUnused()
   {
      if prInsignia_male <> $
      {
         Send(poOwner,@RemoveOverlay,#what=self);
      }

      propagate;
   }

   GetResistanceModifiers()
   {
      return [ [ ATCK_WEAP_ALL, -10],
               [-ATCK_SPELL_FIRE,-10],
               [-ATCK_SPELL_SHOCK,15]
             ];
   }

   GetOverlay()
   {
      if Send(poOwner,@GetGender) = GENDER_MALE
      {
         return prInsignia_male;
      }

      return prInsignia_female;
   }

   GetOverlayHotspot()
   {
      return HS_EMBLEM;
   }

   SendOverlayAnimation(iAnimation = $)
   {
      if (piItem_flags & ITEM_PALETTE_MASK) <> 0
      {
         AddPacket(1,ANIMATE_TRANSLATION,1,piItem_flags & ITEM_PALETTE_MASK);
      }

      if iAnimation = PANM_WEAPON_ATTACK
      {
         AddPacket(1,ANIMATE_ONCE,4,300,2,2,2,4,2,1);

         return;
      }

      if iAnimation = PANM_FIST_ATTACK
      {
         AddPacket(1,ANIMATE_ONCE,4,600,2,3,2,4,2,1);

         return;
      }

      if iAnimation = PANM_BOW_FIRE
      {
         AddPacket(1,ANIMATE_ONCE,4,1200,2,5,2,5,2,1);

         return;
      }

      if iAnimation = PANM_DANCE
      {
         AddPacket(1,ANIMATE_CYCLE,4,150,2,6,2,21);

         return;
      }

      AddPacket(1,ANIMATE_NONE,2,1);

      return;
   }

   SetSchool(school=SS_RIIJA,bRefresh=FALSE)
   {
      if bRefresh
      {
         School = piSchool;
      }
      else
      {
         piSchool = School;
      }

      if school = SS_RIIJA
      {
         prInsignia_male =  disciplerobe_riija_male;
         prInsignia_female = disciplerobe_riija_female;
      }
      else if school = SS_JALA
      {
         prInsignia_male =  disciplerobe_jala_male;
         prInsignia_female = disciplerobe_jala_female;
      }
      else if school = SS_FAREN
      {
         prInsignia_male =  disciplerobe_faren_male;
         prInsignia_female = disciplerobe_faren_female;
      }
      else if school = SS_QOR
      {
         prInsignia_male =  disciplerobe_qor_male;
         prInsignia_female = disciplerobe_qor_female;
      }
      else if school = SS_SHALILLE
      {
         prInsignia_male =  disciplerobe_shalille_male;
         prInsignia_female = disciplerobe_shalille_female;
      }
      else if school = SS_KRAANAN
      {
         prInsignia_male =  disciplerobe_kraanan_male;
         prInsignia_female = disciplerobe_kraanan_female;
      }

      if poOwner <> $
      {
         Send(poOwner,@SomethingChanged,#what=self);
      }

      return;
   }

   SendOverlayInformation(ianimation = $)
   {
      AddPacket(4,Send(self,@GetOverlay));
      AddPacket(1,Send(self,@GetOverlayHotspot));
      Send(self,@SendOverlayAnimation,#iAnimation=iAnimation);

      return;
   }

   DoBaseDesc()
   {
      local oSpell;

      // Find a spell, any spell, so we can get the string out of it
      // for which school we are.
      oSpell = Send(SYS,@FindSpellByNum,#num=SID_BLINK);
      AddPacket(4,vrDesc,4,Send(oSpell,@GetSchoolStr,#iSchool=piSchool));

      return;
   }

   GetSchool()
   {
      return piSchool;
   }

end
////////////////////////////////////////////////////////////////////////////////
