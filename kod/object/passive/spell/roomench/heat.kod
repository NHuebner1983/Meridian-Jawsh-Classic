// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Heat is RoomEnchantment

constants:

   include blakston.khd

   // Total duration: 10 realtime minutes
   HEAT_TIME = 300000

resources:

   include heat.lkod

   heat_name_rsc = "heat"
   heat_icon_rsc = iheat.bgf
   heat_desc_rsc = \
      "Fills the room with the earth magic of Faren, heating "
      "all armor to a primordial molten state and searing the "
      "flesh of those who wear it.  "
      "Requires red mushroom and firesand to cast."
   
   heat_already_enchanted = "This place already has a heat enchantment."

   heat_on = \
      "Faren earth magic fills the room, heating all armor to a molten state "
      "and searing the flesh of those who wear it."
   heat_off = "The armor-heating field dissipates."
   heat_new_entrant = \
      "Faren earth magic fills the room heating all armor to a molten state."
   heat_kills_you = "You expire from burns caused by your armor."
   heat_kills_him = "%s%s expires from armor-induced burns."

   heat_hurts_you = \
      "You offer a yelp of pain as your red-hot armor presses against your skin."

   heat_sound = fheat.ogg

classvars:

   vrName = heat_name_rsc
   vrIcon = heat_icon_rsc
   vrDesc = heat_desc_rsc

   vrAlreadyEnchanted = heat_already_enchanted
   vrRoomEnchKilled = heat_kills_you
   vrRoomEnchKiller = heat_kills_him
   vrRoomEnchHit = heat_hurts_you

   viAttack_spell = ATCK_SPELL_FIRE
   viSpell_num = SID_HEAT
   viSchool = SS_FAREN
   viSpell_level = 3
   viMana = 8

   viHarmful = TRUE
   viNoNewbieOffense = TRUE
   vbIsAreaEffect = TRUE

   vrSucceed_wav = heat_sound
   viChance_To_Increase = 35
   viMeditate_ratio = 20

properties:

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&RedMushroom,1],plReagents);
      plReagents = Cons([&FireSand,1],plReagents);

      return;
   }

   CastSpell( who = $, iSpellPower = 0 )
   "Initiation point for the spell."
   {
      local oRoom, iPeriod;

      oRoom = Send(who,@GetOwner);

      Send(oRoom,@SomeoneSaid,#type=SAY_MESSAGE,#string=heat_on,#what=self);

      // ranges from 7 to 17 seconds
      iPeriod = (170-iSpellPower)/10;
      // can't store in greater fineness - value stores state too!
      iPeriod = iPeriod * 1000;

      Send(oRoom,@RoomStartEnchantment,#what=self,#time=iPeriod,
            #state=[iPeriod + iSpellPower, who],#addicon=TRUE,#lastcall=FALSE);

      propagate;
   }

   StartPeriodicEnchantment(who = $, where = $, state = $)
   "Sends enchantment message to room like CastSpell for most room enchantments, "
   "but silent, and done as often as necessary"
   {
      local iNext_time, iCombined, iPower, iPeriod;

      // First, extract the spellpower from the state
      iCombined = First(state);
      iPower = iCombined % 100;
      iCombined = iCombined - iPower;

      // Ranges from 7 to 17 seconds
      iPeriod = (170-iPower)/10;
      // Can't store in greater fineness - value stores state too!
      iPeriod = iPeriod * 1000;
      
      // Global effects of the enchantment
      // State is elapsed time in ms
      iNext_time = iCombined + iPeriod;
      if iNext_time >= HEAT_TIME
      {
         Send(where,@RoomStartEnchantment,#what=self,#time=HEAT_TIME-iCombined,
               #state=[HEAT_TIME + iPower, Nth(state,2)],#addicon=False,
               #lastcall=TRUE);

         return;
      }

      Send(where,@RoomStartEnchantment,#what=self,#time=iPeriod,
            #state=[iNext_time+iPower, Nth(state,2)],#addicon=FALSE,
            #lastcall=FALSE);

      Send(where,@EnchantAllOccupants,#what=self,#iSpellPower=iPower,
            #state=state);

      return;
   }

   StartEnchantmentNewOccupant(who = $,state = $)
   "Called on new occupants of the enchanted room."
   {
      Send(who,@MsgSendUser,#message_rsc=heat_new_entrant);
      Send(self,@StartEnchantment,#who=who,#state=state);

      return;
   }

   StartEnchantment(who = $, state = $)
   "Does enchantment effect on one player"
   {
      if (who = $)
      {
         return;
      }

      Send(self,@RoomEnchantmentDamage,#oTarget=who,#state=state);

      return;
   }

   ComputeDamage(who=$,oTarget=$,iDamage=$)
   {
      local i, lUsing;

      lUsing = Send(oTarget,@GetPlayerUsing);

      iDamage = 0;

      foreach i in lUsing
      {
         iDamage = iDamage + Send(i,@GetHeatDamage);
      }

      return iDamage;
   }

   EndSpell(where = $, state = $)
   "Called when spell expires."
   {
      Send(where,@SomeoneSaid,#type=SAY_MESSAGE,#string=heat_off,#what=self);

      return;
   }

   EndRoomEnchantment(who = $, state = $)
   "Ends enchantment effect on one player"
   {
      Send(who,@RemoveEnchantment,#what=self);

      return;
   }

   RemoveEnchantment(who = $)
   "Remove enchantment effects on this occupant"
   {
      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
