// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


/////////////////////////////////////////////////////////////////////////////////
Melancholy is Jala

constants:

   include blakston.khd

resources:

   include melcholy.lkod

   Melancholy_name_rsc = "melancholy"
   Melancholy_icon_rsc = imlnchly.bgf
   Melancholy_desc_rsc = \
      "This is a sad song, invoking feelings of loss and sorrow.  It causes "
      "most people hearing it to experience overwhemling sadness, often "
      "leading to foul moods.  This music is appropriate for funerals and "
      "fighting against the forces of good.  Requires one sapphire to cast."

   Melancholy_song = ksong.ogg

   Melancholy_cast = "You begin to play a melancholy song."
   Melancholy_starts = "%s%s begins to play a melancholy song."
   Melancholy_ends = "The melancholy song played by %s%s fades away."
   Melancholy_caster_ends = "Your melancholy song fades."
   Melancholy_caster_enter = "Your heart feels heavy."
   Melancholy_enter = "%s%s's melancholy song makes your heart feel heavy."
   Melancholy_leave = \
      "You can no longer hear the melancholy notes of %s%s's song."

classvars:

   vrEnchantmentOn = Melancholy_cast
   vrEnchantmentOnOther = Melancholy_starts
   vrEnchantmentOff = Melancholy_caster_ends
   vrEnchantmentOffOther = Melancholy_ends
   vrEnterRadiusCaster = Melancholy_caster_enter
   vrEnterRadius = Melancholy_enter
   vrLeaveRadius = Melancholy_leave

   vrName = Melancholy_name_rsc
   vrIcon = Melancholy_icon_rsc
   vrDesc = Melancholy_desc_rsc

   viSpell_num = SID_MELANCHOLY
   viSchool = SS_JALA
   viSpell_level = 1

   viMana = 2
   viManaDrain = 0
   viDrainTime = 5000

   viSpellExertion = 1
   viChance_To_Increase = 25
   viMeditate_ratio = 20

   viAffectsEveryone = TRUE

properties:

   prMusic = Melancholy_song

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&Sapphire,1],plReagents);

      return;
   }

   CastSpell(who=$,lTargets=$)
   {
      local oTarget;
      
      if (lTargets <> $)
      {
         oTarget = First(lTargets);
      }
      else
      {
         oTarget = who;
      }

      Send(self, @RemoveRadiusEnchant, #who=oTarget, #iSpellNum=SID_MIRTH);

      propagate;
   }

   AddEnchantmentEffects(who=$,state=$)
   {
      if IsClass(who,&User)
      {
         Send(who,@SetAction,#action=UA_SAD);
      }

      propagate;
   }

   RemoveEnchantmentEffects(who=$,iPower=0,source=$)
   {
      if IsClass(who,&User)
         AND Send(who,@GetAction) = UA_SAD
      {
         Send(who,@SetAction,#action=UA_NORMAL);
      }

      propagate;
   }

   // Stuff we handle to be an attack modifier.

   ModifyHitRoll(who = $,what = $,hit_roll = $,state = $)
   {
      if what = $
      {
         return hit_roll;
      }

      // Only affect the good ones...
      if Send(what,@GetKarma,#detect=TRUE) > 0
      {
         // Give a small bonus
         return hit_roll + Nth(state,5);
      }

      return hit_roll;
   }

   ModifyDamage(who = $,what = $,damage = $,state = $)
   {
      local iPower;

      if what = $
      {
         return damage;
      }

      // Only affect the good ones...
      if Send(what,@GetKarma,#detect=TRUE) > 0
      {
         iPower = Bound(Nth(state,5) / 24,1,4);

         return damage + Random(1,iPower);
      }

      return damage;
   }

end
////////////////////////////////////////////////////////////////////////////////
