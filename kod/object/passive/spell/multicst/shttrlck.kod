// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
ShatterLock is MultiCastSpell

constants:

   include blakston.khd

   // Number of members online greater than this number doesn't apply a penalty.
   MIN_MEMBERS_ONLINE = 2

resources:

   include shttrlck.lkod

   ShatterLock_name_rsc = "shatterlock"
   ShatterLock_icon_rsc = ishatlok.bgf
   ShatterLock_desc_rsc = \
      "Penetrates the locks of a guild hall (note that it won't open other "
      "kinds of doors elsewhere).  Requires four Kriipa Claws to cast, and "
      "the casters' energies must be focused through a prism."

   Shatterlock_safety = \
      "You must not have a guardian angel and must turn your safety OFF "
      "before you cast this spell.  Note that you will marked as an outlaw "
      "as the result of casting this spell."

   Shatterlock_outlaw = \
      "NOTE: Casting this spell will mark you as an outlaw, even if you are "
      "not successful in breaking into the hall.  Therefore, you must turn "
      "your safety OFF before casting the spell."

   ShatterLock_cast_complete = \
      "As you finish your incantation, the door to the guild hall opens!"

   ShatterLock_guildwarning = \
      "You have a strange feeling that your guild hall's defenses are "
      "being tampered with."

   ShatterLock_sound = kraanan.ogg

classvars:

   vrName = ShatterLock_name_rsc
   vrIcon = ShatterLock_icon_rsc
   vrDesc = ShatterLock_desc_rsc

   vrSucceed_wav = ShatterLock_sound

   viMana = 50         // Mana is amount used upon initiation

   viSpell_num = SID_SHATTERLOCK
   viSchool = SS_KRAANAN
   viSpell_level = 6

   viSpellExertion = 50
   viCast_time = 2000
   viChance_To_Increase = 50

   viManaDrain = 1       // Drain is amount used every viDrainTime milliseconds
   viDrainTime = 1000    // Drain some mana every viDrainTime milliseconds

   viOutlaw = TRUE

properties:

   viMultiCast_Spellpower = 1080    // 20+ min
   piBaseCastTime = 900             // 15 minutes (in seconds) minimum casting time.
   piGuildWarnTime = 180            // warn once (per caster) every 3 minutes on average

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&KriipaClaw,4],plReagents);

      return;
   }

   CanPayCosts(who=$)
   {
      local oPrism;

      if IsClass(who,&Player)
         AND (NOT Send(who,@CheckPlayerPreference,#flag=CF_SAFETY_OFF)
              OR NOT Send(who,@CanPlayerPvP))
      {
         Send(who,@MsgSendUser,#message_rsc=Shatterlock_safety);

         return FALSE;
      }

      oPrism = Send(self,@FindPrism,#who=who);
      if oPrism = $
      {
         Send(who,@MsgSendUser,#message_rsc=multicast_no_prism);

         return FALSE;
      }

      if NOT IsClass(Send(oPrism,@GetOwner),&GuildHall)
      {
         return FALSE;
      }

      propagate;
   }

   GetTotalSpellPower(oPrism=$)
   {
      local lMembers, iMembers, oGuild, oGuildHall, iMembersNotOnline,
            i, iReqSpellPower;

      oGuildHall = Send(oPrism,@GetOwner);

      // Base time: 3 hours.
      iReqSpellPower = viMultiCast_Spellpower;

      // Add up to an hour depending on quality of hall
      iReqSpellPower = iReqSpellPower + (Send(oGuildHall,@GetQuality) * 360);

      oGuild = Send(oGuildHall,@GetGuildOwner);
      iMembersNotOnline = 0;

      if oGuild <> $
      {
         // Reduce casting time with more enemy guildmembers online.
         lMembers = Send(oGuild,@GetMemberList);
         foreach i in lMembers
         {
            if NOT Send(First(i),@IsLoggedOn)
            {
               iMembersNotOnline = iMembersNotOnline + 1;
            }
         }

         iMembers = length(lMembers);

         // If the guild has very few people on, apply a penalty.
         //  Otherwise, scale the time based on the number of people online.
         if (iMembers - iMembersNotOnline) <= MIN_MEMBERS_ONLINE
         {
            iReqSpellPower = iReqSpellPower * 3;
         }
         else
         {
            iMembersNotOnline = bound(iMembersNotOnline,1,$);
            iReqSpellPower = (iReqSpellPower * iMembersNotOnline) / iMembers;
         }

         // Always takes at least 15 minutes to cast.
         iReqSpellPower = bound(iReqSpellPower,piBaseCastTime,$);

         // Convert to spellpower: average of 15 points per second added.
         iReqSpellPower = iReqSpellPower * 15;
      }

      return iReqSpellPower;
   }

   PrismCast(spellpower=0,lCasters=$,oPrism=$)
   {
      local oRoom, i;

      oRoom = Send(oPrism,@GetOwner);
      if IsClass(oRoom,&GuildHall)
      {
         if Send(oRoom,@InFoyer,#who=oPrism)
         {
            Send(oRoom,@OpenEntranceDoor);
         }
      }

      foreach i in lCasters
      {
         Send(i,@MsgSendUser,#message_rsc=ShatterLock_cast_complete);
      }

      return;
   }

   StartPeriodicEnchantment(who=$,state=$)
   {
      local oGuild,lMembers,i;

      // Every 3 minutes on average, tell a guild member that something's up.
      if Random(1,piGuildWarnTime) > 1
      {
         propagate;
      }

      if NOT IsClass(first(state),&Prism)
      {
         Debug("StartPeriodicEnchantment called with bad state (no prism)");

         return;
      }

      oGuild = Send(Send(first(state),@GetOwner),@GetGuildOwner);

      if oGuild <> $
      {
         lMembers = Send(oGuild,@GetMemberList);

         foreach i in lMembers
         {
            if (Random(1,Length(lMembers))=1) AND Send(First(i),@IsLoggedOn)
            {
               Send(First(i),@MsgSendUser,#message_rsc=shatterlock_guildwarning);
            }
         }
      }

      propagate;
   }

   GetExtraDesc()
   {
      if Send(SYS,@IsPKAllowed)
      {
         return Shatterlock_outlaw;
      }

      propagate;
   }

end
////////////////////////////////////////////////////////////////////////////////
