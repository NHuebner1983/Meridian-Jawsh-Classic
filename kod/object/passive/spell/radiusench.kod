// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
RadiusEnchantment is Spell

// [timer, spell object, state, spellpower]
// state is [caster, target, range, duration, spell-specific stuff]
// If you are enchanted with a radius enchant and are the target, the radius
// emanates from you. If you are not the target, you get the spell effects
// (based on relationship to the caster) but not the light effect.

constants:

   include blakston.khd

resources:

   include radiusench.lkod

   radench_already_enchanted_rsc = "You are already enchanted."
   radench_already_cast = "You are already maintaining that radius enchantment."
   radench_on_rsc = "A circle of magic expands outward from you."
   radench_on_other_rsc = "A circle of magic expands outward from %s%s."
   radench_off_other_rsc = "The circle of magic maintained by %s%s collapses."
   radench_off_caster_rsc = "Your circle of magic collapses."
   radench_success_rsc = "You enchant %s%s."
   radench_need_instrument = "You need an instrument!"

   radench_not_guilded = "You must be guilded to cast that spell here."
   radench_bad_target = "You cannot enchant %s%s."
   radench_bad_location = "You cannot cast enchantments upon others here."
   radench_other_already_enchanted = "%s%s is already affected by that magic."
   radench_target_already_enchanted = "%s%s tried to cast %s%s on you."

   radench_caster_enter = "You feel your circle of magic having an effect."
   radench_enter = "You enter a circle of magical effect maintained by %s%s."
   radench_leave = "You leave a circle of magical effect maintained by %s%s."
   radench_no_newbie = \
      "Your guardian angel tells you, \"You are not ready to cast spells "
      "which may hinder other players.\""

classvars:

   // Overwrite these in subclasses to give specific messages.
   vrAlreadyEnchanted = radench_already_cast
   vrEnchantmentOn = radench_on_rsc
   vrEnchantmentOnOther = radench_on_other_rsc
   vrEnchantmentOff = radench_off_caster_rsc
   vrEnchantmentOffOther = radench_off_other_rsc

   vrEnterRadiusCaster = radench_caster_enter
   vrEnterRadius = radench_enter
   vrLeaveRadius = radench_leave

   vrNeedInstrument = radench_need_instrument
   vrOtherAlreadyEnchanted = radench_other_already_enchanted
   vrTargetAlreadyEnchanted = radench_target_already_enchanted

   viLightColor = LIGHT_SPECTRAL
   viBaseLightIntensity = 60

   viChance_To_Increase = 15

   viSchool = SS_JALA
   viNeedInstrument = FALSE

   viMana = 5
   viManaDrain = 3
   viDrainTime = 5000
   viPostCast_time = 1
   viBaseRange = 5 * FINENESS

   vbCanCastonOthers = FALSE
   vbCanCastOnMonsters = FALSE

   vbNeedInstrument = FALSE

   // Can we turn this off by casting again?
   vbCanCancelEnchantment = TRUE

   // The effectiveness of purge on the target spell as a percentage.
   // 100 will cause purge to remove its entire spellpower, 0 will
   // prevent purge from removing this spell.
   viPurgeFactor = 0

   viDefensive = FALSE
   viOffensive = FALSE
   viResistanceType = 0

   vbIsAreaEffect = TRUE

   viAffectsCasterOnly = FALSE  // Override for self-only spell
   viAffectsEveryone = FALSE    // Override for affect all

   viAffectsCaster = TRUE       // Caster is affected by the spell
   viAffectsGuildmates = FALSE  // Guildmates of caster
   viAffectsAllies = FALSE      // Members of guilds allied with caster's guild
   viAffectsEnemies = FALSE     // Hostile, can cause outlaw status
   viAffectsInnocents = FALSE   // Unaffiliated white characters
   viAffectsNewbies = FALSE     // Angeled characters

properties:

messages:

#region Casting Infrastructure
   GetNumSpellTargets()
   {
      return vbCanCastonOthers;
   }

   CanPayCosts(who=$,lTargets=$,bItemCast=FALSE)
   {
      local oTarget, i, lState;

      if (lTargets <> $)
      {
         oTarget = First(lTargets);
      }
      else
      {
         oTarget = who;
      }

      // Could be cancelling the current enchantment, if cast with
      // no targets or cast on self.
      if (vbCanCancelEnchantment
         AND (oTarget = $
            OR oTarget = who))
      {
         foreach i in Send(who,@GetRadiusEnchantments)
         {
            if (Nth(i,2) = self)
            {
               lState = Nth(i,3);
               if First(lState) = who
               {
                  Send(self,@BreakTrance,#who=who,#state=lState,
                        #event=EVENT_STEER);

                  return FALSE;
               }
            }
         }
      }

      if vbNeedInstrument
      {
         if IsClass(who,&User)
            AND Send(who,@GetInstrumentLevel) = 0
         {
            Send(who,@MsgSendUser,#message_rsc=vrNeedInstrument);

            return FALSE;
         }
      }

      // Targetable enchantment, not from a potion.  If we want to have wand
      // effects for these spells we will need to split bItemcast to
      // differentiate between wands and potions.
      if vbCanCastOnOthers
      {
         if NOT bItemCast
            AND NOT IsClass(oTarget,&User)
            AND NOT (vbCanCastOnMonsters AND IsClass(oTarget,&Monster))
         {
            Send(who,@MsgSendUser,#message_rsc=radench_bad_target,
                 #parm1=Send(oTarget,@GetDef),#parm2=Send(oTarget,@GetName));

            return FALSE;
         }

         // Cannot cast buffs on others in any permanently safe rooms.
         if who <> oTarget
            AND (Send(Send(who,@GetOwner),@GetPermanentFlags) & ROOM_NO_COMBAT)
            AND NOT Send(SETTINGS_OBJECT,@CanBuffOthersInSafeZones)
         {
            Send(who,@MsgSendUser,#message_rsc=radench_bad_location);

            return FALSE;
         }
      }

      if (viAffectsEnemies)
      {
         if (NOT Send(Send(who,@GetOwner),@AllowGuildAttack,#what=who)
            AND Send(SYS,@IsPKAllowed)
            AND NOT IsClass(who,&DM))
         {
            // Tried to cast unguilded in town with no monsters.  Denied!
            Send(who,@MsgSendUser,#message_rsc=radench_not_guilded);

            return FALSE;
         }
      }

      // Check for enchantment already applied
      if Send(oTarget,@IsEnchanted,#what=self)
      {
         // Can you override an existing enchantment on yourself?
         if who = oTarget AND
            Send(SETTINGS_OBJECT,@CanRecastSelfEnchantment)
         {
            propagate;
         }

         if NOT bItemCast
         {
            // Casting on self.
            if who = oTarget
            {
               Send(who,@MsgSendUser,#message_rsc=vrAlreadyEnchanted);
            }
            else
            {
               // Casting on someone else.
               Send(who,@MsgSendUser,#message_rsc=vrOtherAlreadyEnchanted,
                     #parm1=Send(oTarget,@GetCapDef),#parm2=Send(oTarget,@GetName));
               Send(oTarget,@MsgSendUser,#message_rsc=vrTargetAlreadyEnchanted,
                     #parm1=Send(who,@GetCapDef),#parm2=Send(who,@GetName),
                     #Parm3=Send(self,@GetCapDef),#Parm4=Send(self,@GetName));
            }
         }

         return FALSE;
      }

      propagate;
   }

   CastSpell(who=$,iSpellPower=0,lTargets=$,bItemCast=FALSE)
   {
      local oTarget, i, each_obj, lType, lState, iDuration, iRange, lOldState;

      lType = [self,viDefensive,viOffensive,viResistanceType];

      if (lTargets <> $)
      {
         oTarget = First(lTargets);
      }
      else
      {
         oTarget = who;
      }

      if (vbCanCastOnOthers)
      {
         // Sanity check.
         if (oTarget = $)
         {
            Debug("Got $ target in CastSpell for ",self);

            return FALSE;
         }
         // Double check if our target is still logged on.
         if (IsClass(oTarget,&Player)
            AND NOT Send(oTarget,@IsLoggedOn))
         {
            Send(who,@MsgSendUser,#message_rsc=radench_bad_target,
                  #parm1=Send(oTarget,@GetDef),#parm2=Send(oTarget,@GetName));

            return FALSE;
         }
      }

      // If we already have this enchantment, remove it. Note that we
      // disallow recasting enchantments on others in CanPayCosts.
      lOldState = Send(who,@GetRadiusEnchantmentState,#what=self);

      if (oTarget = who
         AND lOldState <> $
         AND Send(SETTINGS_OBJECT,@CanRecastSelfEnchantment))
      {
         Send(oTarget,@RemoveRadiusEnchantment,#what=self,#state=lOldState);
      }

      // Messages to users.
      foreach i in Send(Send(who,@GetOwner),@GetHolderActive)
      {
         each_obj = First(i);

         if IsClass(each_obj,&User)
         {
            if each_obj = oTarget
            {
               Send(oTarget,@MsgSendUser,#message_rsc=vrEnchantmentOn);

               Send(oTarget,@SetFlickerFlag);
            }
            else
            {
               Send(each_obj,@MsgSendUser,#message_rsc=vrEnchantmentOnOther,
                     #parm1=Send(who,@GetDef),#parm2=Send(who,@GetName));
            }
         }
      }

      // who is the caster, target is the target (sometimes the same as who).
      iRange = Send(self,@CalculateRange,#who=who,#iSpellPower=iSpellPower);
      iDuration = Send(self,@GetDuration,#iSpellPower=iSpellPower);
      lState = [ who, oTarget, iRange, iDuration,
                  Send(self,@GetStateValue,#iSpellpower=iSpellpower,#who=who,
                        #target=oTarget)];

      Send(oTarget,@StartEnchantment,#what=self,#state=lState,#time=iDuration,
            #lastcall=Send(self,@GetLastCall),#addicon=Send(self,@GetAddicon),
            #who=who,#ltype=lType,#bItemCast=bItemCast,#iSpellpower=iSpellpower,
            #bRadiusEnchant=TRUE);

      // Add spell effects to target.
      Send(self,@AddEnchantmentEffects,#who=oTarget,#state=lState);

      // Initial cast, enchant anyone in range.
      Send(self,@StartNewRadiusEnchantment,#who=who,#oSource=oTarget,
            #iSpellPower=iSpellPower,#state=lState);

      propagate;
   }

   RemoveRadiusEnchant(who=$, iSpellNum=$)
   "This should remove a radius enchant owned by a player much easier than the current version on player.kod."
   {
      local i, lRadiusEnchantments, lOldState, oOpposingEnchantment, oTarget, oSpell, lState, iSpellPower, bFoundToRemove;

      if who = $ OR iSpellNum = $ AND iSpellNum <= 0
      {
         return FALSE;
      }

      lRadiusEnchantments = Send(who, @GetRadiusEnchantments);

      if lRadiusEnchantments = $
      {
         // No radius enchants, nothing to check or remove.
         return $;
      }

      bFoundToRemove = FALSE;

      foreach i in lRadiusEnchantments
      {
         oSpell = Nth(i,2);
         lState = Nth(i,3);
         iSpellPower = Nth(i,4);

         if (Send(oSpell,@GetSource,#state=lState) = who) AND Send(oSpell, @GetSpellNum) = iSpellNum
         {
            // oSpell is now set to <> $
            bFoundToRemove = TRUE;
            break;
         }
      }

      if bFoundToRemove AND oSpell <> $
      {
         // Remove [SID_MIRTH], the opposite of this spell if we are currently using it.
         lOldState = Send(who,@GetRadiusEnchantmentState, #what=oSpell);

         if lOldState <> $
         {
            Send(who,@RemoveRadiusEnchantment,#what=oSpell,#state=lOldState);

            return TRUE;
         }
      }

      return $;
   }

#endregion Casting Infrastructure

#region Enchant Targets
   StartPeriodicEnchantment(who=$,state=$,iSpellPower=0)
   "Drain mana, heal targets in range etc."
   {
      local iDuration, iAbility, oSpell, oCaster, i, each_obj, lHolderActive, oGetOwner;

      // Pre-calculated
      iDuration = Send(self,@GetStateDuration,#state=state);
      oCaster = Send(self,@GetCaster,#state=state);
      if IsClass(who,&Battler)
         AND oCaster = who
      {
         if Send(who,@GetMana) >= viManaDrain
         {
            Send(who,@LoseMana,#amount=viManaDrain);
         }
         else
         {
            iAbility = Send(who,@GetSpellAbility,#spell_num=SID_CRYSTALIZE_MANA);
            if iAbility > 0
               AND NOT Send(who,@IsCrystalizeManaSurging)
            {
               oSpell = Send(SYS,@FindSpellByNum,#num=SID_CRYSTALIZE_MANA);
               Send(oSpell,@DoManaSurge,#who=who,#triggered=TRUE);
               if Send(who,@GetMana) >= viManaDrain
               {
                  Send(who,@LoseMana,#amount=viManaDrain);
               }
            }
            else
            {
               Send(who,@StartEnchantment,#what=self,#time=iDuration,
                     #who=oCaster,#state=state,#addicon=FALSE,#lastcall=TRUE,
                     #bRadiusEnchant=TRUE,#iSpellPower=iSpellPower);

               return;
            }
         }
      }

      Send(who,@StartEnchantment,#what=self,#time=iDuration,#who=oCaster,
            #state=state,#addicon=FALSE,#lastcall=FALSE,#bRadiusEnchant=TRUE,
            #iSpellPower=iSpellPower);

      // Have to do periodic effect on everyone enchanted by spell.
	  oGetOwner = Send(who,@GetOwner);
	  
	  if (oGetOwner = $) {
		return;
	  }
	  
	  lHolderActive = Send(Send(who,@GetOwner),@GetHolderActive);
	  
      foreach i in lHolderActive
      {
         each_obj = First(i);

         if (IsClass(each_obj,&NoMoveOn)
            AND Send(each_obj,@IsEnchantedRadius,#what=self,#state=state))
         {
            Send(self,@PeriodicEffect,#who=each_obj,#state=state);
         }
      }

      return;
   }

   PeriodicEffect(who=$,state=$)
   {
      return;
   }

   StartNewRadiusEnchantment(who=$,oSource=$,iSpellPower=0,state=$)
   {
      local i, oRoom, each_obj, iRow, iCol, iFineRow, iFineCol, iRange;

      if (who = $
         OR oSource = $
         OR state = $)
      {
         Debug("Bad params to StartNewRadiusEnchantment for spell ",vrName,
               who, oSource, state);

         return;
      }

      // Determine who in range should be affected, and add an enchantment
      // to them. oSource is center.
      oRoom = Send(oSource,@GetOwner);

      // Must be in a room.
      if (oRoom = $)
      {
         Debug("Target of radius enchant ",vrName," not in room!");

         return;
      }

      iRow = Send(oSource,@GetRow);
      iCol = Send(oSource,@GetCol);
      iFineRow = Send(oSource,@GetFineRow);
      iFineCol = Send(oSource,@GetFineCol);
      // Range is in fine units.
      iRange = Send(self,@GetRange,#state=state);
      // Squared.
      iRange *= iRange;

      foreach i in Send(oRoom,@GetHolderActive)
      {
         each_obj = First(i);

         // Range check.
         if (Send(who,@SquaredFineDistanceToLocation3D,#row=iRow,#col=iCol,
                  #fine_row=iFineRow,#fine_col=iFineCol) > iRange)
         {
            continue;
         }

         // Meets spell conditions?
         if (Send(self,@CanEnchantUser,#who=each_obj,#state=state))
         {
            Send(self,@RadEnchEnchantUser,#who=each_obj,#state=state,
                  #iSpellPower=iSpellPower);
         }
      }

      return;
   }

   RadEnchEnchantUser(who = $, state = $, iSpellPower = 0)
   "Assumes 'who' is in range of the RE, and has passed suitability checks.  "
   "May still fail to enchant object if it has a stronger enchantment of "
   "the same spell already present."
   {
      local oCaster, iDuration, lOldState;

      if (who = $
         OR state = $)
      {
         Debug("Bad params to RadEnchEnchantUser for ",vrName, who, state);

         return;
      }

      // Already enchanted? Stronger spell takes precedence, unless 'who'
      // is the source of the lesser enchantment. Don't enchant if
      // equal spellpower to avoid toggling two spells.
      lOldState = Send(who,@GetRadiusEnchantmentState,#what=self);
      if (lOldState <> $)
      {
         if (Send(self,@GetSource,#state=lOldState) = who
            OR iSpellPower <= Send(who,@GetRECastPower,#what=self))
         {
            return;
         }
         // Not the source, and spellpower of old enchantment is lower.
         // Remove it.
         Send(who,@RemoveRadiusEnchantment,#what=self,#state=lOldState);
      }

      oCaster = Send(self,@GetCaster,#state=state);
      if (who = oCaster)
      {
         Send(who,@MsgSendUser,#message_rsc=vrEnterRadiusCaster);
      }
      else
      {
         Send(who,@MsgSendUser,#message_rsc=vrEnterRadius,
               #parm1=Send(oCaster,@GetDef),#parm2=Send(oCaster,@GetName));
      }

      // Don't try to re-enchant the source.
      if (who <> Send(self,@GetSource,#state=state))
      {
         if (Send(self,@GetLastCall))
         {
            iDuration = Nth(state,4);
         }
         Send(who,@StartEnchantment,#what=self,#state=ListCopy(state),
               #time=iDuration,#lastcall=Send(self,@GetLastCall),
               #addicon=Send(self,@GetAddicon),#who=oCaster,
               #iSpellpower=iSpellpower,#bRadiusEnchant=TRUE);
         Send(self,@AddEnchantmentEffects,#who=who,#state=state);
      }

      return;
   }

   AddEnchantmentEffects(who=$, state=$)
   {
      if (who = $
         OR state = $)
      {
         Debug("Bad params to AddEnchantmentEffects for ",vrName, who, state);

         return;
      }

      return;
   }

   CanEnchantUser(who = $, state = $)
   "Uses caster of spell, not source (if different)."
   {
      local oRoom, oCaster, oWatcher, oTargetGuild, oCasterGuild;

      if who = $
         OR state = $
      {
         return FALSE;
      }

      if (NOT IsClass(who,&NoMoveOn))
      {
         return FALSE;
      }

      if (IsClass(who,&User)
         AND Send(who,@IsInCannotInteractMode))
      {
         return FALSE;
      }

      oCaster = Send(self,@GetCaster,#state=state);

      if (oCaster = $)
      {
         return FALSE;
      }

      // Arena checks.
      oRoom = Send(who,@GetOwner);

      if (oRoom = $)
      {
         return FALSE;
      }

      if Send(oRoom,@IsArena)
      {
         oWatcher = Send(oRoom,@GetWatcher);

         // If a fight isn't in session, attack fails.
         if NOT Send(oWatcher,@FightInSession)
         {
            return FALSE;
         }

         // If the target is not a combatant, attack fails.
         if IsClass(who,&Battler)
            AND NOT Send(oWatcher,@IsCombatant,#who=who)
         {
            return FALSE;
         }

         // If the caster is not a combatant, attack fails.
         if Send(oCaster,@GetOwner) = oRoom
         AND NOT Send(oWatcher,@IsCombatant,#who=oCaster)
         {
            return FALSE;
         }
      }

      if viAffectsCasterOnly
      {
         return who = oCaster;
      }

      if viAffectsEveryone
      {
         return TRUE;
      }

      if who = oCaster
      {
         return viAffectsCaster;
      }

      if IsClass(who,&User)
         AND IsClass(oCaster,&User)
      {
         oCasterGuild = Send(oCaster,@GetGuild);
         oTargetGuild = Send(who,@GetGuild);

         if oTargetGuild <> $
         {
            if viAffectsGuildmates
               AND oTargetGuild = oCasterGuild
            {
               return TRUE;
            }

            if viAffectsAllies
               AND Send(oTargetGuild,@IsAlly,#otherguild=oCasterGuild)
            {
               return TRUE;
            }
         }
      }

      if viAffectsEnemies
         AND IsClass(who,&Battler)
         AND IsClass(oCaster,&Battler)
         AND Send(oCaster,@AllowBattlerAttack,#victim=who,#report=FALSE,
                  #stroke_obj=self)
      {
         return TRUE;
      }

      if viAffectsNewbies
         AND IsClass(who,&User)
         AND NOT Send(who,@CheckPlayerFlag,#flag=PFLAG_PKILL_ENABLE)
      {
         return TRUE;
      }

      if viAffectsInnocents
         AND IsClass(who,&User)
         AND Send(who,@CheckPlayerFlag,#flag=PFLAG_PKILL_ENABLE)
         AND NOT Send(who,@CheckPlayerFlag,#flag=PFLAG_OUTLAW)
         AND NOT Send(who,@CheckPlayerFlag,#flag=PFLAG_MURDERER)
      {
         return TRUE;
      }

      return FALSE;
   }

   GetStateValue(who=$,target=$,iSpellPower=$)
   "Spell-specific state data."
   {
      return iSpellPower;
   }

   GetLastCall()
   // Overwrite to true for non-periodic enchantments.
   {
      return FALSE;
   }

   GetAddIcon()
   // Overwrite for iconless enchantments.
   {
      return TRUE;
   }
#endregion Enchant Targets

   CheckRadiusEnchantment(who = $, state = $, iRow = 0, iCol = 0,
                          iFineRow = FINENESS_HALF, iFineCol = FINENESS_HALF,
                          iSpellPower = 0)
   {
      local oSource, iRange, bEnchanted;

      if (who = $
         OR state = $)
      {
         Debug("Bad params to CheckRadiusEnchantment for spell ",vrName,
               who, state);

         return;
      }

      if (NOT IsClass(who,&NoMoveOn))
      {
         return;
      }

      if (iRow <= 0 OR iCol <= 0)
      {
         Debug("Bad coords to CheckRadiusEnchantment for spell ",vrName,
               iRow, iCol);
      }

      oSource = Send(self,@GetSource,#state=state);
      iRange = Send(self,@GetRange,#state=state);
      iRange *= iRange;

      bEnchanted = Send(who,@IsEnchantedRadius,#what=self,#state=state);
      // Range check. Passed locations are for source.
      if (Send(who,@SquaredFineDistanceToLocation3D,#row=iRow,#col=iCol,
               #fine_row=iFineRow,#fine_col=iFineCol) > iRange)
      {
         // Need to remove enchantment?
         if (bEnchanted)
         {
            Send(who,@MsgSendUser,#message_rsc=vrLeaveRadius,
                  #parm1=Send(oSource,@GetDef),#parm2=Send(oSource,@GetName));
            Send(who,@RemoveRadiusEnchantment,#what=self,#state=state);
         }
      }
      else if (NOT bEnchanted)
      {
         if (Send(self,@CanEnchantUser,#who=who,#state=state))
         {
            Send(self,@RadEnchEnchantUser,#who=who,#state=state,
               #iSpellPower=iSpellPower);
         }
      }

      return;
   }

#region Unenchant Targets
   RemoveEnchantment(who = $, state = $)
   "Remove enchantment effects on this target."
   {
      if (who = $)
      {
         return;
      }

      Send(who,@RemoveRadiusEnchantment,#what=self,#state=state);

      return;
   }

   EndEnchantment(who=$,report=TRUE,state=$,recheck=FALSE)
   {
      local oSource, i, each_obj, oSourceOwner, lHolderActive;

      if who = $
      {
         return;
      }

      oSource = Send(self,@GetSource,#state=state);

      if report
      {
         if (who = Send(self,@GetCaster,#state=state))
         {
            Send(who,@MsgSendUser,#message_rsc=vrEnchantmentOff);
         }
         else
         {
            Send(who,@MsgSendUser,#message_rsc=vrEnchantmentOffOther,
                  #parm1=Send(oSource,@GetDef),#parm2=Send(oSource,@GetName));
         }
      }

      if (who = oSource)
      {
         if (IsClass(who,&User))
         {
            Send(who,@RecalcFlickerFlag);
         }

         // Original spell is ending, unenchant all in range.
		 if Send(oSource,@GetOwner) <> $
		 {
            foreach i in Send(Send(oSource,@GetOwner),@GetHolderActive)
            {
               each_obj = First(i);
               if (each_obj <> who
                  AND IsClass(each_obj,&NoMoveOn))
               {
                  Send(each_obj,@RemoveRadiusEnchantment,#what=self,#state=state,
                        #report=report,#recheck=recheck);
               }
            }
		 }
      }

      return;
   }

   BreakTrance(who = $, event = $, state = $)
   {
      local bRecheck, oRoom;

      // The spell keeps going if you get damaged, move, cast, use an item,
      // or make an attack. Players must rest to end most radius spells.
      if event = EVENT_DAMAGE
         OR event = EVENT_ATTACK
         OR event = EVENT_RUN
         OR event = EVENT_DISRUPT
         OR event = EVENT_CAST
         OR event = EVENT_USE
      {
         return FALSE;
      }

      // --------------------------------------------------
      // NOTE: COMMENT OUT THE NEXT 10 LINES IF YOU WANT RADIUS ENCHANTS TO END WHEN CHANGING ROOMS
      // --------------------------------------------------
      oRoom = Send(who,@GetOwner);

      // Only cancel Persist spells if they are offensive & caster is
      // entering a non-combat room
      if (event = EVENT_NEWOWNER
         OR event = EVENT_REQNEWOWNER)
      {
         if oRoom <> $
            AND NOT (viHarmful
               AND Send(oRoom,@CheckRoomFlag,#flag=ROOM_NO_COMBAT))
         {
            return FALSE;
         }
      }

      // if (IsClass(self, &Wolfpack))
      // {
      //    return false;
      // }

      bRecheck = (event = EVENT_REST);

      Send(who,@RemoveRadiusEnchantment,#what=self,#state=state,
            #recheck=bRecheck);

      propagate;
   }
#endregion Unenchant Targets

#region State Accessors
   GetCaster(state = $)
   "Returns the caster of the spell, given the state."
   {
      if (state <> $)
      {
         return First(state);
      }

      Debug("Radius enchantment ",vrName," got $ state!");

      return $;
   }

   GetSource(state = $)
   {
      if (state <> $)
      {
         return Nth(state,2);
      }

      Debug("Radius enchantment ",vrName," got $ state!");

      return $;
   }

   GetRange(state = $)
   {
      if (state <> $)
      {
         return Nth(state,3);
      }

      Debug("Radius enchantment ",vrName," got $ state!");

      return 0;
   }

   GetStateDuration(state = $)
   {
      if (state <> $)
      {
         return Nth(state,4);
      }

      Debug("Radius enchantment ",vrName," got $ state!");

      return 0;
   }
#endregion State Accessors

   // Replace this to modify power calculations - currently on 0 to 99 scale
   CalculatePower(who=$, iSpellPower=25)
   {
      return iSpellPower;
   }

   // Replace this to modify range by spellpower calculations
   CalculateRange(who=$, iSpellPower=25)
   {
      // Default is up to twice base range
      return viBaseRange + ((viBaseRange * iSpellPower) / 99);
   }

   CalculateLightIntensity(iSpellPower=25)
   {
      return viBaseLightIntensity * ((iSpellpower * 2) / 99);
   }

   GetLightColor()
   {
      return viLightColor;
   }

   GetLightIntensity()
   {
      return viBaseLightIntensity;
   }

   GetDuration(iSpellPower=0)
   {
      return viDrainTime + iSpellPower;
   }

#region Modifiers
   ModifyDamage(damage=$)
   {
      return damage;
   }

   ModifyHitRoll(who=$,what=$,hit_roll=$)
   {
      return hit_roll;
   }

   DefendingHit()
   {
      return;
   }

   ModifyDefenseDamage(damage=$)
   {
      return damage;
   }

   ModifyDefensePower(who=$,what=$,defense_power=$)
   {
      return defense_power;
   }

   ModifyResistance(resistance_list=$, iState = 0)
   {
      return resistance_list;
   }

   ModifySpellPower(who=$,state=$,oSpell=$,iSpellPower=0)
   {
      return iSpellPower;
   }

   GetAlteredChance(chance=0,what=$,lRadiusState=0)
   {
      return chance;
   }

   AdjustHealthTime(time=0, lRadiusState=0)
   {
      return time;
   }

   AdjustVigorTime(time=0, lRadiusState=0)
   {
      return time;
   }

   AdjustManaTime(time=0, lRadiusState=0)
   {
      return time;
   }
#endregion Modifiers

#region Description
   SendTimeDesc(who=$)
   {
      local i, iDuration, iTime, oList;

      // Only send for timed spells.
      if (Send(self,@GetLastCall))
      {
         oList = Send(who,@GetRadiusEnchantments);

         foreach i in oList
         {
            if Nth(i,2) = self
            {
               iTime = First(i);
               if iTime = $
               {
                  iDuration = 0;
               }
               else if IsTimer(iTime)
               {
                  iDuration = GetTimeRemaining(iTime) / 1000;
               }
               else
               {
                  // Should be an integer
                  iDuration = iTime / 1000;
               }
            }
         }
      }

      if iDuration = $
      {
         iDuration = 0;
      }

      // This message picks the appropriate resources for the duration given,
      // and sends them to the user.
      Send(self,@SendTimeRemaining,#iTime=iDuration);

      return;
   }

   SendStatsDesc(who=$)
   {
      if who <> $
         AND IsClass(who,&User)
         AND Send(who,@IsEnchanted,#what=self)
      {
         Send(self,@EffectDesc,#who=who);

         return;
      }

      propagate;
   }
#endregion Description

end
////////////////////////////////////////////////////////////////////////////////
