// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
RadiusProjectile is AttackSpell

// A projectile that is sent out in a radius, instead of at a target. The spell
// itself hits all valid targets in the radius.

constants:

   include blakston.khd

resources:

classvars:

   vrRadius_Icon = $
   vrProjectile_icon = $
   vbIsRangedAttack = TRUE

   viProjectileFlag = PROJ_FLAG_LIGHT_SOURCE

   // Projectile lighting information.
   viProjectileLightFlags = LIGHT_FLAG_ON | LIGHT_FLAG_DYNAMIC
   // Medium light range, out of 255.
   viProjectileLightIntensity = 100
   // Default color is lightning.
   viProjectileLightColor = LIGHT_LIGHTNING

   viChance_To_Increase = 15

   // Skip Line of Sight check for this spell?
   // False by default - check LoS to stop projectiles going through walls.
   vbSkipLoSCheck = FALSE

properties:

   // Range in FINENESS units, default 6 row/col units.
   // The client needs to be sent range in row/col units, so divide
   // by FINENESS whenever the row/col value is needed.
   piRange = 384
   piSpeed = 5

   // Maximum amount of bonus damage mana focus gives us for casting this spell.
   piManaFocusBonus = 10

   // Number of projectiles to shoot, default 8.
   piNumber = 8

messages:

   GetNumSpellTargets()
   {
      return 0;
   }

   GetTargets(who=$,lTargets=$,iRange=$,LOS=$)
   "This returns a list of valid targets in range."
   {
      local lFinalTargets, i, each_obj, iRange_squared, oRoom;

      if LOS = $
      {
         LOS = vbSkipLoSCheck;
      }

      if iRange = $
      {
         iRange = piRange;
      }

      iRange_squared = iRange * iRange;

      oRoom = Send(who,@GetOwner);

      foreach i in Send(oRoom,@GetHolderActive)
      {
         each_obj = First(i);

         // Valid targets are battlers, in range, in direct LoS and attackable.
         if each_obj <> who
            AND NOT IsClass(each_obj, &Servant)
            AND IsClass(each_obj,&Battler)
            AND (Send(who,@SquaredFineDistanceTo3D,#what=each_obj) <= iRange_squared)
            AND (NOT LOS OR (LOS AND Send(oRoom,@LineOfSight,#obj1=who,#obj2=each_obj)))
            AND Send(who,@AllowBattlerAttack,#victim=each_obj,
                     #stroke_obj=self,#report=FALSE)
         {
            lFinalTargets = Cons(each_obj,lFinalTargets);
         }
      }

      return lFinalTargets;
   }

   CastSpell(who=$)
   {
      local oOwner;

      oOwner = Send(who,@GetOwner);

      // Show projectiles.
      Send(oOwner,@SomethingShotRadius,#who=who,#projectile=self,
            #flags=viProjectileFlag,#range=piRange/FINENESS,
            #number=piNumber,#iLightIntensity=viProjectileLightIntensity,
            #iLightColor=viProjectileLightColor,#speed=piSpeed);

      propagate;
   }

   GetProjectileIcon()
   "Return the icon used to display a spell shooting through the air."
   {
      return vrProjectile_icon;
   }

   GetProjectileSpeed()
   "Return the speed of the projectile."
   {
      return piSpeed;
   }

   GetProjectileRange()
   "Returns projectile range, in row/col units."
   {
      return piRange/FINENESS;
   }

   SendProjectileAnimation()
   {
      // Send animation info to user.
      // Default is no animation, display with group 1
      AddPacket(1,ANIMATE_NONE, 2,1);

      return;
   }

   GetProjectileLightFlags()
   {
      return viProjectileLightFlags;
   }

   GetProjectileLightIntensity()
   {
      return viProjectileLightIntensity;
   }

   GetProjectileLightColor()
   {
      return viProjectileLightColor;
   }

end
////////////////////////////////////////////////////////////////////////////////
