// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
SummonServant is Debuff

constants:

   include blakston.khd

resources:

   summon_servant_class_name_rsc = "summon servant"
   summon_servant_class_desc_rsc = \
      "Magical creatures await your command."

   summon_servant_arrived = "Your servant has been summoned."
   summon_servant_class_caster = "%s%s is now assisting you in your journey."
   summon_servant_class_target_on = "You make your move on %s%s."
   summon_servant_class_player_second = "%s%s tries %s best to servant you."
   summon_servant_class_already_enchanted = "%s%s is already your servant."
   summon_servant_class_target_off = "Your servant has more important things to do anyway."
   summon_servant_class_cast_self = "You cannot make yourself a servant."
   summon_servant_low_vigor = "You are too tired to cast that spell."
   summon_servant_low_mana = "You need more mana to cast that spell."
   summon_servant_cant_cast_here = "This place forbids you to summon a servant."
   
   summon_servant_class_sound = rperappr.ogg

classvars:

   vrName = summon_servant_class_name_rsc
   vrDesc = summon_servant_class_desc_rsc

   vrAlreadyEnchanted = summon_servant_class_already_enchanted
   vrEnchantment_On = summon_servant_class_target_on
   vrEnchantment_Off = summon_servant_class_target_off
   vrSuccess = summon_servant_class_caster
   vrNoSelfTarget = summon_servant_class_cast_self
   
   // To be set by servant child class.
   viSpell_num = $
   viSchool = $
   viSpell_level = $
   
   // Cast time
   viCast_time = 300
   
   // Default for all servant spells.
   viMana = 15
   viChance_To_Increase = 15
   viMeditate_ratio = 300
   viSpellExertion = 70

   vrSucceed_wav = summon_servant_class_sound

   viDebuff = FALSE
   viOutlaw = FALSE
   viHarmful = FALSE
   viNoNewbieOffense = FALSE

properties:

   // Nothing yet
   
messages:

   ResetReagents()
   {
      plReagents = $;

      return;
   }

   CanForget()
   {
      return FALSE;
   }

   GetNumSpellTargets()
   {
      return 0;
   }
   
   // Prevents spell from fizzling.
   SuccessChance(who=$)
   {
      return TRUE;
   }

   CanPayCosts(who = $)
   {
      if IsClass(who, &Player) AND Send(Send(who, @GetOwner), @IsArena)
      {
         Post(who,@MsgSendUser,#message_rsc=summon_servant_cant_cast_here);

         return FALSE;
      }

      propagate;
   }

   CastSpell(who=$,lTargets=$,iSpellPower=0)
   {
      local oServant, bExistingServant, playerRoom, iGenRow, iGenCol, oServantType;
      
      // Only players can have servants.
      if IsClass(who, &Player) {

         if Send(Send(who, @GetOwner), @IsArena)
         {
            // No servants allowed in the arena.
            Post(who,@MsgSendUser,#message_rsc=summon_servant_cant_cast_here);

            return FALSE;
         }

         bExistingServant = Send(who, @GetServant);
         
         if bExistingServant <> $ AND IsClass(bExistingServant, &Servant)
         {
            // Before creating a new servant, delete the old one.
            Send(bExistingServant, @Delete);
         }
         
         oServantType = Send(self, @GetServantType, #iSpellNum=viSpell_num);
         oServant = Create(oServantType,#who=who,#oSpell=self,#iSpellNum=viSpell_num,#iSpellPower=iSpellPower);

         iGenRow = Send(who,@GetRow);
         iGenCol = Send(who,@GetCol);

            playerRoom = Send(who, @GetOwner);
            
         // -----
         // Summon the servant!
         // -----
         if Send(playerRoom,@ReqNewHold,#what=oServant,
               #new_row=iGenRow,#new_col=iGenCol)
            AND Send(playerRoom,@ReqSomethingMoved,#what=oServant,
                  #new_row=iGenRow,#new_col=iGenCol)
         {
            // Make the servant appear.
            Send(playerRoom,@NewHold,#what=oServant,#new_row=iGenRow,#new_col=iGenCol);
            
            // Attach the servant to the player + player to the servant.
            Send(who,@SetServant,#oServant=oServant);
            Send(oServant,@SetMaster,#oMaster=who);

            // Tell the player about their servant being summoned.
            Post(who,@MsgSendUser,#message_rsc=summon_servant_arrived,#parm1=Send(oServant,@GetName));
         }	  
      }

      propagate;
   }
   
   GetServantType(iSpellNum=$)
   {
      switch(iSpellNum)
	  {
	     case SID_RIIJA_SERVANT:
		    return &ServRiija;
		 break;
	     case SID_KRAN_SERVANT:
		    return &ServKran;
		 break;
	     case SID_SHAL_SERVANT:
		    return &ServShal;
		 break;
	     case SID_FAREN_SERVANT:
		    return &ServFaren;
		 break;
	     case SID_QOR_SERVANT:
		    return &ServQor;
		 break;
	     case SID_JALA_SERVANT:
		    return &ServJala;
		 break;
	  }
	  
	  return $;
   }

   EndEnchantment(who=$,report=TRUE,state=$)
   {
      return;
   }

end
////////////////////////////////////////////////////////////////////////////////
