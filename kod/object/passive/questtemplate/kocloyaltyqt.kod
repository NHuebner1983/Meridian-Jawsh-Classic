// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


/////////////////////////////////////////////////////////////////////////////////
KocLoyaltyQuest is QuestTemplate
// Quest nodes 197, 198
// QNT_ID_KOC_LOYALTY_ONE, QNT_ID_KOC_LOYALTY_TWO

// QuestTemplate is
// [ quest template index
//   quest template object
//   number of players,
//   type of quest,
//   eligible player restrictions,
//   quest nodes,
//   max number active,
//   currently active quests,
//   percent chance of scheduling (on timer firing)
//   special restrictions ]

constants:

   include blakston.khd

resources:
   
   // TODO: Tyrant translate
   include kocloyaltyqt.lkod

   // Quest description.
   kocloyalty_icon_rsc = kcguardG.bgf
   kocloyalty_name_rsc = "ko'catan loyalty quest"
   kocloyalty_desc_rsc = \
      "Cital, ko'Manka's troops need equipment, and he has requested that "
      "you help the cause by bringing him some."

   kocloyalty_deliver_rsc = \
      "Cital, ko'Manka's troops need equipment, and he has requested that "
      "you help the cause by bringing him %s%s to remain in favor."

   kocloyalty_completed = \
      "You have completed the Ko'catan Army loyalty quest and shown your "
      "dedication for the cause."

   // Quest resources.
   koc_standard2_assign = \
      "Ah, %NAME, my fellow soldier of the island.  My troops have need of more "
      "equipment.  This war costs us much, and I do not have the luxury of a "
      "large treasury like the other leaders do.  Bring me %INDEF_CARGO%CARGO "
      "and I will not forget your loyalty."
   koc_standard2_success = \
      "Ah, excellent.  I will definitely put this to good use."
   koc_standard2_failure = \
      "Subject: You are not a true soldier of the Ko'catan Army\n"
      "You have failed me when I needed you most.  Go crawling to one of the "
      "other lieges, for I have no more use of one such as you."

classvars:

   vrIcon = kocloyalty_icon_rsc
   vrName = kocloyalty_name_rsc
   vrDesc = kocloyalty_desc_rsc

   vrNodeTwo = kocloyalty_deliver_rsc

   vrCompleted = kocloyalty_completed

   // The QST_ID constant for this quest.
   viQuestID = QST_ID_KOC_SERVICE

   viIcon_Animation_start = 1

properties:

   piNumPlayers = 1
   piPlayerRestrict = Q_PLAYER_FACTION_KOC | Q_PLAYER_NOTTRIED_RECENTLY
   plSpecialRestrict = $
   piMaxPlayers = 1
   piSchedulePct = 0
   piTimeLimit = 3600 // 1 hour.

messages:

   Constructor()
   {
      // Quest node list to send to QuestEngine.
      plQuestNodes = [QNT_ID_KOC_LOYALTY_ONE, QNT_ID_KOC_LOYALTY_TWO];

      // Quest nodes with matching descriptions for the player.
      plQuestNodeDesc = [ [QNT_ID_KOC_LOYALTY_TWO, vrNodeTwo] ];

      propagate;
   }

   SendQuestNodeTemplates()
   {
      local lNPCs, oQE, oLib;

      oQE = Send(SYS,@GetQuestEngine);
      oLib = Send(SYS,@GetLibrary);

      // Template #197 is 1st Koc loyalty node, say "loyalty" to Jonas
      // QNT_ID_KOC_LOYALTY_ONE
      if Send(oQE,@AddQuestNodeTemplate,#questnode_type=QN_TYPE_MESSAGE,
               #cargolist=[duke_standard1_trigger],
               #quest_node_index=QNT_ID_KOC_LOYALTY_ONE)
      {
         Send(oQE,@SetQuestNodeNPCList,#index=QNT_ID_KOC_LOYALTY_ONE,
               #new_NPC_list=Send(oLib,@GetOccupationList,
                        #iJob=MOB_ROLE_ROYALTY,#cNPC_class=&KocLiege));
      }
      else
      {
         Debug("Error building QN: QNT_ID_KOC_LOYALTY_ONE");
      }

      // Template # 198 is 2nd Koc Loyalty node, bring an item to Jonas
      // QNT_ID_KOC_LOYALTY_TWO
      if Send(oQE,@AddQuestNodeTemplate,#NPC_modifier=QN_NPCMOD_SAME,
               #questnode_type=QN_TYPE_ITEMFINDCLASS,
               #cargolist=[ [ QN_PRIZETYPE_ITEMCLASS, &NeruditeArmor, 1 ],
                            [ QN_PRIZETYPE_ITEMCLASS, &NeruditeSword, 1 ],
                            [ QN_PRIZETYPE_ITEMCLASS, &IvyCirclet, 1 ],
                            [ QN_PRIZETYPE_ITEMCLASS, &DragonflyEye, 1 ],
                            [ QN_PRIZETYPE_ITEMCLASS, &TeloFruit, 1 ],
                            [ QN_PRIZETYPE_ITEMCLASS, &BattleBow, 1 ],
                            [ QN_PRIZETYPE_ITEMCLASS, &LongBow, 1 ] ],
               #prizelist=[ [ QN_PRIZETYPE_FACTION, QN_PRIZE_FACTION_UPDATE ],
                            [ QN_PRIZETYPE_SCHEDULE_QUEST, QST_ID_KOC_SERVICE ] ],
               #penaltylist=[[[QN_PRIZETYPE_FACTION, QN_PRIZE_FACTION_NEUTRAL]]],
               #timelimit=piTimeLimit,#quest_node_index=QNT_ID_KOC_LOYALTY_TWO)
      {
         Send(oQE,@SetQuestNodeAssignHint,#index=QNT_ID_KOC_LOYALTY_TWO,
               #new_hint=koc_standard2_assign);
         Send(oQE,@SetQuestNodeSuccessHint,#index=QNT_ID_KOC_LOYALTY_TWO,
               #new_hint=koc_standard2_success);
         Send(oQE,@SetQuestNodeFailureHint,#index=QNT_ID_KOC_LOYALTY_TWO,
               #new_hint=koc_standard2_failure);
      }
      else
      {
         Debug("Error building QN: QNT_ID_KOC_LOYALTY_TWO");
      }

      return;
   }

   ExtraDesc(index=$,oQuestNode=$)
   {
      local oCargo;

      if oQuestNode = $
         OR index = $
      {
         return;
      }

      // Quest node QNT_ID_KOC_LOYALTY_TWO dialog needs
      // cargo indef article and name.
      if index = QNT_ID_KOC_LOYALTY_TWO
      {
         oCargo = Send(oQuestNode,@GetCargo);
         AddPacket(4,Send(oCargo,@GetIndef), 4,Send(oCargo,@GetName));
      }

      return;
   }

end
/////////////////////////////////////////////////////////////////////////////////
