// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Stroke is Skill

constants:

   include blakston.khd

   HITVALUE_MAX = 100

resources:

   include stroke.lkod
   stroke_name_rsc = "Weapon stroke"
   stroke_icon_rsc = light.bgf
   stroke_desc_rsc = "This is a weapon stroke."

   stroke_need_weapon_rsc = "You need a weapon to perform this stroke!"

   stroke_miss_attacker = "%sYour %s misses %s%s."
   stroke_miss_defender = "%s%s misses you."
   stroke_miss_sound = swordmis.ogg

   stroke_hit_attacker = "%sYour %s hits %s%s."
   stroke_hit_defender = "%s%s hits you."

   stroke_hit_sound = patk.ogg

   stroke_swish1 = swswish1.ogg
   stroke_swish2 = swswish2.ogg
   stroke_swish3 = swswish3.ogg

classvars:

   vrName = stroke_name_rsc
   vrIcon = stroke_icon_rsc
   vrDesc = stroke_desc_rsc

   vrPlayer_Hit_something = stroke_hit_attacker
   vrPlayer_was_hit = stroke_hit_defender
   vrPlayer_killed_something = $
   vrPlayer_was_killed = $

   vrMissed_Message_attacker = stroke_miss_attacker
   vrMissed_Message_defender = stroke_miss_defender
   vrMiss_Sound = stroke_miss_sound

   viIndefinite = ARTICLE_NONE
   viDefinite = ARTICLE_NONE

   viSchool = SKS_FENCING
   viSkill_num = SKID_DEFAULT
   viSkill_Exertion = 2

   vbAutomatic = FALSE

   // What's the max damage the proficiency can add for this stroke?
   viMaxProficiencyDamage = 5

properties:

   plPrerequisites = $

messages:

   // General combat messages:

   // Can player dodge this type of attack?
   CanDodge()
   {
      return TRUE;
   }

   // Can player block this type of attack?
   CanBlock()
   {
      return TRUE;
   }

   //Can player parry this type of attack?
   CanParry()
   {
      return TRUE;
   }

   // The unsorted messages:

   ImproveStroke(who=$,use_weapon=$,target=$)
   {
      local prof, target_level;

      target_level = Send(target,@GetLevel);
      prof=Send(use_weapon,@GetProfNumber);

      if Random(1,100) > 60
         OR NOT Send(who,@HasSkill,#num=prof)
      {
         if Send(who,@GetSkillAbility,#skill_num=viSkill_num) < 100
         {
            // checking for stroke advancement
            Send(self,@ImproveAbility,#who=who,#target=target,
                  #bonus=Send(who,@GetWeaponSwingBonus));
         }
      }
      else
      {
         if Send(use_weapon,@getprof,#who=who) < 100
         {
            // checking for weapon proficiency advancement
            Send(use_weapon,@ImproveProficiency,#who=who,#target=target,
                  #bonus=Send(who,@GetWeaponSwingBonus));
         }
      }

     return;
   }

   SuccessChance()
   "Always returns TRUE for combat strokes.  COmbat strokes are figured"
   "differently than other skills - are figured in player.kod."
   {
      return TRUE;
   }

   CanPayCosts(who=$,oTarget=$)
   "If a skill requires a special cost or requirement of some sort, that"
   "cost goes here.  Example:  picklocking may require thieves tools."
   {
      local oOwner, i;

      if NOT Send(who,@HasVigor,#amount=viSkillExertion)
         AND vbCheck_Exertion
      {
         Send(who,@MsgSendUser,#message_rsc=skill_too_tired,#parm1=vrName);

         return FALSE;
      }

      propagate;
   }

   GetAttackType(weapon_used=$)
   {
     return Send(weapon_used,@getAttackType);
   }

   GetAttackSpell(weapon_used=$)
   {
     return Send(weapon_used,@getAttackSpell);
   }

   GetExertion()
   "Sword strokes vary in their vigor cost."
   {
      // Return amount of vigor (hundreths) to cast skill
      return viSkill_Exertion;
   }

   CheckWeaponAndDoAnimation(who=$,weapon_used=$,victim=$)
   "Can the user's weapon be used with this weapon stroke?  \n"
   "Default is TRUE unless the player is unarmed."
   "Animation was also put here, for backwards compatibility."
   {
      if weapon_used = $
      {
         //Send(who,@msgsenduser,#message_rsc=stroke_need_weapon_rsc);

         return FALSE;
      }

      // while you're here, be sure weapon is undamaged.
      return Send(weapon_used,@ReqWeaponAttack,#what=victim);
   }

   ToHitImprovers(raw_hitroll=0)
   "A weapon stroke may have IMPROVERS, which may boost the performance of  \n"
   "the stroke.  Example, if a player has renweed, that may boost his thrust"
   "Default, return the hitroll raw."
   {
      return Raw_hitroll;
   }

   GetRange(weapon_used = $)
   "May be tuned later on if we expand on the stroke system."
   {
      local iRange;

      if weapon_used <> $ {
         iRange = Send(weapon_used, @getrange);
      }
      
      if iRange = $
      {
         return 392;
      }

      return iRange;
   }

   FindDamage(weapon_used=$, who=$, victim=$)
   "We put this here so that we can vary a stroke's damage per weapon."
   {
      local skill_ability, damage;

      // base weapon damage
      damage = Send(weapon_used,@GetDamage,#who=who,#target=victim);

      // convert to high precision
      damage = damage*100;

      damage = Send(self,@DamageFactors,#damage=damage,#who=who,#weapon_used=weapon_used);

      return Bound(damage,0,$);
   }

   SendMissMessageToAttacker(who=$,victim=$,weapon_used = $,color_rsc = $,bText = TRUE)
   {
      local iRoll;

      /// Text messages
      if bText
      {
         Send(who,@msgsenduser,#message_rsc=vrMissed_Message_Attacker,#parm1=color_rsc,
              #parm2=vrName,#parm3=Send(victim,@GetDef),#parm4=Send(victim,@GetName));
      }

      /// 'miss' sound
      if IsClass(victim,&Monster)
         OR weapon_used = $
      {
         iRoll = Random(1,3);

         if iRoll = 1
         {
            Send(Send(who,@GetOwner),@SomethingWaveRoom,#what=who,#wave_rsc=stroke_swish1);
         }
         else if iRoll = 2
         {
            Send(Send(who,@GetOwner),@SomethingWaveRoom,#what=who,#wave_rsc=stroke_swish2);
         }
         else
         {
            Send(Send(who,@GetOwner),@SomethingWaveRoom,#what=who,#wave_rsc=stroke_swish3);
         }
      }
      else
      {
         iRoll = Random(1,12);

         if iRoll = 1
         {
            Send(Send(who,@GetOwner),@SomethingWaveRoom,#what=who,#wave_rsc=stroke_swish1);
         }
         else if iRoll = 2
         {
            Send(Send(who,@GetOwner),@SomethingWaveRoom,#what=who,#wave_rsc=stroke_swish2);
         }
         else if iRoll = 3
         {
            Send(Send(who,@GetOwner),@SomethingWaveRoom,#what=who,#wave_rsc=stroke_swish3);
         }
         else
         {
            Send(Send(who,@GetOwner),@SomethingWaveRoom,#what=who,
                  #wave_rsc=Send(victim,@GetSomethingMissedYouSound,#what=who,
                  #weapon_used=weapon_used));
         }
      }

      return;
   }

   SendMissMessageToDefender(who=$,attacker=$)
   {
      Send(who,@MsgSendUser,#message_rsc=vrMissed_Message_Defender,
            #parm1=Send(attacker,@GetCapDef),#parm2=Send(attacker,@GetName));

      return;
   }

   PlayerHitSomethingMsg(who=$,victim=$,damage=$,color_rsc=$)
   {
      Send(who,@msgsenduser,#message_rsc=vrPlayer_hit_something,#parm1=color_rsc,
            #parm2=vrName,#parm3=Send(victim,@GetDef),#parm4=Send(victim,@GetName));

      return;
   }

   PlayerWasHitMsg(who=$,attacker=$,damage=$,color_rsc=$)
   {
       Send(who,@msgsenduser,#message_rsc=vrPlayer_was_hit,#parm1=color_rsc,
            #parm2=Send(attacker,@GetCapDef),#parm3=Send(attacker,@GetName));

       return;
   }

   PlayerKilledSomethingMsg(who=$,victim=$,damage=$)
   "The stroke may choose it's own damage give or recieve message.  Otherwise"
   "player.kod will offer the default 'You killed the whatever' message."
   {
      if vrPlayer_killed_Something = $
      {
         return FALSE;
      }

      Send(who,@msgsenduser,#message_rsc=vrPlayer_killed_something,
            #parm1=Send(victim,@GetCapDef),#parm2=Send(victim,@GetName));

      return TRUE;
   }

   PlayerWasKilledMsg(who=$,attacker=$,damage=$)
   "The stroke may choose it's own damage give or recieve message.  Otherwise"
   "player.kod will just choose a default - as it does for most strokes."
   {
      if vrPlayer_was_hit = $
      {
         return FALSE;
      }

      Send(who,@MsgSendUser,#message_rsc=vrPlayer_was_killed,
            #parm1=Send(attacker,@GetDef),#parm2=Send(attacker,@GetName));

      return TRUE;
   }

   DamageFactors(damage=0, who=$, weapon_used = $)
   "Different skills/strokes are affected by stats differently."
   {
      local iDamage, iMight, iStat, weapProf, profAbility, bonusPercentage;

      iDamage = damage;
      if weapon_used <> $
      {
         weapProf = Send(SYS,@FindSkillByNum,#num=Send(weapon_used,@GetProfNumber));
         profAbility = Send(weapon_used,@GetProf,#who=who)+1;
      }
      else
      {
         weapProf = Send(SYS,@FindSkillByNum,#num=SKID_BRAWLING);
         profAbility = Send(who,@GetSkillAbility,#skill_num=SKID_BRAWLING)+1;
      }

      // Add a portion of the proficiency damage based on skill level. 
      // Proficiency damage is converted to high precision.
      iDamage = iDamage + profAbility * viMaxProficiencyDamage;

      // Get the relevant amount of primary stat for our proficiency. This will 
      // be our base bonus percentage.
      iStat = Send(weapProf,@GetRequisiteStat,#who=who) - 25;
      iMight = Send(who,@GetMight) - 25;
      iStat = (iStat + iMight) / 2;

      // Scale down the bonus damage percentage if the user is not fully 
      // proficient in the weapon.
      bonusPercentage = 100 + Bound(iStat * profAbility / 100, 0, 40);

      iDamage = iDamage * bonusPercentage / 100;

      return iDamage;
   }

   GetHitSound()
   {
      return stroke_hit_sound;
   }

end
////////////////////////////////////////////////////////////////////////////////
